<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>freegale&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://freegale.github.io/"/>
  <updated>2020-11-05T12:16:14.157Z</updated>
  <id>http://freegale.github.io/</id>
  
  <author>
    <name>freegale</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何规范化 commit 信息</title>
    <link href="http://freegale.github.io/posts/how-to-normalize-commit.html"/>
    <id>http://freegale.github.io/posts/how-to-normalize-commit.html</id>
    <published>2019-12-02T17:12:11.000Z</published>
    <updated>2020-11-05T12:16:14.157Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近在考虑如何规范化团队成员的提交信息与发布流程，包括以下一些具体的需求：</p><ul><li>规范 commit 信息的格式</li><li>版本迭代时自动打 Tag 并生成 CHAGNELOG</li></ul><a id="more"></a><h1 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h1><p>在项目中，我们遵循以下规范：</p><h2 id="语义化版本"><a href="#语义化版本" class="headerlink" title="语义化版本"></a>语义化版本</h2><div class="note info"><p>参考规范：<a href="https://semver.org" target="_blank" rel="noopener">Semantic Versioning 2.0.0</a></p></div><p>版本格式为：主版本号.次版本号.修订号，版本号递增规则如下：</p><ol><li>主版本号 [MAJOR]：当你做了不兼容的 API 修改，</li><li>次版本号 [MINOR]：当你做了向下兼容的功能性新增，</li><li>修订号 [PATCH]：当你做了向下兼容的问题修正。先行版本号及版本编译元数据可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</li></ol><h2 id="提交信息规范"><a href="#提交信息规范" class="headerlink" title="提交信息规范"></a>提交信息规范</h2><p>目前社区使用最广泛的的 commit message 规范是 Conventional Commits，由 Angular Commit 规范演变而来。</p><!-- 并且配备了非常全的工具：从 git commit 命令行工具 commitizen，到自动生成 CHAGNELOG 文件，以及 commitlint 规范验证工具，覆盖非常全面。 --><div class="note info"><p>参考规范：<a href="https://www.conventionalcommits.org/en/v1.0.0/" target="_blank" rel="noopener">Conventional Commits 1.0.0</a></p></div><p>提交信息的内容结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;[optinal scope]: &lt;description&gt;</span><br><span class="line"></span><br><span class="line">[optinal body]</span><br><span class="line"></span><br><span class="line">[optional footer(s)</span><br></pre></td></tr></table></figure><p>提交信息的编写规范如下：</p><ol><li>fix 类型的提交表示在代码库中修复了一个 bug（和语义化版本中的 <code>PATCH</code> 相对应）。</li><li>feat 类型的提交表示在代码库中新增了一个功能（和语义化版本中的 <code>MINOR</code> 相对应）。</li><li>在正文或脚注的起始位置带有 <code>BREAKING CHANGE</code> 表示引入了破坏性 API 变更（和语义化版本中的 <code>MAJOR</code> 相对应）。</li><li>允许除 fix 和 feat 外的其他类型，如基于 <a href="https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines" target="_blank" rel="noopener">Angular convention</a> 的 <a href="https://github.com/conventional-changelog/commitlint/tree/master/%40commitlint/config-conventional" target="_blank" rel="noopener">@commitlint/config-conventional</a> 就推荐了 <code>build</code> <code>chore</code> <code>ci</code> <code>docs</code> <code>style</code> <code>refactor</code> <code>perf</code> <code>test</code> 等类型。</li></ol><p>额外的类型并非是由 conventional commits 强制约束的，并且对于语义化版本无影响（除非包含 BREAKING CHANGE）。</p><p>为什么使用 conventional commits？</p><ul><li>自动化生成 CHAGNELOG。</li><li>基于提交的类型，自动决定语义化的版本变更。</li><li>向同事、公众与其他利益关系者传达变化的性质。</li><li>触发构建和部署流程。</li><li>让提交历史更加结构化，以便人们对你的项目做出贡献。</li></ul><p>说完了规范，我们需要了解如何确保规范 <strong>高效</strong>、<strong>准确</strong> 的执行。</p><p>以我们团队目前的现状为例：</p><ol><li>虽然提出了 commit 信息的提交规范，但在执行上还是不彻底，如经常出现中英文冒号混用的情况</li><li>迭代版本号由人工计算，容易出现纰漏</li><li>每次版本迭代时需要手动整理 commit 信息来生成 ChangeLog</li></ol><p>所以，在敏捷的开发流程中，一切能够被自动化所取代的人工，都应该被取代。</p><p><img src="https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/assets%2F-LGsE7zdvzHI5cG-XV6p%2F-LgZJHU7wjHywLK9p0Mz%2F-LSqFWM0RYcz0dv1n7Oc%2Fbender.png?generation=1559682450938503&amp;alt=media" alt></p><h1 id="约束提交信息"><a href="#约束提交信息" class="headerlink" title="约束提交信息"></a>约束提交信息</h1><p>明文约定是最简单的规范约束了，可以将提交规范写在 <code>CONTRIBUTING.md</code> 中，也可以写在 commit template 中，但这种方案依赖于主观意识，约束力很弱，所以有必要借助工具来强制执行。</p><h2 id="借助工具规范化提交"><a href="#借助工具规范化提交" class="headerlink" title="借助工具规范化提交"></a>借助工具规范化提交</h2><p><a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener">commitizen</a> 是最常用的规范化提交工具，它提供的 <code>git cz</code> 命令可以取代 <code>git commit</code> 命令，来接管你的提交流程，并引导你完成一次合格的符合规范的代码提交。</p><p>首先全局安装 commitizen 命令行工具：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g commitizen</span><br></pre></td></tr></table></figure><p>然后我们需要选择适配器（Adaptor），也即是指定具体的提交规范。举个例子，如果我们的项目要采用 AngularJS 的提交规范，那么我们需要安装如下适配器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commitizen init cz-conventional-changelog --save-dev --save-exact</span><br></pre></td></tr></table></figure><p>这行命令将会做三件事：</p><ol><li>安装 <code>cz-conventional-changelog</code> 适配器</li><li>将依赖关系保存在 <code>package.json</code> 中</li><li>在 <code>package.json</code> 添加跟属性，如下：</li></ol><figure class="highlight js"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"config"</span>: &#123;</span><br><span class="line">  <span class="string">"commitizen"</span>: &#123;</span><br><span class="line">    <span class="string">"path"</span>: <span class="string">"cz-conventional-changelog"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时执行 <code>git cz</code> 命令即可看到 conventional-changelog 适配器已经生效了：</p><p><img src="http://qiniu.yearito.cn/how-to-normalize-commit/commitizen.jpg" alt></p><h2 id="可定制的适配器"><a href="#可定制的适配器" class="headerlink" title="可定制的适配器"></a>可定制的适配器</h2><p>如果不习惯于 AngularJS 的这套规范，那么我们可以选择 <a href="https://github.com/leonardoanalista/cz-customizable" target="_blank" rel="noopener">cz-customizable</a> 适配器，通过修改配置文件的方式来制定符合本团队的的提交规范。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev cz-customizable</span><br></pre></td></tr></table></figure><p>修改配置文件以使用 <code>cz-customizable</code> 作为适配器：</p><figure class="highlight js"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"config"</span>: &#123;</span><br><span class="line">  <span class="string">"commitizen"</span>: &#123;</span><br><span class="line">    <span class="string">"path"</span>: <span class="string">"node_modules/cz-customizable"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在项目根目录下新建 <code>.cz-config.js</code> 文件作为规范配置文件，并在 <a href="https://github.com/leonardoanalista/cz-customizable/blob/master/cz-config-EXAMPLE.js" target="_blank" rel="noopener">官方案例</a> 的基础上进行修改（<a href="https://github.com/leonardoanalista/cz-customizable#options" target="_blank" rel="noopener">配置选项释义</a>）：</p><figure class="highlight js"><figcaption><span>.cz-config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  types: [</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">"feat"</span>, <span class="attr">name</span>: <span class="string">"✨ feat: A new feature"</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">"fix"</span>, <span class="attr">name</span>: <span class="string">"🐞 fix: A bug fix"</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">"docs"</span>, <span class="attr">name</span>: <span class="string">"📖 docs: Documentation only changes"</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="string">"style"</span>,</span><br><span class="line">      name:</span><br><span class="line">        <span class="string">"👚 style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="string">"refactor"</span>,</span><br><span class="line">      name:</span><br><span class="line">        <span class="string">"🛠 refactor: A code change that neither fixes a bug nor adds a feature"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="string">"perf"</span>,</span><br><span class="line">      name: <span class="string">"🚀 perf: A code change that improves performance"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">"test"</span>, <span class="attr">name</span>: <span class="string">"💊 test: Adding missing tests"</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="string">"chore"</span>,</span><br><span class="line">      name:</span><br><span class="line">        <span class="string">"🗯 chore: Changes to the build process or auxiliary tools and libraries such as documentation generation"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">"revert"</span>, <span class="attr">name</span>: <span class="string">"⏪ revert: Revert to a commit"</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">"WIP"</span>, <span class="attr">name</span>: <span class="string">"💪 WIP: Work in progress"</span> &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  scopes: [],</span><br><span class="line"></span><br><span class="line">  allowTicketNumber: <span class="literal">false</span>,</span><br><span class="line">  isTicketNumberRequired: <span class="literal">false</span>,</span><br><span class="line">  ticketNumberPrefix: <span class="string">"ISSUES-CLOSED"</span>,</span><br><span class="line">  ticketNumberRegExp: <span class="string">"\\d&#123;1,5&#125;"</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// override the messages, defaults are as follows</span></span><br><span class="line">  messages: &#123;</span><br><span class="line">    type: <span class="string">"Select the type of change that you're committing:"</span>,</span><br><span class="line">    scope: <span class="string">"\nDenote the SCOPE of this change (optional):"</span>,</span><br><span class="line">    <span class="comment">// used if allowCustomScopes is true</span></span><br><span class="line">    customScope: <span class="string">"Denote the SCOPE of this change:"</span>,</span><br><span class="line">    subject: <span class="string">"Write a SHORT, IMPERATIVE tense description of the change:\n"</span>,</span><br><span class="line">    body:</span><br><span class="line">      <span class="string">'Provide a LONGER description of the change (optional). Use "|" to break new line:\n'</span>,</span><br><span class="line">    breaking: <span class="string">"List any BREAKING CHANGES (optional):\n"</span>,</span><br><span class="line">    footer:</span><br><span class="line">      <span class="string">"List any ISSUES CLOSED by this change (optional). E.g.: #31, #34:\n"</span>,</span><br><span class="line">    confirmCommit: <span class="string">"Are you sure you want to proceed with the commit above?"</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  allowCustomScopes: <span class="literal">true</span>,</span><br><span class="line">  allowBreakingChanges: [<span class="string">"feat"</span>, <span class="string">"fix"</span>],</span><br><span class="line">  <span class="comment">// skip any questions you want</span></span><br><span class="line">  skipQuestions: [<span class="string">"scope"</span>, <span class="string">"customScope"</span>, <span class="string">"body"</span>],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// limit subject length</span></span><br><span class="line">  subjectLimit: <span class="number">100</span></span><br><span class="line">  <span class="comment">// breaklineChar: '|', // It is supported for fields body and footer.</span></span><br><span class="line">  <span class="comment">// footerPrefix : 'ISSUES CLOS  ED:'</span></span><br><span class="line">  <span class="comment">// askForBreakingChangeFirst : true, // default is false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="自定义适配器"><a href="#自定义适配器" class="headerlink" title="自定义适配器"></a>自定义适配器</h2><p>如果连自定义适配器都无法满足你的需求了，则可以考虑自己写一个适配器。</p><p>先随便 fork 一个适配器到本地，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:Coodool/cz-conventional-changelog.git</span><br></pre></td></tr></table></figure><p>根据业务修改 <code>engine.js</code> 中的各项交互细节和提交规范，发布到 npm 中，然后就和使用其他适配器的方法一样了。</p><h2 id="内置到-git-工作流中"><a href="#内置到-git-工作流中" class="headerlink" title="内置到 git 工作流中"></a>内置到 git 工作流中</h2><p>使用 <code>git cz</code> 来替代 <code>git commit</code>，看起来不太优雅，有没有办法在通过 <code>git commit</code> 提交的时候也能启动 <code>commitizen</code> 呢？这样一来，就能确保所有的提交者都必须通过 <code>commitizen</code> 来提交了。</p><p>我们可以通过 git hooks 和 <code>--hook</code> 选项来介入到提交信息流程中，将 <code>commitizen</code> 合并到原生的 git 工作流中。这里有两个方案可供选择：</p><h3 id="git-hooks"><a href="#git-hooks" class="headerlink" title="git hooks"></a>git hooks</h3><figure class="highlight bash"><figcaption><span>.git/hooks/prepare-commit-msg</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">+ <span class="built_in">exec</span> &lt; /dev/tty &amp;&amp; node_modules/.bin/git-cz --hook || <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="Husky"><a href="#Husky" class="headerlink" title="Husky"></a>Husky</h3><p><a href="https://github.com/typicode/husky" target="_blank" rel="noopener">Husky</a> 提供了一种更方便的处理 git hooks 的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev husky</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"husky"</span>: &#123;</span><br><span class="line">  <span class="string">"hooks"</span>: &#123;</span><br><span class="line">    <span class="string">"prepare-commit-msg"</span>: <span class="string">"exec &lt; /dev/tty &amp;&amp; git cz --hook || true"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note "><p>为什么使用 <code>exec &lt; /dev/tty</code> 呢？因为默认情况下 git hooks 不是交互式的，这个命令允许用户使用终端与 commitizen 进行交互。</p></div><h2 id="校验提交信息"><a href="#校验提交信息" class="headerlink" title="校验提交信息"></a>校验提交信息</h2><p><code>commitizen</code> 可以帮我们规范提交信息，但它并没有强制约束力。我们可以使用 <code>conventional-changelog</code> 生态中的 <a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noopener">commitlint</a> 来校验提交信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @commitlint/config-conventional @commitlint/cli</span><br></pre></td></tr></table></figure><p>其中，<code>@commitlint/cli</code> 是命令行工具，<code>@commitlint/config-conventional</code> 是推荐的默认规范（基于 Angular 规范）。</p><p>相关配置项可以写在如下两个地方：</p><ul><li>在 <code>package.json</code> 中添加 <code>commitlint</code> 属性</li><li>在根目录下添加 <code>commitlint.config.js</code> <code>.commitlintrc.js</code> <code>.commitlintrc.json</code> 或 <code>.commitlintrc.yml</code> 文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  extends: [<span class="string">"@commitlint/config-conventional"</span>], <span class="comment">//继承已有的配置规则</span></span><br><span class="line">  parserPreset: <span class="built_in">String</span>,  <span class="comment">//解析器</span></span><br><span class="line">  formatter: <span class="built_in">String</span>, <span class="comment">//格式化输出</span></span><br><span class="line">  rules <span class="built_in">Object</span>, <span class="comment">//具体的校验规则</span></span><br><span class="line">  ignores: [<span class="built_in">Function</span>], <span class="comment">//如果需要忽略提交信息，则函数返回True</span></span><br><span class="line">  defaultIgnores: <span class="built_in">Boolean</span> <span class="comment">//是否使用默认的忽略规则</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>rules</code> 的配置手册请参见 <a href="https://github.com/conventional-changelog/commitlint/blob/master/docs/reference-rules.md" target="_blank" rel="noopener">reference-rules.md</a></p><p>借助 <code>husky</code> 来添加 git hooks，即可在提交信息的时候自动启动 <code>commitlint</code></p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"husky"</span>: &#123;</span><br><span class="line">    <span class="attr">"hooks"</span>: &#123;</span><br><span class="line">      <span class="attr">"commit-msg"</span>: <span class="string">"commitlint -E HUSKY_GIT_PARAMS"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info"><p>更多使用说明请参考 <a href="https://commitlint.js.org/" target="_blank" rel="noopener">commitlint.js.org</a></p></div><h1 id="规范发布流程"><a href="#规范发布流程" class="headerlink" title="规范发布流程"></a>规范发布流程</h1><p>当一个迭代周期结束的时候，我们需要将该周期内的改动梳理出来，然后根据改动内容来决定如何升级版本号。</p><p>在此提供三种方案：</p><ul><li>conventional-changelog-cli</li><li>semantic-release</li><li>standard-version</li></ul><h2 id="conventional-changelog-cli"><a href="#conventional-changelog-cli" class="headerlink" title="conventional-changelog-cli"></a>conventional-changelog-cli</h2><p><a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-cli" target="_blank" rel="noopener">conventional-changelog-cli</a> 可以用来自动生成 CHAGNELOG：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g conventional-changelog-cli</span><br><span class="line">conventional-changelog -p angular -i CHANGELOG.md -s</span><br></pre></td></tr></table></figure><p>conventional-changelog-cli 只生成了 CHAGNELOG，但却没有自增版本号，所以我们可以搭配 <code>npm version</code> 来弥补其不足。</p><p>添加如下脚本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"conventional-changelog -p angular -i CHANGELOG.md -s &amp;&amp; git add CHANGELOG.md"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当需要发布流程的时候，以此执行以下步骤：</p><ol><li>提交本地更新</li><li>拉取最新的 tags</li><li>运行 <code>npm version [patch|minor|major]</code> 命令</li><li>推送到远程仓库</li></ol><div class="note "><p>你可以添加一个 <code>preversion</code> 脚本来打包你的项目或者运行测试，也可以添加一个 <code>postversion</code> 脚本来清理系统并推送发布和 tags。</p></div><p>在执行 <code>npm version</code> 的时候会自动产生一次以版本号命名的提交，如果想格式化这个提交的信息，可以在 <code>.npmrc</code> 中添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tag-version-prefix=&quot;&quot;</span><br><span class="line">message=&quot;chore(release): %s :tada:&quot;</span><br></pre></td></tr></table></figure><p>这个方案流程上还不够优雅，因为还没法根据历史提交信息来自动升级版本号，并且还只支持 <code>angular</code> <code>atom</code> <code>codemirror</code> <code>ember</code> <code>eslint</code> <code>express</code> <code>jquery</code> <code>jscs</code> 和 <code>jshint</code> 这几种预设。</p><p>所以，conventional-changelog 在 README 文档中给我们推荐了下文两种更高级的方案：</p><h2 id="standard-version"><a href="#standard-version" class="headerlink" title="standard-version"></a>standard-version</h2><p><code>npm version</code> 的完美替代品，支持自动版本升级、生成 tag 和 CHAGNELOG。</p><p>安装 <a href="https://github.com/conventional-changelog/standard-version" target="_blank" rel="noopener">standard-version</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev standard-version</span><br></pre></td></tr></table></figure><p>在 <code>package.json</code> 中添加如下脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;release&quot;: &quot;standard-version&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h3><p>当你需要发布版本的时候，按照如下步骤进行：</p><ol><li><code>npm run release</code></li><li><code>git push --follow-tags origin master</code></li></ol><div class="note info"><p>使用 <code>--follow-tags</code> 选项可以将与提交相关的 tags 推送到远程仓库。</p></div><p>在这个过程中 <code>standard-version</code> 做了些什么呢？</p><ol><li>在元数据文件中升级版本号，如 <code>package.json</code> <code>composer.json</code> 等</li><li>使用 <a href="https://github.com/conventional-changelog/conventional-changelog" target="_blank" rel="noopener">conventional-changelog</a> 更新 CHANGELOG.md</li><li>提交 <code>package.json</code> 和 CHANGELOG.md</li><li>打标签</li></ol><h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><p>如果需要修改生成 CHANGELOG 的规则，可以根据 <a href="https://github.com/conventional-changelog/conventional-changelog-config-spec/blob/master/versions/2.1.0/README.md" target="_blank" rel="noopener">conventional-changelog-config-spec</a> 中的配置项来进行自定义。</p><p>配置规则可以写在如下两个地方：</p><ul><li>在 <code>package.json</code> 中添加 <code>standard-version</code> 属性</li><li>在根目录下添加 <code>.versionrc</code> <code>.versionrc.json</code> 或 <code>.versionrc.js</code> 文件</li></ul><h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><p><code>standard-version --no-verify</code> 可以阻止如 <code>pre-commit</code> 等 git hooks，避免触发不必要的测试或校验流程。</p><p>以及，支持生命周期脚本来完成定制化需求，如将 issues 的 url 片段从 github 改到 jira：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"standard-version"</span>: &#123;</span><br><span class="line">    <span class="string">"scripts"</span>: &#123;</span><br><span class="line">      <span class="string">"postchangelog"</span>: <span class="string">"replace 'https://github.com/myproject/issues/' 'https://myjira/browse/' CHANGELOG.md"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="semantic-release"><a href="#semantic-release" class="headerlink" title="semantic-release"></a>semantic-release</h2><p>支撑全自动化的打包发布工作流，包括自动升级版本号，生成发布说明，发布软件包。</p><p>听起来和 <code>standard-version</code> 好像功能很相似，那么两者到底有什么区别呢？</p><ul><li><code>standard-version</code> 只对本地资源做更改：升级版本号，生成 CHANGELOG，打标签，但是并没有涉及到推送远程仓库及软件发布流程（如 <code>npm publish</code>）。</li><li><code>semantic-release</code> 可以集成到 CI/CD 工作流中，支持本地开发到远程部署的全流程自动化。</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>安装 <a href="https://github.com/semantic-release/semantic-release" target="_blank" rel="noopener">semantic-release</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev semantic-release</span><br></pre></td></tr></table></figure><h3 id="CI"><a href="#CI" class="headerlink" title="CI"></a>CI</h3><p>这里解释了如何在 Gitlab CI 流程中集成 <code>semantic-release</code>：<a href="https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/gitlab-ci.md" target="_blank" rel="noopener">Using semantic-release with GitLab CI</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">stages:</span><br><span class="line">    - test</span><br><span class="line">    - release</span><br><span class="line"></span><br><span class="line">before_script:</span><br><span class="line">  - npm install</span><br><span class="line"></span><br><span class="line">test:</span><br><span class="line">  image: node:8</span><br><span class="line">  stage: test</span><br><span class="line">  script:</span><br><span class="line">    - npm test</span><br><span class="line"></span><br><span class="line">publish:</span><br><span class="line">  image: node:8</span><br><span class="line">  stage: release</span><br><span class="line">  script:</span><br><span class="line">    - npx semantic-release</span><br></pre></td></tr></table></figure><h3 id="配置项-1"><a href="#配置项-1" class="headerlink" title="配置项"></a>配置项</h3><p><code>semantic-release</code> 的 <a href="https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#options" target="_blank" rel="noopener">配置项</a>、模式、<a href="https://github.com/semantic-release/semantic-release/blob/master/docs/usage/plugins.md" target="_blank" rel="noopener">插件</a> 可以设置在如下三个地方：</p><ul><li>根目录下的 <code>.releaserc</code> 文件，后缀名可以是 <code>.yaml</code> <code>.yml</code> <code>.json</code> <code>.js</code></li><li>根目录下的 <code>release.config.js</code> 文件</li><li><code>package.json</code> 文件中的 <code>release</code> 属性</li></ul><blockquote><p>更多内容待实践后补充</p></blockquote><div class="reference-linking">参考链接</div><ul><li><a href="https://semver.org" target="_blank" rel="noopener">Semantic Versioning 2.0.0</a></li><li><a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener">commitizen/cz-cli</a></li><li><a href="https://github.com/conventional-changelog/conventional-changelog" target="_blank" rel="noopener">conventional-changelog/conventional-changelog</a></li><li><a href="https://github.com/conventional-changelog/standard-version" target="_blank" rel="noopener">conventional-changelog/standard-version</a></li><li><a href="https://github.com/semantic-release/semantic-release" target="_blank" rel="noopener">semantic-release/semantic-release</a>：</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在考虑如何规范化团队成员的提交信息与发布流程，包括以下一些具体的需求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;规范 commit 信息的格式&lt;/li&gt;
&lt;li&gt;版本迭代时自动打 Tag 并生成 CHAGNELOG&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://freegale.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="工程化" scheme="http://freegale.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
      <category term="CI/CD" scheme="http://freegale.github.io/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>「译」GraphQL与REST，优势是什么</title>
    <link href="http://freegale.github.io/posts/GraphQL-vs-REST.html"/>
    <id>http://freegale.github.io/posts/GraphQL-vs-REST.html</id>
    <published>2019-11-23T15:28:54.000Z</published>
    <updated>2020-11-05T12:16:14.148Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info"><p>原文链接： <a href="https://www.manifold.co/blog/graphql-vs-rest-whats-the-advantage" target="_blank" rel="noopener">GraphQL vs. REST: What’s The Advantage?</a></p></div><p>由 Facebook 开创的 <a href="https://graphql.org/" target="_blank" rel="noopener">GraphQL</a>，自 2015 年面世以来就一直在改进着 web 和原生应用。相比较于传统的 REST API，它的几个优势也使得其使用率迅速提升。</p><a id="more"></a><h1 id="优势-1：更少的数据"><a href="#优势-1：更少的数据" class="headerlink" title="优势 1：更少的数据"></a>优势 1：更少的数据</h1><p>大多数你消费的目标数据来源于某个地方的数据库。如果你正好在 SQL 数据库上工作，你应该知道，只请求你所需要的字段比请求所有的字段要更高效。</p><p>在 REST 的体系中，几乎不可能只指定你需要的字段。结果，你通常会获取比你所需要的更多的数据。如果你需要一次获得多条记录，这时你就需要处理一个指数级的问题。</p><p>在 Manifold，我们与所有 REST 终端返回的数据做斗争。</p><h2 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.catalog.manifold.co/v1/products</span><br></pre></td></tr></table></figure><p>这个链接返回 <code>141 KB</code> 的 JSON 数据，并且这还不是我们最重的终端。（我们最重的 REST 终端返回 1M 以上的 JSON 数据！）对于这个终端，任何时候我们需要任意产品的数据的时候，这份数据都会装载到客户端里。并且，在 REST 工作的方式中，这只是我们需要渲染一个页面所需的几个调用中的一个。</p><p>相比于我们的 GraphQL 终端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//request</span><br><span class="line">&#123;</span><br><span class="line">  products(first: 100) &#123;</span><br><span class="line">    edgets &#123;</span><br><span class="line">      node &#123;</span><br><span class="line">        displayName</span><br><span class="line">        logoUrl</span><br><span class="line">        tagline</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//response</span><br><span class="line">&#123;</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;products&quot;: &#123;</span><br><span class="line">      &quot;edges&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;node&quot;: &#123;</span><br><span class="line">            &quot;displayName&quot;: &quot;Dumper&quot;,</span><br><span class="line">            &quot;logoUrl&quot;: &quot;https://cdn.manifold.co/providers/dumper/logos/512x512_2.png&quot;,</span><br><span class="line">            &quot;tagline&quot;: &quot;Off-site backup-as-a-service for MySQL, PostgreSQL, MongoDB and Redis.&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;node&quot;: &#123;</span><br><span class="line">            &quot;displayName&quot;: &quot;Blitline&quot;,</span><br><span class="line">            &quot;logoUrl&quot;: &quot;https://cdn.manifold.co/providers/blitline/logos/blitline.png&quot;,</span><br><span class="line">            &quot;tagline&quot;: &quot;Premium image processing and rasterization API for enterprise systems&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们只需要三个字段，我们的 GraphQL 终端只返回我们所需要的，并且只有 <code>9.4 KB</code>，比 REST 要小 95%。</p><p>此外，很多时候我们需要通过后续的 REST 请求来获取一个产品的计划数据（我们将在接下来谈到链式）。对于我们查询的每个产品，我们有时候也需要查询它的计划。这是一个示例，关于如何将这些多重查询结合成一个 GraphQL 查询（以及一些其他用于比较的场景）：</p><table><thead><tr><th>场景</th><th>REST 数据量</th><th>GraphQL 数据量</th><th>降低</th></tr></thead><tbody><tr><td>所有产品 + 所有计划</td><td><code>562.4 KB</code></td><td><code>15.4 KB</code></td><td>97%</td></tr><tr><td>所有产品</td><td><code>141 KB</code></td><td><code>9.4 KB</code></td><td>95%</td></tr><tr><td>单个产品</td><td><code>4.1 KB</code></td><td><code>0.2 KB</code></td><td>95%</td></tr></tbody></table><p>并且思考一下：这节约的只是针对一个用户的。想象一下大规模应用后它将带来什么：技能降低加载时间，又能降低带宽占用。</p><h1 id="优势-2：组合请求"><a href="#优势-2：组合请求" class="headerlink" title="优势 2：组合请求"></a>优势 2：组合请求</h1><p>GraphQL 另外一个重要的优势即是其组合多个请求的能力。如果你之前使用过 REST，你可能常常经历链式调用的痛苦：</p><ol><li>我们需要展示一个团队，先来调用 <code>/team/:id</code> 请求。</li><li>每个 <code>team</code> 拥有一系列的 <code>userIDs</code>。对于每个团队用户，我们需要调用 <code>/user/:id</code> 请求对于每个这些 ID。</li><li>我们还想要展示有哪些其他的队伍上也包含了这个 <code>user</code>。此时我们针对每个团队、每个用户再次调用 <code>/team/:id</code>。</li></ol><p>让我们把它加起来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/team/:id  1</span><br><span class="line">/user/:id  n (n: 团队里成员的数量)</span><br><span class="line">/team/:id  n × t (t: 每个用户的团队数量)</span><br></pre></td></tr></table></figure><p>如果这是一个拥有 20 个用户的团队，每个用户有三个团队，那么我们需要发送 81 个 REST 请求来渲染一个视图。</p><p>的确我们可以找到优化这个 REST 链的方法，但是我们需要手动去做，并且可能是仅仅针对于这个场景的。这些优化在 REST 里并非是天生免费的。</p><p>幸运的是，在 GraphQL 里是很简单的。这里展示了你可以如何将这些 REST 请求组合在同一个 GraphQL 查询中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">query TEAM_USERS &#123;</span><br><span class="line">  team(id: $teamID) &#123;</span><br><span class="line">    users &#123;</span><br><span class="line">      edges &#123;</span><br><span class="line">        node &#123;</span><br><span class="line">          avatarURL</span><br><span class="line">          displayName</span><br><span class="line">          teams &#123;</span><br><span class="line">            edges &#123;</span><br><span class="line">              node &#123;</span><br><span class="line">                displayName</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 GraphQL 里，你可以在一个请求里完成所有上述工作。只需要管理一个请求，而非三个不同的递归查询，这就说明了使用 GraphQL 不仅提升了性能，也降低了前端应用的代码复杂度。</p><h2 id="关于查询复杂度的一个注解"><a href="#关于查询复杂度的一个注解" class="headerlink" title="关于查询复杂度的一个注解"></a>关于查询复杂度的一个注解</h2><p>既然 GraphQL 可以方便的将 models 联系起来，并且你可以从一个 model 上查询另一个 model，这里有一个与你的 GraphQL 服务器相关的东西叫做“复杂度”，它会影响到性能。与在 SQL 查询语句中的 JOINs 并不是免费的，GraphQL 分解器也是如此。当我们通过在 GraphQL 中嵌套来从获取一个远程的 model 的时候，我们称之为“分解”（resolving）。</p><p>比如说，在我们想象的用户/团队场景中，你可能注意到了，从团队查用户或者从用户查团队都很爽，但是如果你一直这样链式调用：用户-团队-用户-团队，你会注意到在到达一定程度后出现延迟。多少延迟，以及在什么级别会出现延迟取决于你的 GraphQL 服务器、中间件以及数据库结构。但是不管你的配置如何，我们都建议你将查询深度限制在一个合适的级别上：既能避免出现昂贵的查询，又能给予你应用中灵活性。（比如说十级深度）</p><h1 id="优势-3：订阅"><a href="#优势-3：订阅" class="headerlink" title="优势 3：订阅"></a>优势 3：订阅</h1><p>GraphQL 的最后一个优势就是订阅：发送查询或修改并且自动更新的能力。通常这些会在 GraphQL 服务器端通过 <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API" target="_blank" rel="noopener">WebSockets</a> 来实现。</p><p>当我们想使用 GraphQL 创造一个聊天应用的时候，我们可能会像下面这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">subscription MESSAGES() &#123;</span><br><span class="line">  messagesSubscribe(last: 200) &#123;</span><br><span class="line">    edges &#123;</span><br><span class="line">      node &#123;</span><br><span class="line">        text</span><br><span class="line">        author &#123;</span><br><span class="line">          avatarURL</span><br><span class="line">          userName</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在我们的应用中， <code>messageSubscribe.edges</code> 可能是一个在新消息送达的时候会自动更新的消息数组。如果没有订阅机制，我们可能需要每秒发送一次或更多的请求，这会导致短时间内出现上百次的调用。</p><p>有了订阅机制，只有当消息发送或接收到的时候才会打开连接并传输数据。</p><p>为了发挥订阅的全部优势，你需要使用一个客户端来支撑。最流行的客户端如 <a href="https://www.apollographql.com/docs/react/" target="_blank" rel="noopener">Apollo Client</a> 等已经内置了订阅。</p><p>关于 GraphQL 的订阅可以做什么，这里有一个有趣的例子，请打开 <a href="https://twitter.com/eveporcello" target="_blank" rel="noopener">Eve Porcello</a> 在 React Rally 2018 的讲话，五个参与者通过订阅创建了即时音乐。点开视频，从 <code>22:45</code> 开始看。（她的讲解一直持续到演示结束）：</p><iframe width="700" height="394" src="https://www.youtube.com/embed/F_M8v6MK0Sc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="REST-有什么优势么？"><a href="#REST-有什么优势么？" class="headerlink" title="REST 有什么优势么？"></a>REST 有什么优势么？</h1><p>我们已经在此讲了很多 GraphQL 的好处了，那么 REST 保留了什么优势么？平心而论， GraphQL 是建立在 REST 的基础上的，所以它的设计是一个向前的迭代。REST 已经是现在 web 最有影响力、最基本的构成了，并且没有它的存在也不会有 GraphQL。所以考虑到 REST 的影响力，公平地说，GraphQL 是在 REST 上的一个显著提升，这个提升体现在几乎所有的方面。</p><p>对于 Manifold 里的我们，我们没发现 GraphQL 有什么缺失的特性。我们在移植过程中最大的痛点即是所有新技术都将面临的问题：工具仍在成熟中。并非是每个你想在其中建立 GraphQL 服务器的语言都具有你需要的所有特性。对于运行 <a href="https://golang.org/" target="_blank" rel="noopener">Go</a> 微服务栈的我们来说，Go 相较于基于 Node.js 的 Apollo 服务器来说缺少了很多特性。（但是考虑到包括性能在内的几个原因我们仍选择了 Go）。</p><p>我们最终选择了在 <a href="https://github.com/99designs/gqlgen" target="_blank" rel="noopener">99designs/gqlgen</a> 上搭建 GraphQL 服务，再配上一些特殊的工具来使得简化分页和数据库优化。</p><p>我们有信心 GraphQL 社区将会迎头赶上，但是在 2019 年你还不能在 GraphQL 客户端和工具中体验和 REST 一样的多样性和完备性。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>这是我们在生产中应用 GraphQL 而非 REST 的最大的三个优势，你的呢？</p><p>如果你对 GraphQL 有更多的兴趣，我们推荐如下的资源：</p><ul><li><a href="https://www.graphqlweekly.com/" target="_blank" rel="noopener">GraphQL Weekly</a>: 一个 GraphQL 的每周时报，包括文章、库和建议</li><li><a href="https://summit.graphql.com/" target="_blank" rel="noopener">GraphQL Summit</a>: GraphQL 的年会，通常在 San Francisco</li><li><a href="https://spectrum.chat/apollo" target="_blank" rel="noopener">Apollo Community</a>: 一个讨论 GraphQL、分享知识或者提问问题的好地方。运行在 <a href="https://spectrum.chat/" target="_blank" rel="noopener">Spectrum</a> 上：一个为开源而生的免费、开放性的讨论平台。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;原文链接： &lt;a href=&quot;https://www.manifold.co/blog/graphql-vs-rest-whats-the-advantage&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GraphQL vs. REST: What’s The Advantage?&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;由 Facebook 开创的 &lt;a href=&quot;https://graphql.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GraphQL&lt;/a&gt;，自 2015 年面世以来就一直在改进着 web 和原生应用。相比较于传统的 REST API，它的几个优势也使得其使用率迅速提升。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://freegale.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="http://freegale.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="翻译" scheme="http://freegale.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>「译」axios和fetch，我们应该用哪个？</title>
    <link href="http://freegale.github.io/posts/axios-or-fetch-api.html"/>
    <id>http://freegale.github.io/posts/axios-or-fetch-api.html</id>
    <published>2019-11-17T04:40:28.000Z</published>
    <updated>2020-11-05T12:16:14.149Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info"><p>原文链接： <a href="https://blog.logrocket.com/axios-or-fetch-api/" target="_blank" rel="noopener">Axios or fetch(): Which should you use?</a></p></div><p>Axios 一直是我开发项目时发送 HTTP 请求的首选。最近看到一篇外文博客里，详细介绍了如何在使用 fetch 的时候实现 Axios 的一些关键特性，以使我们能够方便的过渡到 fetch 这一原生 API 上。</p><a id="more"></a><hr><p>在我最近的一篇文章 <a href="https://blog.logrocket.com/how-to-make-http-requests-like-a-pro-with-axios/#new_tab" target="_blank" rel="noopener">如何像一个老手一样通过 Axios 发送 HTTP 请求</a> 中，我讨论了使用 Axios 的好处。然而 Axios 并非总是理想的解决方案，有时还有其他更好的做法来发送 HTTP 请求。</p><p>毫无疑问，由于更易使用，一些开发者更喜欢 Axios 而非原生的内置 API。但也有很多人高估了这个库的必要性。<code>fecth()</code> API 能够完美复现 Axios 的关键特性，并且它还有一个额外的优点：已内置在所有现代浏览器里。</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>在我们进一步深入 Axios 的更多高级特性之前，我们先来比较一下它和 <code>fetch()</code> 的基本语法。这里展示了你该如何通过 Axios 发送一个带有自定义头部信息的 POST 请求到一个 URL 地址。Axios 将会帮你自动把响应数据转成 JSON 格式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// axios</span></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  url: <span class="string">"http://localhost/test.htm"</span>,</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    Accept: <span class="string">"application/json"</span>,</span><br><span class="line">    <span class="string">"Content-Type"</span>: <span class="string">"application/json;charset=UTF-8"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    a: <span class="number">10</span>,</span><br><span class="line">    b: <span class="number">20</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">axios(options).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response.status);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>现在我们将这份代码与 <code>fetch()</code> 版本的代码比较一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fetch()</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">"http://localhost/test.htm"</span>;</span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    Accept: <span class="string">"application/json"</span>,</span><br><span class="line">    <span class="string">"Content-Type"</span>: <span class="string">"application/json;charset=UTF-8"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    a: <span class="number">10</span>,</span><br><span class="line">    b: <span class="number">20</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fetch(url, options).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response.status);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>为发送数据，<code>fetch()</code> 使用的是 body 属性，而 Axios 使用的是 data 属性</li><li><code>fetch()</code> 中的数据需要处理为字符串</li><li>在 <code>fetch()</code> 中， URL 是作为一个参数传递的，然而在 Axios 中，URL 是被放在 options 对象中传入的</li></ul><h1 id="向后兼容性"><a href="#向后兼容性" class="headerlink" title="向后兼容性"></a>向后兼容性</h1><p>Axios 的一个主要卖点即是它广泛的浏览器兼容性，即使是如 IE11 这样的老浏览器也能正常运行 Axios。另一方面，<code>fetch()</code> 只支持 Chrome 42+, FireFox 39+, Edge 14+ 以及 Safari 10.1+。（你可以在 <a href="https://caniuse.com/#search=Fetch" target="_blank" rel="noopener">Can I use</a> 里查看完整的兼容性表）</p><p>如何向后兼容性是你使用 Axios 的唯一理由，那其实你不是真的需要一个 HTTP 库。作为替代，你可以在不支持 <code>fetch()</code> 的浏览器上使用 <a href="https://github.com/github/fetch" target="_blank" rel="noopener">这样</a> 的 polyfill 以实现类似的功能。要开始使用这样的 fetch polyfill，通过 npm 命令安装它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install whatwg-fetch --save</span><br></pre></td></tr></table></figure><p>然后你可以像这样发送请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &apos;whatwg-fetch&apos;</span><br><span class="line">window.fetch(...)</span><br></pre></td></tr></table></figure><p>记住，在老式浏览器上你可能还需要一个 promise 的 polyfill。</p><h1 id="响应超时"><a href="#响应超时" class="headerlink" title="响应超时"></a>响应超时</h1><p>在 Axios 中设置响应超时很简单，这也成为了开发者选择它的另外一个原因。你可以在配置对象中设置 <code>timeout</code> 属性以设置请求终止的毫秒数，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">  method: <span class="string">"post"</span>,</span><br><span class="line">  url: <span class="string">"/login"</span>,</span><br><span class="line">  timeout: <span class="number">4000</span>, <span class="comment">// 4 seconds timeout</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">"David"</span>,</span><br><span class="line">    lastName: <span class="string">"Pollock"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/* handle the response */</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">"timeout exceeded"</span>));</span><br></pre></td></tr></table></figure><p><code>fetch()</code> 通过 <code>AbortController</code> 接口来提供类似的功能。虽然不如 Axios 来的那么简单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> controller = <span class="keyword">new</span> AbortController();</span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">  signal: controller.signal,</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    firstName: <span class="string">"David"</span>,</span><br><span class="line">    lastName: <span class="string">"Pollock"</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> promise = fetch(<span class="string">"/login"</span>, options);</span><br><span class="line"><span class="keyword">const</span> timeoutId = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> controller.abort(), <span class="number">4000</span>);</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/* handle the response */</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">"timeout exceeded"</span>));</span><br></pre></td></tr></table></figure><p>这里，我们通过 <code>AbortController.AbortController()</code> 构造函数创建一个 <code>AbortController</code>，之后我们将用这个对象取消请求。<code>signal</code> 是 <code>AbortController</code> 的一个只读属性，提供了与请求通信或取消的方法。如果服务器在 4 秒内没有响应，<code>controller.abort()</code> 就会被调用，然后通信操作会被终止。</p><h1 id="自动-JSON-数据转换"><a href="#自动-JSON-数据转换" class="headerlink" title="自动 JSON 数据转换"></a>自动 JSON 数据转换</h1><p>正如我们之前说过的，Axios 在发送请求的时候会自动将数据字符串化（尽管你也可以覆写默认的行为来定义一个不同的转换机制）。但当使用 <code>fetch()</code> 的时候，你需要手动做这个事。比较一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// axios</span></span><br><span class="line">axios.get(<span class="string">"https://api.github.com/orgs/axios"</span>).then(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.data);</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fetch()</span></span><br><span class="line">fetch(<span class="string">"https://api.github.com/orgs/axios"</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json()) <span class="comment">// one extra step</span></span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.error(error));</span><br></pre></td></tr></table></figure><p>数据自动转换是一个不错的功能，但再一次的，这并不是什么你在 <code>fetch()</code> 里做不了的东西。</p><h1 id="HTTP-拦截器"><a href="#HTTP-拦截器" class="headerlink" title="HTTP 拦截器"></a>HTTP 拦截器</h1><p>Axios 的一个关键特性即是它拦截 HTTP 请求的能力。HTTP 拦截器在你需要测试或改变从你的应用到服务器（反之亦然）的 HTTP 请求的时候派得上用场（例如，日志、权限认证等）。有了拦截器，你不再需要为每个 HTTP 请求写单独的代码。</p><p>这里展示了你该如何在 Axios 里生命一个请求拦截器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// log a message before any HTTP request is sent</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Request was sent"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// sent a GET request</span></span><br><span class="line">axios.get(<span class="string">"https://api.github.com/users/sideshowbarker"</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response.data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在这里，<code>axios.interceptors.request.use()</code> 方法用来定义一段在 HTTP 请求发送之前的代码逻辑。</p><p>默认情况下，<code>fetch()</code> 并没有提供一个拦截 HTTP 的方法，但是想出一个变通的办法并不难。你可以像这样覆写全局的 fetch 方法来定义一个你自己的拦截器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fetch = (<span class="function"><span class="params">originalFetch</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...<span class="built_in">arguments</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = originalFetch.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> result.then(<span class="built_in">console</span>.log(<span class="string">"Request was sent"</span>));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(fetch);</span><br><span class="line"></span><br><span class="line">fetch(<span class="string">"https://api.github.com/orgs/axios"</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h1 id="下载进度"><a href="#下载进度" class="headerlink" title="下载进度"></a>下载进度</h1><p>进度指示器在下载大型资源的时候非常有用，尤其是那些网速较慢的用户。以前，JavaScript 开发者使用<code>XMLHttpRequest.onprogress</code>回调处理器来实现进度指示器。</p><p><a href="https://blog.logrocket.com/patterns-for-data-fetching-in-react-981ced7e5c56/" target="_blank" rel="noopener">Fetch API</a> 没有 <code>onprogress</code> 处理器。取而代之的是，它通过响应对象的 body 属性提供了一个<code>ReadableStream</code>的实例。</p><p>下面的例子展示了通过使用 <code>ReadableStream</code> 来为用户在图像下载过程中提供即时反馈：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">// original code: https://github.com/AnthumChris/fetch-progress-indicators</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"progress"</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span>progress<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="meta">  "use strict"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"progress"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  fetch(<span class="string">"https://fetch-progress.anthum.com/30kbps/images/sunrise-baseline.jpg"</span>)</span></span><br><span class="line"><span class="javascript">    .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line">      if (!response.ok) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">throw</span> <span class="built_in">Error</span>(response.status + <span class="string">" "</span> + response.statusText);</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// ensure ReadableStream is supported</span></span></span><br><span class="line">      if (!response.body) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"ReadableStream not yet supported in this browser."</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// store the size of the entity-body, in bytes</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> contentLength = response.headers.get(<span class="string">"content-length"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// ensure contentLength is available</span></span></span><br><span class="line">      if (!contentLength) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"Content-Length response header unavailable"</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// parse the integer into a base-10 number</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> total = <span class="built_in">parseInt</span>(contentLength, <span class="number">10</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> loaded = <span class="number">0</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">new</span> Response(</span></span><br><span class="line"><span class="javascript">        <span class="comment">// create and return a readable stream</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ReadableStream(&#123;</span></span><br><span class="line">          start(controller) &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> reader = response.body.getReader();</span></span><br><span class="line"></span><br><span class="line">            read();</span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">              reader</span><br><span class="line">                .read()</span><br><span class="line"><span class="javascript">                .then(<span class="function">(<span class="params">&#123; done, value &#125;</span>) =&gt;</span> &#123;</span></span><br><span class="line">                  if (done) &#123;</span><br><span class="line">                    controller.close();</span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span>;</span></span><br><span class="line">                  &#125;</span><br><span class="line">                  loaded += value.byteLength;</span><br><span class="line">                  progress(&#123; loaded, total &#125;);</span><br><span class="line">                  controller.enqueue(value);</span><br><span class="line">                  read();</span><br><span class="line">                &#125;)</span><br><span class="line"><span class="javascript">                .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                  <span class="built_in">console</span>.error(error);</span></span><br><span class="line">                  controller.error(error);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      );</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    .then(<span class="function"><span class="params">response</span> =&gt;</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// construct a blob from the data</span></span></span><br><span class="line">      response.blob()</span><br><span class="line">    )</span><br><span class="line"><span class="javascript">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// insert the downloaded image into the page</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">"img"</span>).src = URL.createObjectURL(data);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.error(error);</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">progress</span>(<span class="params">&#123; loaded, total &#125;</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    element.innerHTML = <span class="built_in">Math</span>.round((loaded / total) * <span class="number">100</span>) + <span class="string">"%"</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 Axios 中实现一个进度指示器更加简单，尤其是当你使用了 <a href="https://github.com/rikmms/progress-bar-4-axios/" target="_blank" rel="noopener">Axios Progress Bar</a> 模块。首先，你需要包含以下样式和脚本：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">"https://cdn.rawgit.com/rikmms/progress-bar-4-axios/0a3acf92/dist/nprogress.css"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.rawgit.com/rikmms/progress-bar-4-axios/0a3acf92/dist/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后你可以像以下这样来实现进度条：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  loadProgressBar();</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> url =</span></span><br><span class="line"><span class="javascript">    <span class="string">"https://fetch-progress.anthum.com/30kbps/images/sunrise-baseline.jpg"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">downloadFile</span>(<span class="params">url</span>) </span>&#123;</span></span><br><span class="line">    axios</span><br><span class="line"><span class="javascript">      .get(url, &#123; <span class="attr">responseType</span>: <span class="string">"blob"</span> &#125;)</span></span><br><span class="line"><span class="javascript">      .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="built_in">window</span>.FileReader();</span></span><br><span class="line">        reader.readAsDataURL(response.data);</span><br><span class="line"><span class="javascript">        reader.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.getElementById(<span class="string">"img"</span>).setAttribute(<span class="string">"src"</span>, reader.result);</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">      .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(error);</span></span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  downloadFile(url);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这段代码使用了 <code>FileReader</code> 去异步读取下载的图像。 <code>readAsDataURL</code> 方法以 base64 格式来返回图像数据，然后嵌入到 <code>img</code> 标签的 <code>src</code> 属性以展示图像。</p><h1 id="并行请求"><a href="#并行请求" class="headerlink" title="并行请求"></a>并行请求</h1><p>为同时发送多个请求，Axios 提供了<code>axios.all()</code>方法。只要传递一个请求数组到这个方法，再使用 <code>axios.spread()</code> 来将响应数组的属性指定到不同的变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">axios</span><br><span class="line">  .all([</span><br><span class="line">    axios.get(<span class="string">"https://api.github.com/users/iliakan"</span>),</span><br><span class="line">    axios.get(<span class="string">"https://api.github.com/users/taylorotwell"</span>)</span><br><span class="line">  ])</span><br><span class="line">  .then(</span><br><span class="line">    axios.spread(<span class="function">(<span class="params">obj1, obj2</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Both requests are now complete</span></span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        obj1.data.login +</span><br><span class="line">          <span class="string">" has "</span> +</span><br><span class="line">          obj1.data.public_repos +</span><br><span class="line">          <span class="string">" public repos on GitHub"</span></span><br><span class="line">      );</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        obj2.data.login +</span><br><span class="line">          <span class="string">" has "</span> +</span><br><span class="line">          obj2.data.public_repos +</span><br><span class="line">          <span class="string">" public repos on GitHub"</span></span><br><span class="line">      );</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><p>你可以通过内置的 <code>Promise.all()</code> 方法来实现相同的结果。将 fetch 请求作为数组传递给 <code>Promise.all()</code>。然后，通过 <code>async</code> 函数处理响应，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">  fetch(<span class="string">"https://api.github.com/users/iliakan"</span>),</span><br><span class="line">  fetch(<span class="string">"https://api.github.com/users/taylorotwell"</span>)</span><br><span class="line">])</span><br><span class="line">  .then(<span class="keyword">async</span> ([res1, res2]) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="keyword">await</span> res1.json();</span><br><span class="line">    <span class="keyword">const</span> b = <span class="keyword">await</span> res2.json();</span><br><span class="line">    <span class="built_in">console</span>.log(a.login + <span class="string">" has "</span> + a.public_repos + <span class="string">" public repos on GitHub"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(b.login + <span class="string">" has "</span> + b.public_repos + <span class="string">" public repos on GitHub"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>Axios 在紧密的包装中为大多数的 HTTP 通信提供了易于使用的的 API。但是，如果你更喜欢坚持原生 API，那就没什么能够阻挡你实现 Axios 的特性的。</p><p>如文中讨论的，我们在使用浏览器提供的 <code>fetch()</code> 方法时完全有能力复现 Axios 的关键特性。最后，是否值得加载一个客户端 HTTP API 取决于你是否能舒服的使用内置 API 工作。</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;原文链接： &lt;a href=&quot;https://blog.logrocket.com/axios-or-fetch-api/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Axios or fetch(): Which should you use?&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;Axios 一直是我开发项目时发送 HTTP 请求的首选。最近看到一篇外文博客里，详细介绍了如何在使用 fetch 的时候实现 Axios 的一些关键特性，以使我们能够方便的过渡到 fetch 这一原生 API 上。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://freegale.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="http://freegale.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="翻译" scheme="http://freegale.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="JavaScript" scheme="http://freegale.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式基本语法</title>
    <link href="http://freegale.github.io/posts/regex-basic-usage.html"/>
    <id>http://freegale.github.io/posts/regex-basic-usage.html</id>
    <published>2019-02-20T02:32:33.000Z</published>
    <updated>2020-11-05T12:16:14.158Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>正则表达式基本语法备忘录。</p><a id="more"></a><h1 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h1><table><thead><tr><th style="text-align:left">语法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>.</code></td><td style="text-align:left">匹配除换行符  <code>\n</code>  之外的任何单字符。</td></tr><tr><td style="text-align:left"><code>[\s\S]</code></td><td style="text-align:left">匹配包括换行符 <code>\n</code> 在内的任何单字符。</td></tr><tr><td style="text-align:left"><code>\w</code></td><td style="text-align:left">匹配包括下划线的任何单词字符。等价于 <code>[A-Za-z0-9_]</code> 。</td></tr><tr><td style="text-align:left"><code>\W</code></td><td style="text-align:left">匹配任何非单词字符。等价于 <code>[^A-Za-z0-9_]</code> 。</td></tr><tr><td style="text-align:left"><code>\d</code></td><td style="text-align:left">匹配一个数字字符。等价于 <code>[0-9]</code> 。</td></tr><tr><td style="text-align:left"><code>\D</code></td><td style="text-align:left">匹配一个非数字字符。等价于 <code>[^0-9]</code> 。</td></tr><tr><td style="text-align:left"><code>\s</code></td><td style="text-align:left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 <code>[\f\n\r\t\v]</code> 。</td></tr><tr><td style="text-align:left"><code>\S</code></td><td style="text-align:left">匹配任何非空白字符。等价于 <code>[^\f\n\r\t\v]</code> 。</td></tr><tr><td style="text-align:left"><code>[xyz]</code></td><td style="text-align:left">字符集合。匹配所包含的任意一个字符。例如， <code>[abc]</code>  可以匹配 <code>plain</code> 中的 <code>a</code> 。</td></tr><tr><td style="text-align:left"><code>[^xyz]</code></td><td style="text-align:left">负值字符集合。匹配未包含的任意字符。例如， <code>[^abc]</code> 可以匹配 <code>plain</code> 中的 <code>p</code> 、 <code>l</code> 、 <code>i</code> 、 <code>n</code> 。</td></tr><tr><td style="text-align:left"><code>[a-z]</code></td><td style="text-align:left">字符范围。匹配指定范围内的任意字符。例如， <code>[a-z]</code> 可以匹配 <code>a</code> 到 <code>z</code> 范围内的任意小写字母字符。</td></tr><tr><td style="text-align:left"><code>[^a-z]</code></td><td style="text-align:left">负值字符范围。匹配任何不在指定范围内的任意字符。例如， <code>[^a-z]</code> 可以匹配任何不在 <code>a</code> 到 <code>z</code> 范围内的任意字符。</td></tr></tbody></table><h1 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h1><table><thead><tr><th style="text-align:left">语法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>\cx</code></td><td style="text-align:left">匹配由x指明的控制字符。<br>例如， <code>\cM</code> 匹配一个 <code>Control-M</code> 或 <code>回车符</code> 。 <code>x</code> 的值必须为 <code>A-Z</code> 或 <code>a-z</code> 之一。否则，将 <code>c</code> 视为一个原义的 <code>c</code> 字符。</td></tr><tr><td style="text-align:left"><code>\t</code></td><td style="text-align:left">匹配一个制表符。等价于 <code>\x09</code> 和 <code>\cI</code> 。</td></tr><tr><td style="text-align:left"><code>\n</code></td><td style="text-align:left">匹配一个换行符。等价于 <code>\x0a</code> 和 <code>\cJ</code> 。</td></tr><tr><td style="text-align:left"><code>\v</code></td><td style="text-align:left">匹配一个垂直制表符。等价于 <code>\x0b</code> 和 <code>\cK</code> 。</td></tr><tr><td style="text-align:left"><code>\f</code></td><td style="text-align:left">匹配一个换页符。等价于 <code>\x0c</code> 和 <code>\cL</code> 。</td></tr><tr><td style="text-align:left"><code>\r</code></td><td style="text-align:left">匹配一个回车符。等价于 <code>\x0d</code> 和 <code>\cM</code> 。</td></tr><tr><td style="text-align:left"><code>\0</code></td><td style="text-align:left">匹配一个空字符。等价于 <code>\x00</code> 。</td></tr><tr><td style="text-align:left"><code>\.</code></td><td style="text-align:left">匹配一个 <code>.</code> 字符。等价于 <code>\x2e</code> 。</td></tr><tr><td style="text-align:left"><code>\\</code></td><td style="text-align:left">匹配一个 <code>\</code> 字符。等价于 <code>\x5c</code> 。</td></tr><tr><td style="text-align:left"><code>\+</code></td><td style="text-align:left">匹配一个 <code>+</code> 字符。等价于 <code>\x2b</code> 。</td></tr><tr><td style="text-align:left"><code>\*</code></td><td style="text-align:left">匹配一个 <code>*</code> 字符。等价于 <code>\x2a</code> 。</td></tr><tr><td style="text-align:left"><code>\?</code></td><td style="text-align:left">匹配一个 <code>?</code> 字符。等价于 <code>\x3f</code> 。</td></tr><tr><td style="text-align:left"><code>\^</code></td><td style="text-align:left">匹配一个 <code>^</code> 字符。等价于 <code>\x5e</code> 。</td></tr><tr><td style="text-align:left"><code>\$</code></td><td style="text-align:left">匹配一个 <code>$</code> 字符。等价于 <code>\x24</code> 。</td></tr><tr><td style="text-align:left"><code>\[</code></td><td style="text-align:left">匹配一个 <code>[</code> 字符。等价于 <code>\x5b</code> 。</td></tr><tr><td style="text-align:left"><code>\]</code></td><td style="text-align:left">匹配一个 <code>]</code> 字符。等价于 <code>\x5d</code> 。</td></tr><tr><td style="text-align:left"><code>\{</code></td><td style="text-align:left">匹配一个 <code>{</code> 字符。等价于 <code>\x7b</code> 。</td></tr><tr><td style="text-align:left"><code>\}</code></td><td style="text-align:left">匹配一个 <code>}</code> 字符。等价于 <code>\x7d</code> 。</td></tr><tr><td style="text-align:left"><code>\(</code></td><td style="text-align:left">匹配一个 <code>(</code> 字符。等价于 <code>\x28</code> 。</td></tr><tr><td style="text-align:left"><code>\)</code></td><td style="text-align:left">匹配一个 <code>)</code> 字符。等价于 <code>\x29</code> 。</td></tr><tr><td style="text-align:left"> <code>\&#124;</code></td><td style="text-align:left">匹配一个 <code>&#124;</code> 字符。等价于 <code>\x7c</code> 。</td></tr><tr><td style="text-align:left"><code>\/</code></td><td style="text-align:left">匹配一个 <code>/</code> 字符。等价于 <code>\x2f</code> 。</td></tr><tr><td style="text-align:left"><code>\000</code></td><td style="text-align:left">标识一个八进制转义字符或一个向后引用。如果 <code>\n</code> 之前至少有n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字(0-7)，则n为一个八进制转义字符。</td></tr><tr><td style="text-align:left"><code>\xFF</code></td><td style="text-align:left">标识一个十六进制转义字符。<br>例如， <code>\x41</code> 匹配 <code>A</code> 。</td></tr><tr><td style="text-align:left"><code>\uFFFF</code></td><td style="text-align:left">标识一个Unicode转义字符。<br>例如， <code>\u00A9</code> 匹配版权符号 <code>©</code>  。</td></tr></tbody></table><h1 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h1><table><thead><tr><th style="text-align:left">语法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>*</code></td><td style="text-align:left">匹配前面的子表达式零次或多次。<br>例如， <code>zo*</code> 能匹配 <code>z</code> 以及 <code>zoo</code> 。 <code>*</code> 等价于 <code>{0,}</code> 。</td></tr><tr><td style="text-align:left"><code>+</code></td><td style="text-align:left">匹配前面的子表达式一次或多次。<br>例如， <code>zo+</code> 能匹配 <code>zo</code> 以及 <code>zoo</code> ，但不能匹配 <code>z</code> 。 <code>+</code> 等价于 <code>{1,}</code> 。</td></tr><tr><td style="text-align:left"><code>?</code></td><td style="text-align:left">匹配前面的子表达式零次或一次。<br>例如， <code>do(es)?</code> 可以匹配 <code>do</code> 或 <code>does</code> 中的 <code>do</code> 。 <code>?</code> 等价于 <code>{0,1}</code> 。</td></tr><tr><td style="text-align:left"><code>{n}</code></td><td style="text-align:left">n是一个非负整数。匹配确定的n次。<br>例如， <code>o{2}</code> 不能匹配 <code>Bob</code> 中的 <code>o</code> ，但是能匹配 <code>food</code> 中的两个 <code>o</code> 。</td></tr><tr><td style="text-align:left"><code>{n,}</code></td><td style="text-align:left">n是一个非负整数。至少匹配n次。<br>例如， <code>o{2,}</code> 不能匹配 <code>Bob</code> 中的 <code>o</code> ，但能匹配 <code>foooood</code> 中的所有 <code>o</code> 。</td></tr><tr><td style="text-align:left"><code>{n,m}</code></td><td style="text-align:left">m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。<br>例如， <code>o{1,3}</code> 将匹配 <code>fooooood</code> 中的前三个 <code>o</code> 。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table><h1 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h1><table><thead><tr><th style="text-align:left">语法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>^</code></td><td style="text-align:left">匹配输入字符串开始的位置。如果设置了RegExp对象的Multiline属性， <code>^</code> 还会与 <code>\n</code> 或 <code>\r</code> 之后的位置匹配。</td></tr><tr><td style="text-align:left"><code>$</code></td><td style="text-align:left">匹配输入字符串结尾的位置。如果设置了RegExp对象的Multiline属性， <code>$</code> 还会与 <code>\n</code> 或 <code>\r</code> 之前的位置匹配。</td></tr><tr><td style="text-align:left"><code>\b</code></td><td style="text-align:left">匹配一个字边界，即字与空格间的位置。</td></tr><tr><td style="text-align:left"><code>\B</code></td><td style="text-align:left">非字边界匹配。</td></tr></tbody></table><h1 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h1><table><thead><tr><th style="text-align:left">语法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>x&#124;y</code></td><td style="text-align:left">匹配x或y。例如， <code>z&#124;food</code> 能匹配 <code>z</code> 或 <code>food</code> 。 <code>(z&#124;f)ood</code> 则匹配 <code>zood</code> 或 <code>food</code> 。</td></tr><tr><td style="text-align:left"><code>(pattern)</code></td><td style="text-align:left">匹配pattern并获取这一匹配。</td></tr><tr><td style="text-align:left"><code>(?:pattern)</code></td><td style="text-align:left">匹配pattern但不获取匹配结果，不进行存储供以后使用。</td></tr><tr><td style="text-align:left"><code>(?=pattern)</code></td><td style="text-align:left">正向预查，匹配一个在主表达式后的样式但并不将其包含在结果内，这是一个非获取匹配。例如， <code>Windows(?=95&#124;98&#124;NT&#124;2000)</code> 能匹配 <code>Windows2000</code> 中的 <code>Windows</code> ，但不能匹配 <code>Windows3.1</code> 中的 <code>Windows</code> 。预查不消耗字符，即在一个匹配发生后，立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td style="text-align:left"><code>(?!pattern)</code></td><td style="text-align:left">负向预查，指定一个不允许在主表达式之后匹配的样式，这是一个非获取匹配。例如， <code>Windows(?!95&#124;98&#124;NT&#124;2000)</code> 能匹配 <code>Windows3.1</code> 中的 <code>Windows</code> ，但不能匹配 <code>Windows2000</code> 中的 <code>Windows</code> 。预查不消耗字符，即在一个匹配发生后，立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td style="text-align:left"><code>(?&lt;=pattern)</code></td><td style="text-align:left">*在javascript中不支持。正向回顾，匹配一个在主表达式前的样式但并不将其包含在结果内，这是一个非获取匹配。</td></tr><tr><td style="text-align:left"><code>(?&lt;!pattern)</code></td><td style="text-align:left">*在javascript中不支持。负向回顾，指定一个不允许在主表达式之前匹配的样式，这是一个非获取匹配。</td></tr><tr><td style="text-align:left"><code>\1</code></td><td style="text-align:left">反向引用，引用一个之前获取的匹配。例如， <code>(.)\1</code> 匹配两个连续的相同字符。</td></tr></tbody></table><h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><table><thead><tr><th style="text-align:left">语法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>i</code></td><td style="text-align:left">执行忽略大小写的匹配。</td></tr><tr><td style="text-align:left"><code>g</code></td><td style="text-align:left">执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td></tr><tr><td style="text-align:left"><code>m</code></td><td style="text-align:left">执行多行匹配。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正则表达式基本语法备忘录。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://freegale.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>【转】CSS Grid 布局完全指南</title>
    <link href="http://freegale.github.io/posts/complete-guide-grid.html"/>
    <id>http://freegale.github.io/posts/complete-guide-grid.html</id>
    <published>2019-02-18T18:31:55.000Z</published>
    <updated>2020-11-05T12:16:14.150Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info"><p>中文原文：<a href="https://www.html.cn/archives/8510#prop-grid-column-row-start-end" target="_blank" rel="noopener">CSS3 Flexbox 布局完全指南(图解 Flexbox 布局详细教程)</a><br>英文原文：<a href="https://css-tricks.com/snippets/css/complete-guide-grid/" target="_blank" rel="noopener">A Complete Guide to Grid</a></p></div><p>CSS Grid 布局是 CSS 中最强大的布局系统。与 flexbox 的一维布局系统不同，CSS Grid 布局是一个二维布局系统，也就意味着它可以同时处理列和行。通过将 CSS 规则应用于 父元素（成为 Grid Container 网格容器）和其子元素（成为 Grid Items 网格项），你就可以轻松使用 Grid 布局。</p><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>CSS Grid 布局（又称为 “Grid”），是一个二维的基于网格的布局系统，它的目标是完全改变我们基于网格的用户界面的布局方式。CSS 一直用来布局我们的网页，但一直以来都存在这样或那样的问题。一开始我们用表格（table），然后是浮动（float），再是定位（postion）和内嵌块（inline-block），但是所有这些方法本质上都是只是 hack 而已，并且遗漏了很多重要的功能（例如垂直居中）。Flexbox 的出现很大程度上改善了我们的布局方式，但它的目的是为了解决更简单的一维布局，而不是复杂的二维布局（实际上 Flexbox 和 Grid 能协同工作，而且配合得非常好）。Grid 布局是第一个专门为解决布局问题而创建的 CSS 模块，只要我们一直在制作网站，我们就一直要讨论这些问题。</p><p>有两个主要因素激发了我创建本指南的灵感。第一个是 Rachel Andrew 出色的书籍 <a href="http://abookapart.com/products/get-ready-for-css-grid-layout" target="_blank" rel="noopener">为 CSS Grid 布局做好准备</a>。这本书对 Grid 布局做了全面，清晰的介绍 ，也是本指南的基础。我强烈建议你购买并阅读。另一个灵感来自 Chris Coyier 的 <a href="https://www.html.cn/archives/8629" target="_blank" rel="noopener">Flexbox 布局完整指南</a>，这也是我学习 flexbox 首选的资源。这篇文章是帮助了很多人，这点从 Google “flexbox” 排名第一就可以看出来。你会发现那篇文章和我的文章有很多相似之处，为什么不跟随最好的文章呢？</p><p>本指南的目的是介绍存在于最新版本的规范中 Grid 概念。所以我不会覆盖过时的 IE 语法，而且随着规范的逐渐成熟，我会尽我最大的努力去更新这个指南。</p><h1 id="基础知识和浏览器支持"><a href="#基础知识和浏览器支持" class="headerlink" title="基础知识和浏览器支持"></a>基础知识和浏览器支持</h1><p>首先，你必须使用 <code>display: grid</code> 将容器元素定义为一个网格，使用 <code>grid-template-columns</code> 和 <code>grid-template-rows</code> 设置列和行的尺寸大小，然后通过 <code>grid-column</code> 和 <code>grid-row</code> 将其子元素放入这个网格中。与 flexbox 类似，网格项（grid items）的源（HTML结构）顺序无关紧要。你的 CSS 可以以任何顺序放置它们，这使得使用媒体查询（media queries）重新排列网格变得非常容易。定义整个页面的布局，然后完全重新排列布局以适应不同的屏幕宽度，这些都只需要几行 CSS ，想象一下就让人兴奋。Grid 布局是有史以来最强大的 CSS 模块之一。</p><p>截至2017年3月，许多浏览器都提供了对 CSS Grid 的原生支持，而且无需加浏览器前缀：Chrome（包括 Android ），Firefox，Edge，Safari（包括iOS）和 Opera 。另一方面，Internet Explorer 10和11支持它，但是是一个过时的语法实现。 现在是时候使用 Grid 布局网页了！</p><div class="note "><p>这个浏览器支持 CSS Grid 的数据，来自 <a href="http://caniuse.com/#feat=css-grid" target="_blank" rel="noopener">Caniuse</a> ，你可以查看更多的细节。数字表示支持以上功能的浏览器版本号。</p><p><strong>Desktop</strong></p><table><thead><tr><th style="text-align:center">Chrome</th><th style="text-align:center">Opera</th><th style="text-align:center">Firefox</th><th style="text-align:center">IE</th><th style="text-align:center">Edge</th><th style="text-align:center">Safari</th></tr></thead><tbody><tr><td style="text-align:center">57</td><td style="text-align:center">44</td><td style="text-align:center">52</td><td style="text-align:center">11*</td><td style="text-align:center">16</td><td style="text-align:center">10.1</td></tr></tbody></table><p><strong>Mobile/Teblet</strong></p><table><thead><tr><th style="text-align:center">Chrome</th><th style="text-align:center">Opera</th><th style="text-align:center">Firefox</th><th style="text-align:center">IE</th><th style="text-align:center">Edge</th><th style="text-align:center">Safari</th></tr></thead><tbody><tr><td style="text-align:center">10.3</td><td style="text-align:center">46</td><td style="text-align:center">No</td><td style="text-align:center">67</td><td style="text-align:center">71</td><td style="text-align:center">64</td></tr></tbody></table></div><h1 id="重要术语"><a href="#重要术语" class="headerlink" title="重要术语"></a>重要术语</h1><p>在深入了解 Grid 的概念之前，理解术语是很重要的。由于这里涉及的术语在概念上都很相似，如果不先记住 Grid 规范定义的含义，很容易混淆它们。但是别担心，术语并不多。</p><h2 id="网格容器（Grid-Container）"><a href="#网格容器（Grid-Container）" class="headerlink" title="网格容器（Grid Container）"></a>网格容器（Grid Container）</h2><p>应用 <code>display: grid</code> 的元素。这是所有网格项（grid item）的直接父级元素。在这个例子中，<code>container</code> 就是网格容器（Grid Container）。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="container"&gt;</span><br><span class="line">  &lt;div class="item item-1"&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class="item item-2"&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class="item item-3"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="网格项（Grid-Item）"><a href="#网格项（Grid-Item）" class="headerlink" title="网格项（Grid Item）"></a>网格项（Grid Item）</h2><p>网格容器（Grid Container）的子元素（例如直接子元素）。这里 <code>item</code> 元素就是网格项（Grid Item），但是 <code>sub-item</code> 不是。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="container"&gt;</span><br><span class="line">  &lt;div class="item"&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class="item"&gt;</span><br><span class="line">    &lt;p class="sub-item"&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class="item"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="网格线（Grid-Line）"><a href="#网格线（Grid-Line）" class="headerlink" title="网格线（Grid Line）"></a>网格线（Grid Line）</h2><p>构成网格结构的分界线。它们既可以是垂直的（“列网格线”），也可以是水平的（“行网格线”），并位于行或列的任一侧。例如，这里的黄线就是一条列网格线。</p><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/terms-grid-line.svg" alt="terms-grid-line" width="50%"></p><h2 id="网格轨道（Grid-Track）"><a href="#网格轨道（Grid-Track）" class="headerlink" title="网格轨道（Grid Track）"></a>网格轨道（Grid Track）</h2><p>两条相邻网格线之间的空间。你可以把它们想象成网格的列或行。下图是第二条和第三条行网格线之间的网格轨道（Grid Track）。</p><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/terms-grid-track.svg" alt="terms-grid-track" width="50%"></p><h2 id="网格单元格（Grid-Cell）"><a href="#网格单元格（Grid-Cell）" class="headerlink" title="网格单元格（Grid Cell）"></a>网格单元格（Grid Cell）</h2><p>两个相邻的行和两个相邻的列网格线之间的空间。这是 Grid 系统的一个“单元”。下图是第 1 至第 2 条 行网格线和第 2 至第 3 条列网格线交汇构成的网格单元格（Grid Cell）。</p><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/terms-grid-cell.svg" alt="terms-grid-cell" width="50%"></p><h2 id="网格区域（Grid-Area）"><a href="#网格区域（Grid-Area）" class="headerlink" title="网格区域（Grid Area）"></a>网格区域（Grid Area）</h2><p>4条网格线包围的总空间。一个网格区域（Grid Area） 可以由任意数量的网格单元格（Grid Cell）组成。下图是行网格线1和3，以及列网格线1和3之间的网格区域。</p><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/terms-grid-area.svg" alt="terms-grid-area" width="50%"></p><h1 id="Grid-属性目录"><a href="#Grid-属性目录" class="headerlink" title="Grid 属性目录"></a>Grid 属性目录</h1><h2 id="网格容器（Grid-Container）属性"><a href="#网格容器（Grid-Container）属性" class="headerlink" title="网格容器（Grid Container）属性"></a>网格容器（Grid Container）属性</h2><ul><li><a href="#display">display</a></li><li><a href="#grid-template-columns">grid-template-columns</a></li><li><a href="#grid-template-rows">grid-template-rows</a></li><li><a href="#grid-template-areas">grid-template-areas</a></li><li><a href="#grid-template">grid-template</a></li><li><a href="#grid-column-gap">grid-column-gap</a></li><li><a href="#grid-row-gap">grid-row-gap</a></li><li><a href="#grid-gap">grid-gap</a></li><li><a href="#justify-items">justify-items</a></li><li><a href="#align-items">align-items</a></li><li><a href="#place-items">place-items</a></li><li><a href="#justify-content">justify-content</a></li><li><a href="#align-content">align-content</a></li><li><a href="#place-content">place-content</a></li><li><a href="#grid-auto-columns">grid-auto-columns</a></li><li><a href="#grid-auto-rows">grid-auto-rows</a></li><li><a href="#grid-auto-flow">grid-auto-flow</a></li><li><a href="#grid">grid</a></li></ul><h2 id="网格项（Grid-Items）属性"><a href="#网格项（Grid-Items）属性" class="headerlink" title="网格项（Grid Items）属性"></a>网格项（Grid Items）属性</h2><ul><li><a href="#grid-column-start">grid-column-start</a></li><li><a href="#grid-column-end">grid-column-end</a></li><li><a href="#grid-row-start">grid-row-start</a></li><li><a href="#grid-row-end">grid-row-end</a></li><li><a href="#grid-column">grid-column</a></li><li><a href="#grid-row">grid-row</a></li><li><a href="#grid-area">grid-area</a></li><li><a href="#justify-self">justify-self</a></li><li><a href="#align-self">align-self</a></li><li><a href="#place-self">place-self</a></li></ul><h1 id="父元素-网格容器-Grid-Container-属性"><a href="#父元素-网格容器-Grid-Container-属性" class="headerlink" title="父元素 网格容器(Grid Container) 属性"></a>父元素 网格容器(Grid Container) 属性</h1><h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><p>将元素定义为网格容器，并为其内容建立新的 <em>网格格式上下文</em>。</p><p>值：</p><ul><li><code>grid</code>: 生成一个块级网格</li><li><code>inline-grid</code>: 生成一个内联网格</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid | inline-grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：通过嵌套元素（也称为子网格，即 subgrid ）向下传递网格参数的能力已移至 <a href="https://www.w3.org/TR/css-grid-2/#subgrids" target="_blank" rel="noopener">CSS Grid 规范的 Level 2 版本</a>。这里有 <a href="https://css-tricks.com/grid-level-2-and-subgrid/" target="_blank" rel="noopener">一个快速解释</a>。</p><h2 id="grid-template-columns"><a href="#grid-template-columns" class="headerlink" title="grid-template-columns"></a>grid-template-columns</h2><h2 id="grid-template-rows"><a href="#grid-template-rows" class="headerlink" title="grid-template-rows"></a>grid-template-rows</h2><p>使用空格分隔的值列表，用来定义网格的列和行。这些值表示网格轨道（Grid Track）大小，它们之间的空格表示网格线。</p><p>值：</p><ul><li><code>&lt;track-size&gt;</code>: 可以是长度值，百分比，或者等份网格容器中可用空间（使用 <code>fr</code> 单位）</li><li><code>&lt;line-name&gt;</code>: 你可以选择的任意名称</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: &lt;track-size&gt; ... | &lt;line-name&gt; &lt;track-size&gt; ...;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: &lt;track-size&gt; ... | &lt;line-name&gt; &lt;track-size&gt; ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><p>当你在 网格轨道（Grid Track） 值之间留出空格时，网格线会自动分配正数和负数名称：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">40px</span> <span class="number">50px</span> auto <span class="number">50px</span> <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">25%</span> <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/template-columns-rows-01.svg" alt="template-columns-rows-01" width="80%"></p><p>但是你可以明确的指定网格线（Grid Line）名称，例如 <code>&lt;line-name&gt;</code> 值。请注意网格线名称的括号语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: [first] <span class="number">40px</span> [line2] <span class="number">50px</span> [line3] auto [col4-start] <span class="number">50px</span> [five] <span class="number">40px</span> [end];</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: [row1-start] <span class="number">25%</span> [row1-end] <span class="number">100px</span> [third-line] auto [last-line];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/template-column-rows-02.svg" alt="template-columns-rows-02" width="80%"></p><p>请注意，一条网格线（Grid Line）可以有多个名称。例如，这里的第二条行网格线（row grid lines）将有两个名字：<code>row1-end</code> 和 <code>row2-start</code> ：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: [row1-start] <span class="number">25%</span> [row1-end row2-start] <span class="number">25%</span> [row2-end];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你的定义包含多个重复值，则可以使用 <code>repeat()</code> 表示法来简化定义：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">20px</span> [col-start]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码等价于：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20px</span> [col-start] <span class="number">20px</span> [col-start] <span class="number">20px</span> [col-start];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果多行共享相同的名称，则可以通过其网格线名称和计数来引用它们。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: col-start <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>fr</code> 单元允许你用等分网格容器剩余可用空间来设置网格轨道（Grid Track）的大小 。例如，下面的代码会将每个网格项设置为网格容器宽度的三分之一：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剩余可用空间是除去所有非灵活网格项之后计算得到的。在这个例子中，可用空间总量减去 50px 后，再给 <code>fr</code> 单元的值 3 等分：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">50px</span> <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas"></a>grid-template-areas</h2><p>通过引用 <code>grid-area</code> 属性指定的网格区域（Grid Area）名称来定义网格模板。重复网格区域的名称导致内容跨越这些单元格。一个点号（.）代表一个空单元格。这个语法本身可视作网格的可视化结构。</p><p>值：</p><ul><li><code>&lt;grid-area-name&gt;</code>: 由网格项的 <code>grid-area</code> 指定的网格区域名称</li><li><code>.</code>（点号）：代表一个空的网格单元</li><li><code>none</code>: 不定义网格区域</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">"&lt;grid-area-name&gt; | . | none | ..."</span></span><br><span class="line">    <span class="string">"..."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: header;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-b</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: main;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-c</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: sidebar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-d</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: footer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">50px</span> <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: auto;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">"header header header header"</span></span><br><span class="line">    <span class="string">"main main . sidebar"</span></span><br><span class="line">    <span class="string">"footer footer footer footer"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码将创建一个 4 列宽 3 行高的网格。整个顶行将由 <strong>header</strong> 区域组成。中间一排将由两个 <strong>main</strong> 区域，一个是空单元格，一个 <strong>sidebar</strong> 区域组成。最后一行全是 <strong>footer</strong> 区域组成。</p><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/dddgrid-template-areas.svg" alt="dddgrid-template-areas" width="60%"></p><p>你的声明中的每一行都需要有相同数量的单元格。</p><p>你可以使用任意数量的相邻的 点. 来声明单个空单元格。 只要这些点.之间没有空隙隔开，他们就代表一个单独的单元格。</p><p>注意你不能用这个语法来命名网格线，只是命名网格区域 。当你使用这种语法时，区域两端的网格线实际上会自动命名。如果你的网格区域的名字是 <strong>foo</strong>，该区域的起始行网格线 和 起始列网格线 的名称将为 <strong>foo-start</strong>，而最后一条行网格线 和 最后一条列网格线 的名称将为 <strong>foo-end</strong>。这意味着某些网格线可能有多个名字，如上例中最左边的网格线，它将有三个名称：header-start，main-start 和 footer-start 。</p><h2 id="grid-template"><a href="#grid-template" class="headerlink" title="grid-template"></a>grid-template</h2><p>用于定义 <code>grid-template-rows</code>，<code>grid-template-columns</code>，<code>grid-template-areas</code> 简写属性。</p><p>值：</p><ul><li><code>none</code>: 将所有三个属性设置为其初始值</li><li><code>&lt;grid-template-rows&gt; / &lt;grid-template-columns&gt;</code>: 将 <code>grid-template-columns</code> 和 <code>grid-template-rows</code> 设置为相应地特定的值，并且设置 <code>grid-template-areas</code> 为 <code>none</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template</span>: none | &lt;grid-template-rows&gt; / &lt;grid-template-columns&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个属性也接受一个更复杂但非常方便的语法来指定三个上述属性。这里有一个例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template</span>:</span><br><span class="line">    [row1-start] <span class="string">"header header header"</span> <span class="number">25px</span> [row1-end]</span><br><span class="line">    [row2-start] <span class="string">"footer footer footer"</span> <span class="number">25px</span> [row2-end]</span><br><span class="line">    / auto <span class="number">50px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: [row1-start] <span class="number">25px</span> [row1-end row2-start] <span class="number">25px</span> [row2-end];</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: auto <span class="number">50px</span> auto;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">"header header header"</span></span><br><span class="line">    <span class="string">"footer footer footer"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 <code>grid-template</code> 不会重置隐式网格属性（<code>grid-auto-columns</code>， <code>grid-auto-rows</code>， 和 <code>grid-auto-flow</code>），这可能是你想在大多数情况下做的，建议使用 <code>grid</code> 属性而不是 <code>grid-template</code>。</p><h2 id="grid-column-gap"><a href="#grid-column-gap" class="headerlink" title="grid-column-gap"></a>grid-column-gap</h2><h2 id="grid-row-gap"><a href="#grid-row-gap" class="headerlink" title="grid-row-gap"></a>grid-row-gap</h2><p>指定网格线（grid lines）的大小。你可以把它想象为设置列/行之间间距的宽度。</p><p>值：</p><ul><li><code>&lt;line-size&gt;</code>: 长度值</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-gap</span>: &lt;line-size&gt;;</span><br><span class="line">  <span class="attribute">grid-row-gap</span>: &lt;line-size&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">50px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">80px</span> auto <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">grid-column-gap</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">grid-row-gap</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/dddgrid-gap.svg" alt="dddgrid-gap" width="50%"></p><p>只能在列/行之间创建间距，网格外部边缘不会有这个间距。</p><p>注意：这两个属性将删除 <code>grid-</code> 前缀，就是将 <code>grid-column-gap</code> 和 <code>grid-row-gap</code> 重命名为 <code>column-gap</code> 和 <code>row-gap</code>。 Chrome 68+，Safari 11.2 Release 50+ 和Opera 54+ 已经支持无前缀的属性。</p><h2 id="grid-gap"><a href="#grid-gap" class="headerlink" title="grid-gap"></a>grid-gap</h2><p><code>grid-column-gap</code> 和 <code>grid-row-gap</code> 的简写语法</p><p>值：</p><ul><li><code>&lt;grid-row-gap&gt; &lt;grid-column-gap&gt;</code>: 长度值</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-gap</span>: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">50px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">80px</span> auto <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">15px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <code>grid-row-gap</code> 没有定义，那么就会被设置为等同于 <code>grid-column-gap</code> 的值。例如下面的代码是等价的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="comment">/* 设置 grid-column-gap 和 grid-row-gap */</span>  </span><br><span class="line">  <span class="attribute">grid-column-gap</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">grid-row-gap</span>: <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 等价于 */</span>  </span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 等价于 */</span>  </span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：这个属性将删除 <code>grid-</code> 前缀，就是将 <code>grid-gap</code> 重命名为 <code>gap</code>。 Chrome 68+，Safari 11.2 Release 50+ 和Opera 54+ 已经支持无前缀的属性。</p><h2 id="justify-items"><a href="#justify-items" class="headerlink" title="justify-items"></a>justify-items</h2><p>沿着 inline（行）轴线对齐网格项（grid items）（相反的属性是 <code>align-items</code> 沿着 block（列）轴线对齐）。此值适用于容器内的所有网格项。</p><p>值：</p><ul><li><code>start</code>: 将网格项对齐到其单元格的左侧起始边缘（左侧对齐）</li><li><code>end</code>: 将网格项对齐到其单元格的右侧结束边缘（右侧对齐）</li><li><code>center</code>: 将网格项对齐到其单元格的水平中间位置（水平居中对齐）</li><li><code>stretch</code>: 填满单元格的宽度（默认值）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-items</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-items</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/justify-items-start.svg" alt="justify-items-start" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">justify-items</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/justify-items-end.svg" alt="justify-items-end" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">justify-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/justify-items-center.svg" alt="justify-items-center" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">justify-items</span>: stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/justify-items-stretch.svg" alt="justify-items-stretch" width="60%"></p><p>这些行为也可以通过每个单独网格项（grid items）的 <code>justify-self</code> 属性设置。</p><h2 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h2><p>沿着 block（列）轴线对齐网格项（grid items）（相反的属性是 <code>justify-items</code> 沿着 inline（行）轴线对齐）。此值适用于容器内的所有网格项。</p><p>值：</p><ul><li><code>start</code>: 将网格项对齐到其单元格的顶部起始边缘（顶部对齐）</li><li><code>end</code>: 将网格项对齐到其单元格的底部结束边缘（底部对齐）</li><li><code>center</code>: 将网格项对齐到其单元格的垂直中间位置（垂直居中对齐）</li><li><code>stretch</code>: 填满单元格的高度（默认值）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/align-items-start.svg" alt="align-items-start" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/align-items-end.svg" alt="align-items-end" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/align-items-center.svg" alt="align-items-center" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/align-items-stretch.svg" alt="align-items-stretch" width="60%"></p><p>这些行为也可以通过每个单独网格项（grid items) 的 <code>align-self</code> 属性设置。</p><h2 id="place-items"><a href="#place-items" class="headerlink" title="place-items"></a>place-items</h2><p><code>place-items</code> 是设置 <code>align-items</code> 和 <code>justify-items</code> 的简写形式。</p><p>值：</p><ul><li><code>&lt;align-items&gt; &lt;justify-items&gt;</code>：第一个值设置 <code>align-items</code> 属性，第二个值设置 <code>justify-items</code> 属性。如果省略第二个值，则将第一个值同时分配给这两个属性。</li></ul><p>除 Edge 之外的所有主要浏览器都支持 <code>place-items</code> 简写属性。</p><p>有关更多详细信息，请参阅 <code>align-items</code> 和 <code>justify-items</code>。</p><h2 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h2><p>有时，你的网格合计大小可能小于其网格容器（grid container）大小。 如果你的所有网格项（grid items）都使用像 <code>px</code> 这样的非灵活单位设置大小，就可能出现这种情况。在这种情况下，您可以设置网格容器内的网格的对齐方式。 此属性沿着inline（行）轴线对齐网格（相反的属性是 <code>align-content</code> ，沿着 block（列）轴线对齐网格）。</p><p>值：</p><ul><li><code>start</code>: 将网格对齐到 网格容器(grid container) 的左侧起始边缘（左侧对齐）</li><li><code>end</code>: 将网格对齐到 网格容器 的右侧结束边缘（右侧对齐）</li><li><code>center</code>: 将网格对齐到 网格容器 的水平中间位置（水平居中对齐）</li><li><code>stretch</code>: 调整 网格项(grid items) 的宽度，允许该网格填充满整个 网格容器 的宽度</li><li><code>space-around</code>: 在每个网格项之间放置一个均匀的空间，左右两端放置一半的空间</li><li><code>space-between</code>: 在每个网格项之间放置一个均匀的空间，左右两端没有空间</li><li><code>space-evenly</code>: 在每个网格项目之间放置一个均匀的空间，左右两端放置一个均匀的空间</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/justify-content-start.svg" alt="justify-content-start" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/justify-content-end.svg" alt="justify-content-end" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/justify-content-center.svg" alt="justify-content-center" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/justify-content-stretch.svg" alt="justify-content-stretch" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/justify-content-space-around.svg" alt="justify-content-space-around" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/justify-content-space-between.svg" alt="justify-content-space-between" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/justify-content-space-evenly.svg" alt="justify-content-space-evenly" width="60%"></p><h2 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h2><p>有时，你的网格合计大小可能小于其网格容器（grid container）大小。 如果你的所有网格项（grid items）都使用像 <code>px</code> 这样的非灵活单位设置大小，就可能出现这种情况。在这种情况下，您可以设置网格容器内的网格的对齐方式。此属性沿着 block（列）轴线对齐网格（相反的属性是 <code>justify-content</code> ，沿着 inline（行）轴线对齐网格）。</p><p>值：</p><ul><li><code>start</code>: 将网格对齐到 网格容器(grid container) 的顶部起始边缘（顶部对齐）</li><li><code>end</code>: 将网格对齐到 网格容器 的底部结束边缘（底部对齐）</li><li><code>center</code>: 将网格对齐到 网格容器 的垂直中间位置（垂直居中对齐）</li><li><code>stretch</code>: 调整 网格项(grid items) 的高度，允许该网格填充满整个 网格容器 的高度</li><li><code>space-around</code>: 在每个网格项之间放置一个均匀的空间，上下两端放置一半的空间</li><li><code>space-between</code>: 在每个网格项之间放置一个均匀的空间，上下两端没有空间</li><li><code>space-evenly</code>: 在每个网格项目之间放置一个均匀的空间，上下两端放置一个均匀的空间</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/align-content-start.svg" alt="align-content-start" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: end;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/align-content-end.svg" alt="align-content-end" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: center;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/align-content-center.svg" alt="align-content-center" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: stretch;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/align-content-stretch.svg" alt="align-content-stretch" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: space-around;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/align-content-space-around.svg" alt="align-content-space-around" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/align-content-space-between.svg" alt="align-content-space-between" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: space-evenly;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/align-content-space-evenly.svg" alt="align-content-space-evenly" width="60%"></p><h2 id="place-content"><a href="#place-content" class="headerlink" title="place-content"></a>place-content</h2><p><code>place-content</code> 是设置 <code>align-content</code> 和 <code>justify-content</code> 的简写形式。</p><p>值：</p><ul><li><code>&lt;align-content&gt; &lt;justify-content&gt;</code>: 第一个值设置 <code>align-content</code> 属性，第二个值设置 <code>justify-content</code> 属性。如果省略第二个值，则将第一个值同时分配给这两个属性。</li></ul><p>除 Edge 之外的所有主要浏览器都支持 <code>place-content</code> 简写属性。</p><p>有关更多详细信息，请参阅 <code>align-content</code> 和 <code>justify-content</code>。</p><h2 id="grid-auto-columns"><a href="#grid-auto-columns" class="headerlink" title="grid-auto-columns"></a>grid-auto-columns</h2><h2 id="grid-auto-rows"><a href="#grid-auto-rows" class="headerlink" title="grid-auto-rows"></a>grid-auto-rows</h2><p>指定任何自动生成的网格轨道（grid tracks）（又名隐式网格轨道）的大小。当网格中的网格项多于单元格时，或者当网格项位于显式网格之外时，就会创建隐式轨道。（参见<a href="https://www.html.cn/archives/10327" target="_blank" rel="noopener">显式网格和隐式网格之间的区别</a>）</p><p>值：</p><ul><li><code>&lt;track-size&gt;</code>: 可以是长度值，百分比，或者等份网格容器中可用空间的分数（使用 <code>fr</code> 单位）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-auto-columns</span>: &lt;track-size&gt; ...;</span><br><span class="line">  <span class="attribute">grid-auto-rows</span>: &lt;track-size&gt; ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了说明如何创建隐式网格轨道，请考虑一下以下的代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">60px</span> <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">90px</span> <span class="number">90px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/grid-auto-columns-rows-01.svg" alt="grid-auto-columns-rows-01" style="height: 500px"></p><p>这将生成了一个 2×2 的网格。</p><p>但现在想象一下，你使用 <code>grid-column</code> 和 <code>grid-row</code> 来定位你的网格项，像这样：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-b</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">5</span> / <span class="number">6</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/grid-auto-columns-rows-02.svg" alt="grid-auto-columns-rows-02" style="height: 500px"></p><p>我们告诉 <code>.item-b</code> 从第 5 条列网格线开始到第 6 条列网格线结束，但我们从来没有定义过第 5 或 第 6 列网格线。因为我们引用的网格线不存在，所以创建宽度为 0 的隐式网格轨道以填补空缺。我们可以使用 <code>grid-auto-columns</code> 和 <code>grid-auto-rows</code> 来指定这些隐式轨道的大小：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-auto-columns</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/grid-auto-columns-rows-03.svg" alt="grid-auto-columns-rows-03" style="height: 500px"></p><h2 id="grid-auto-flow"><a href="#grid-auto-flow" class="headerlink" title="grid-auto-flow"></a>grid-auto-flow</h2><p>如果你有一些没有明确放置在网格上的网格项（grid items），自动放置算法会自动放置这些网格项。该属性控制自动布局算法如何工作。</p><p>值：</p><ul><li><code>row</code>: 告诉自动布局算法依次填充每行，根据需要添加新行 （默认）</li><li><code>column</code>: 告诉自动布局算法依次填入每列，根据需要添加新列</li><li><code>dense</code>: 告诉自动布局算法在稍后出现较小的网格项时，尝试填充网格中较早的空缺</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: row | column | row dense | column dense</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，<code>dense</code> 只会更改网格项的可视顺序，并可能导致它们出现乱序，这对可访问性不利。</p><p>示例：</p><p>考虑以下 HTML :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-a"</span>&gt;</span>item-a<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-b"</span>&gt;</span>item-b<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-c"</span>&gt;</span>item-c<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-d"</span>&gt;</span>item-d<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-e"</span>&gt;</span>item-e<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你定义一个有 5 列和 2 行的网格，并将 <code>grid-auto-flow</code> 设置为 <code>row</code>（也就是默认值）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">60px</span> <span class="number">60px</span> <span class="number">60px</span> <span class="number">60px</span> <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: row;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将网格项放在网格上时，只能为其中的两个指定位置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-e</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">5</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我们把 <code>grid-auto-flow</code> 设成了 <code>row</code> ，所以我们的网格看起来会是这样。注意我们没有进行定位的网格项（<code>item-b</code>，<code>item-c</code>，<code>item-d</code>）会这样排列在可用的行中：</p><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/grid-auto-flow-01.svg" alt="grid-auto-flow-01" width="80%"></p><p>相反地，如果我们把 <code>grid-auto-flow</code> 设成了 <code>column</code> ，那么 <code>item-b</code>，<code>item-c</code>，<code>item-d</code> 会沿着列向下排列：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">60px</span> <span class="number">60px</span> <span class="number">60px</span> <span class="number">60px</span> <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: column;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/grid-auto-flow-02.svg" alt="grid-auto-flow-02" width="80%"></p><h2 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h2><p>在一个声明中设置所有以下属性的简写： <code>grid-template-rows</code>, <code>grid-template-columns</code>, <code>grid-template-areas</code>, <code>grid-auto-rows</code>, <code>grid-auto-columns</code>, 和 <code>grid-auto-flow</code> 。（注意：您只能在单个网格声明中指定显式或隐式网格属性）。</p><p>值：</p><ul><li><code>none</code>: 将所有子属性设置为其初始值。</li><li><code>&lt;grid-template&gt;</code>：与 <code>grid-template</code> 简写的工作方式相同。</li><li><code>&lt;grid-template-rows&gt; / [ auto-flow &amp;&amp; dense? ] &lt;grid-auto-columns&gt;?</code> ：将 <code>grid-template-rows</code> 设置为指定的值。 如果 <code>auto-flow</code> 关键字位于斜杠的右侧，则会将 <code>grid-auto-flow</code> 设置为 <code>column</code>。如果另外指定了 <code>dense</code> 关键字，则自动放置算法使用 “dense” 算法。 如果省略 <code>grid-auto-columns</code> ，则将其设置为 <code>auto</code>。</li><li><code>[ auto-flow &amp;&amp; dense? ] &lt;grid-auto-rows&gt;? / &lt;grid-template-columns&gt;</code>：将 <code>grid-template-columns</code> 设置为指定值。 如果 <code>auto-flow</code> 关键字位于斜杠的左侧，则会将 <code>grid-auto-flow</code> 设置为 <code>row</code> 。 如果另外指定了 <code>dense</code> 关键字，则自动放置算法使用 “dense” 打包算法。 如果省略 <code>grid-auto-rows</code> ，则将其设置为 <code>auto</code>。</li></ul><p>例子：</p><p>以下两个代码块是等效的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid</span>: <span class="number">100px</span> <span class="number">300px</span> / <span class="number">3</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">3</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下两个代码块是等效的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid</span>: auto-flow / <span class="number">200px</span> <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: row;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下两个代码块是等效的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid</span>: auto-flow dense <span class="number">100px</span> / <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: row dense;</span><br><span class="line">  <span class="attribute">grid-auto-rows</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下两个代码块是等效的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid</span>: <span class="number">100px</span> <span class="number">300px</span> / auto-flow <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: column;</span><br><span class="line">  <span class="attribute">grid-auto-columns</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它也接受一个更复杂但相当方便的语法来一次设置所有内容。您可以指定 <code>grid-template-areas</code>，<code>grid-template-rows</code> 和 <code>grid-template-columns</code>，并所有其他的子属性都被设置为它们的初始值。这么做可以在它们网格区域内相应地指定网格线名字和网格轨道的大小。用最简单的例子来描述：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid</span>: [row1-start] <span class="string">"header header header"</span> <span class="number">1</span>fr [row1-end]</span><br><span class="line">        [row2-start] <span class="string">"footer footer footer"</span> <span class="number">25px</span> [row2-end]</span><br><span class="line">        / auto <span class="number">50px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">"header header header"</span></span><br><span class="line">    <span class="string">"footer footer footer"</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: [row1-start] <span class="number">1</span>fr [row1-end row2-start] <span class="number">25px</span> [row2-end];</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: auto <span class="number">50px</span> auto;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="子元素-网格项-Grid-Items-属性"><a href="#子元素-网格项-Grid-Items-属性" class="headerlink" title="子元素 网格项(Grid Items) 属性"></a>子元素 网格项(Grid Items) 属性</h1><p>注意：<code>float</code>，<code>display: inline-block</code>，<code>display: table-cell</code>，<code>vertical-align</code> 和 <code>column-*</code> 属性对网格项无效。</p><h2 id="grid-column-start"><a href="#grid-column-start" class="headerlink" title="grid-column-start"></a>grid-column-start</h2><h2 id="grid-column-end"><a href="#grid-column-end" class="headerlink" title="grid-column-end"></a>grid-column-end</h2><h2 id="grid-row-start"><a href="#grid-row-start" class="headerlink" title="grid-row-start"></a>grid-row-start</h2><h2 id="grid-row-end"><a href="#grid-row-end" class="headerlink" title="grid-row-end"></a>grid-row-end</h2><p>通过引用特定网格线（grid lines）来确定网格项（grid item）在网格内的位置。<code>grid-column-start</code> / <code>grid-row-start</code> 是网格项开始的网格线，<code>grid-column-end</code> / <code>grid-row-end</code> 是网格项结束的网格线。</p><p>值：</p><ul><li><code>&lt;line&gt;</code>: 可以是一个数字引用一个编号的网格线，或者一个名字来引用一个命名的网格线</li><li><code>span &lt;number&gt;</code>: 该网格项将跨越所提供的网格轨道数量</li><li><code>span &lt;name&gt;</code>: 该网格项将跨越到它与提供的名称位置</li><li><code>auto</code>: 表示自动放置，自动跨度，默认会扩展一个网格轨道的宽度或者高度</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto</span><br><span class="line">  grid-column-end: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto</span><br><span class="line">  grid-row-start: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto</span><br><span class="line">  grid-row-end: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: five;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: row1-start</span><br><span class="line">  grid-row-end: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/grid-column-row-start-end-01.svg" alt="grid-column-row-start-end-01" width="80%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-b</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: span col4-start;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: <span class="number">2</span></span><br><span class="line">  grid-row-end: span <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/grid-column-row-start-end-02.svg" alt="grid-column-row-start-end-02" width="80%"></p><p>如果没有声明指定 <code>grid-column-end</code> / <code>grid-row-end</code>，默认情况下，该网格项将占据 1 个轨道。</p><p>项目可以相互重叠。您可以使用 <code>z-index</code> 来控制它们的重叠顺序。</p><h2 id="grid-column"><a href="#grid-column" class="headerlink" title="grid-column"></a>grid-column</h2><h2 id="grid-row"><a href="#grid-row" class="headerlink" title="grid-row"></a>grid-row</h2><p>分别为 <code>grid-column-start + grid-column-end</code> 和 <code>grid-row-start + grid-row-end</code> 的简写形式。</p><p>值：</p><ul><li><code>&lt;start-line&gt; / &lt;end-line&gt;</code>: 每个网格项都接受所有相同的值，作为普通书写的版本，包括跨度</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: &lt;start-line&gt; / &lt;end-line&gt; | &lt;start-line&gt; / span &lt;value&gt;;</span><br><span class="line">  <span class="attribute">grid-row</span>: &lt;start-line&gt; / &lt;end-line&gt; | &lt;start-line&gt; / span &lt;value&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-c</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">3</span> / span <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: third-line / <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/grid-column-row.svg" alt="grid-column-row" width="80%"></p><p>如果没有声明分隔线结束位置，则该网格项默认占据 1 个网格轨道。</p><h2 id="grid-area"><a href="#grid-area" class="headerlink" title="grid-area"></a>grid-area</h2><p>为网格项提供一个名称，以便可以被使用网格容器 <code>grid-template-areas</code> 属性创建的模板进行引用。另外，这个属性可以用作 <code>grid-row-start + grid-column-start + grid-row-end + grid-column-end</code> 的简写。</p><p>值：</p><ul><li><code>&lt;name&gt;</code>: 你所选的名称</li><li><code>&lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;</code>: 数字或分隔线名称</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: &lt;name&gt; | &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><p>作为为网格项分配名称的一种方法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-d</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: header</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作为 <code>grid-row-start + grid-column-start + grid-row-end + grid-column-end</code> 属性的简写形式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-d</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: <span class="number">1</span> / col4-start / last-line / <span class="number">6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/grid-area.svg" alt="grid-area" width="80%"></p><h2 id="justify-self"><a href="#justify-self" class="headerlink" title="justify-self"></a>justify-self</h2><p>沿着 inline（行）轴线对齐网格项（相反的属性是 <code>align-self</code> ，沿着 block（列）轴线对齐）。此值适用于单个网格项内的内容。</p><p>值：</p><ul><li><code>start</code>: 将网格项对齐到其单元格的左侧起始边缘（左侧对齐）</li><li><code>end</code>: 将网格项对齐到其单元格的右侧结束边缘（右侧对齐）</li><li><code>center</code>: 将网格项对齐到其单元格的水平中间位置（水平居中对齐）</li><li><code>stretch</code>: 填满单元格的宽度（默认值）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">justify-self</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">  <span class="attribute">justify-self</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/justify-self-start.svg" alt="justify-self-start" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">  <span class="attribute">justify-self</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/justify-self-end.svg" alt="justify-self-end" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">  <span class="attribute">justify-self</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/justify-self-center.svg" alt="justify-self-center" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">  <span class="attribute">justify-self</span>: stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/justify-self-stretch.svg" alt="justify-self-stretch" width="60%"></p><p>要为网格中的所有网格项设置 行轴线（row axis）线上对齐方式，也可以在网格容器上设置 <code>justify-items</code> 属性。</p><h2 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h2><p>沿着 block（列）轴线对齐网格项（grid items）（ 相反的属性是 <code>justify-self</code> ，沿着 inline（行）轴线对齐）。此值适用于单个网格项内的内容。</p><p>值：</p><ul><li><code>start</code>: 将网格项对齐到其单元格的顶部起始边缘（顶部对齐）</li><li><code>end</code>: 将网格项对齐到其单元格的底部结束边缘（底部对齐）</li><li><code>center</code>: 将网格项对齐到其单元格的垂直中间位置（垂直居中对齐）</li><li><code>stretch</code>: 填满单元格的高度（默认值）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">align-self</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/align-self-start.svg" alt="align-self-start" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/align-self-end.svg" alt="align-self-end" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/align-self-center.svg" alt="align-self-center" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/align-self-stretch.svg" alt="align-self-stretch" width="60%"></p><p>要为网格中的所有网格项设置 列轴线（column axis）上的对齐方式，也可以在 网格容器上设置 <code>align-items</code> 属性。</p><h2 id="place-self"><a href="#place-self" class="headerlink" title="place-self"></a>place-self</h2><p><code>place-self</code> 是设置 <code>align-self</code> 和 <code>justify-self</code> 的简写形式。</p><p>值：</p><ul><li><code>auto</code>: 布局模式的 “默认” 对齐方式。</li><li><code>&lt;align-self&gt; &lt;justify-self&gt;</code>: 第一个值设置 <code>align-self</code> 属性，第二个值设置 <code>justify-self</code> 属性。如果省略第二个值，则将第一个值同时分配给这两个属性。</li></ul><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">  <span class="attribute">place-self</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/place-self-center.svg" alt="place-self-center" width="60%"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">  <span class="attribute">place-self</span>: center stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://css-tricks.com/wp-content/uploads/2018/11/place-self-center-stretch.svg" alt="place-self-center-stretch" width="60%"></p><p>除 Edge 之外的所有主要浏览器都支持 <code>place-self</code> 简写属性。</p><h1 id="动画（Animation）"><a href="#动画（Animation）" class="headerlink" title="动画（Animation）"></a>动画（Animation）</h1><p>根据 CSS Grid 布局模块 Level 1 规范，有 5 个可应用动画的网格属性：</p><ul><li><code>grid-gap</code>， <code>grid-row-gap</code>，<code>grid-column-gap</code> 作为长度，百分比或 calc。</li><li><code>grid-template-columns</code>，<code>grid-template-rows</code> 作为长度，百分比或 calc 的简单列表，只要列表中长度、百分比或calc组件的值不同即可。</li></ul><h2 id="浏览器支持CSS网格属性"><a href="#浏览器支持CSS网格属性" class="headerlink" title="浏览器支持CSS网格属性"></a>浏览器支持CSS网格属性</h2><p>截至今天（2018年5月7日），在测试的几个浏览器中仅实现 <code>(grid-)gap</code>，<code>(grid-)row-gap</code>，<code>(grid-)column-gap</code> 的动画。</p><p>浏览器支持可设置动画的网格属性：</p><table><thead><tr><th>Browser</th><th><code>(grid-)gap</code>, <code>(grid-)row-gap</code>, <code>(grid-)column-gap</code></th><th><code>grid-template-columns</code></th><th><code>grid-template-rows</code></th></tr></thead><tbody><tr><td>Firefox</td><td>✅ 53+</td><td>✅ 66+</td><td>✅ 66+</td></tr><tr><td>Safari 12.0</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>Chrome</td><td>✅ 66+</td><td>❌</td><td>❌</td></tr><tr><td>Chrome for Android 66+, Opera Mini 33+</td><td>✅</td><td>❌</td><td>❌</td></tr><tr><td>Edge</td><td>✅ 16+</td><td>❌</td><td>❌</td></tr></tbody></table><p><a href="https://codepen.io/matuzo/pen/rmQvMG" target="_blank" rel="noopener">CSS Grid Layout: Animation Demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;中文原文：&lt;a href=&quot;https://www.html.cn/archives/8510#prop-grid-column-row-start-end&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CSS3 Flexbox 布局完全指南(图解 Flexbox 布局详细教程)&lt;/a&gt;&lt;br&gt;英文原文：&lt;a href=&quot;https://css-tricks.com/snippets/css/complete-guide-grid/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;A Complete Guide to Grid&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;CSS Grid 布局是 CSS 中最强大的布局系统。与 flexbox 的一维布局系统不同，CSS Grid 布局是一个二维布局系统，也就意味着它可以同时处理列和行。通过将 CSS 规则应用于 父元素（成为 Grid Container 网格容器）和其子元素（成为 Grid Items 网格项），你就可以轻松使用 Grid 布局。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://freegale.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="http://freegale.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://freegale.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Git命令行实战：谁动了我的奶酪</title>
    <link href="http://freegale.github.io/posts/git-who-moved-my-cheese.html"/>
    <id>http://freegale.github.io/posts/git-who-moved-my-cheese.html</id>
    <published>2019-01-18T07:00:50.000Z</published>
    <updated>2020-11-05T12:16:14.151Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://yearito-1256884783.image.myqcloud.com/thumbnails/boat-in-sky.jpg!thumbnail" alt="题图"></p><p>工作中遇到了这样一个场景：突然发现自己写的一段代码被人改过，想看看到底是谁改的，改了啥。</p><p>本文就基于以上这样一个场景预设介绍一系列相关的Git命令。</p><a id="more"></a><div class="note info"><p>首先，需要确认一下代码是真的被同事改动了，还是自己脑子瓦特了。</p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git blame -L start,end filename</span><br></pre></td></tr></table></figure><ul><li>start: 代码片段起始行号</li><li>end: 代码片段结尾行号</li><li>filename: 文件路径</li></ul><p>该命令会显示代码段中每一行的最后一次提交信息，包括提交的SHA1、时间、作者。</p><p>输出示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">9366598e (nelson 2018-12-26 15:34:54 +0800 48)   componentDidMount() &#123;</span><br><span class="line">f07595e2 (kenny  2019-01-04 12:41:28 +0800 49)     const &#123; schema, params &#125; = this.props;</span><br><span class="line">febe3a3b (kenny  2019-01-04 16:50:46 +0800 50)     AppActions.getGeneralOptions(schema, params);</span><br><span class="line">9366598e (nelson 2018-12-26 15:34:54 +0800 51)   &#125;</span><br></pre></td></tr></table></figure><div class="note info"><p>仔细一看，果然有猫腻，中间有两行在1月4日被人改过。</p></div><p><code>git blame</code> 只能看到谁在什么时间做了改动，至于具体每次提交改了啥，还得求助于 <code>git log</code> 命令来查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log -L start,end:filename</span><br></pre></td></tr></table></figure><ul><li>start: 代码片段起始行号</li><li>end: 代码片段结尾行号</li><li>filename: 文件路径</li></ul><p>该命令会输出代码段中最近几次改动的diff详情。</p><p>输出示例：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">commit febe3a3b52f1603e176eca0392a7c90df781d41e                                </span><br><span class="line">Author: kenny &lt;example@gmail.com&gt;                                              </span><br><span class="line">Date:   Fri Jan 4 16:50:46 2019 +0800                                          </span><br><span class="line"></span><br><span class="line">    commit message</span><br><span class="line"></span><br><span class="line">diff --git a/src/components/Select/GeneralSelect.jsx b/src/components/Select/GeneralSelect.jsx</span><br><span class="line"><span class="comment">--- a/src/components/Select/GeneralSelect.jsx</span></span><br><span class="line"><span class="comment">+++ b/src/components/Select/GeneralSelect.jsx</span></span><br><span class="line">@@ -48,10 +48,4 @@                                                    </span><br><span class="line">   componentDidMount() &#123;                                                       </span><br><span class="line">     const &#123; schema, params &#125; = this.props;                                     </span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="deletion">-    if( !this.state.Options?.[schema] ) &#123;</span></span><br><span class="line"><span class="deletion">-      AppActions.getGeneralOptions(schema, params);</span></span><br><span class="line"><span class="deletion">-    &#125; else &#123;</span></span><br><span class="line"><span class="deletion">-      this.getOptionCallback(this.state.Options[schema])</span></span><br><span class="line"><span class="deletion">-    &#125;</span></span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="addition">+    AppActions.getGeneralOptions(schema, params);</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><div class="note info"><p>一波分析，没能猜透同事的改动意图，然后就需要跟同事正面沟通一下了。沟通结果无非就两种，要么你被他说服了，这事儿就算过了，要么他被你说服了，然后你就会遇到一个新的问题：怎么回滚历史提交中更改的代码块。我们接着往下看。</p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset  (--patch | -p) tree-ish filename</span><br></pre></td></tr></table></figure><ul><li>tree-ish: 提交的SHA1标识</li><li>filename: 文件路径</li></ul><p>关于该命令，官方文档 <a href="https://git-scm.com/docs/git-reset#git-reset-emgitresetem--patch-plttree-ishgt--ltpathsgt82308203" target="_blank" rel="noopener">Git Documentation: Git Reset</a> 中描述如下：</p><blockquote><p>Interactively select hunks in the difference between the index and <tree-ish> (defaults to HEAD). The chosen hunks are applied in reverse to the index.</tree-ish></p></blockquote><p>也即，该命令会比较缓存区（Index）和所指定提交（此处手动埋伏笔）之间的差异，并交互式的让用户选择代码区块并应用到缓存区（Index）中。</p><p>这里要注意两点：</p><ol><li>什么叫交互式的？</li><li>应用到 <strong>缓存区（Index）</strong>。</li></ol><p>首先来看第一点，什么叫交互式的？</p><p>我们来看以上命令的输出示例：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">diff --git b/src/components/Select/GeneralSelect.jsx a/src/components/Select/GeneralSelect.jsx</span><br><span class="line">index b1bf5ca..73cd634 100644</span><br><span class="line"><span class="comment">--- b/src/components/Select/GeneralSelect.jsx</span></span><br><span class="line"><span class="comment">+++ a/src/components/Select/GeneralSelect.jsx</span></span><br><span class="line">@@ -47,7 +47,13 @@ class GeneralSelect extends Reflux.Component &#123;</span><br><span class="line"></span><br><span class="line">   componentDidMount() &#123;</span><br><span class="line">     const &#123; schema, params &#125; = this.props;</span><br><span class="line"><span class="deletion">-    AppActions.getGeneralOptions(schema, params);</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+    if( !this.state.Options?.[schema] ) &#123;</span></span><br><span class="line"><span class="addition">+      AppActions.getGeneralOptions(schema, params);</span></span><br><span class="line"><span class="addition">+    &#125; else &#123;</span></span><br><span class="line"><span class="addition">+      this.getOptionCallback(this.state.Options[schema])</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">Apply this hunk to index [y,n,q,a,d,/,e,?]?</span><br></pre></td></tr></table></figure><p>注意最后一行，命令并没有直接结束执行，而是等待用户的输入指示。此处提供了一堆可选项的缩写，如果看不懂直接输入 <code>?</code> 将会输出命令提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">y - apply this hunk to index</span><br><span class="line">n - do not apply this hunk to index</span><br><span class="line">q - quit; do not apply this hunk or any of the remaining ones</span><br><span class="line">a - apply this hunk and all later hunks in the file</span><br><span class="line">d - do not apply this hunk or any of the later hunks in the file</span><br><span class="line">g - select a hunk to go to</span><br><span class="line">/ - search for a hunk matching the given regex</span><br><span class="line">j - leave this hunk undecided, see next undecided hunk</span><br><span class="line">J - leave this hunk undecided, see next hunk</span><br><span class="line">k - leave this hunk undecided, see previous undecided hunk</span><br><span class="line">K - leave this hunk undecided, see previous hunk</span><br><span class="line">s - split the current hunk into smaller hunks</span><br><span class="line">e - manually edit the current hunk</span><br><span class="line">? - print help</span><br></pre></td></tr></table></figure><p>如果是整个代码段都要回滚，直接输入 <code>y</code> 即可，如果要回滚代码段中的指定几行，就要输入 <code>e</code> 进入vim环境下的手动编辑模式了，输出示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># Manual hunk edit mode -- see bottom for a quick guide.</span><br><span class="line">@@ -47,7 +47,13 @@ class GeneralSelect extends Reflux.Component &#123;</span><br><span class="line"></span><br><span class="line">   componentDidMount() &#123;</span><br><span class="line">     const &#123; schema, params &#125; = this.props;</span><br><span class="line">-    AppActions.getGeneralOptions(schema, params);</span><br><span class="line">+</span><br><span class="line">+    if( !this.state.Options?.[schema] ) &#123;</span><br><span class="line">+      AppActions.getGeneralOptions(schema, params);</span><br><span class="line">+    &#125; else &#123;</span><br><span class="line">+      this.getOptionCallback(this.state.Options[schema])</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ---</span><br><span class="line"># To remove &apos;-&apos; lines, make them &apos; &apos; lines (context).</span><br><span class="line"># To remove &apos;+&apos; lines, delete them.</span><br><span class="line"># Lines starting with # will be removed.</span><br><span class="line">#</span><br><span class="line"># If the patch applies cleanly, the edited hunk will immediately be</span><br><span class="line"># marked for applying.</span><br><span class="line"># If it does not apply cleanly, you will be given an opportunity to</span><br><span class="line"># edit again.  If all lines of the hunk are removed, then the edit is</span><br><span class="line"># aborted and the hunk is left unchanged.</span><br></pre></td></tr></table></figure><p>在这里只给出了部分的修改方法提示，但并不够完善，更详细的说明可以参考官方文档 <a href="https://git-scm.com/docs/git-add#_editing_patches" target="_blank" rel="noopener">Git Documentation: EDITING PATCHES</a>。</p><p>我们知道，在Git Diff的输出结果中：</p><ul><li>“-”开头表示被删除的行；</li><li>“+”开头表示新增的行；</li><li>两行内容相邻又相似，第一行以 “-” 开头，第二行以 “+” 开头，表示该行发生过修改。可以理解为上面两种情况结合所衍生出的深层意义。</li></ul><p>那么在手动编辑模式中如何阻止相应修改状态的回滚呢？对应如下：</p><ul><li>取消回滚中的删除行：将 “-“ 改为“  ”（空格）；</li><li>取消回滚中的新增行：删除掉 “+” 开头的行，或在 “+” 前添加 “#” 符号注释掉。</li><li>取消回滚中的修改行：将 “-” 改为“  ”（空格），并删除掉 “+” 开头的行（上面两种操作的结合）。</li></ul><p>更进一步的，如果想要在Diff范围之外进行额外的改动怎么办？</p><ul><li>删除行：将行前的“ ”（空格）改为 “-”;</li><li>新增行：在新增的行前添加 “+”;</li><li>修改行：将原行前的“ ”（空格）改为 “-”，并在其后新增以 “+” 开头的行输入更改后的行内容。</li></ul><p>改完之后退出编辑模式，如果修改成功会直接结束命令，如果输入错误导致修改失败会提示你重新进入编辑模式或放弃回滚区块的编辑。</p><p>以上就是代码回滚时的交互式修改。</p><p>假设你回滚了代码块，然后在IDE中打开文件，发现并没有看到刚才回滚的代码块，出了什么问题呢？</p><p>此时就要提到我们上文所说的第二点了：<strong>回滚应用到了缓存区（Index），而不是工作区（Working dir）</strong>。</p><p>也就是说，<code>git reset -p</code> 命令并没有改变工作区，工作目录里还是原来的样子，这时如果 <code>git add</code> 从工作目录提交改动到 Index，很容易就会将之前回滚的更改又覆盖掉了。如果想要将代码回滚到工作区，还需要将代码从缓存区（Index）检出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout filename</span><br></pre></td></tr></table></figure><p>至此即可完整将历史提交中的某段代码改动回滚到当前工作目录下了。</p><div class="note info"><p>插个题外话，还记不记得我们在一开始的时候手动埋下的那个伏笔，我们现在来聊聊获得指定提交的这个过程。</p></div><p>一般情况下，我们会使用 <code>git log -L</code> 命令来找到对应代码块是在哪一个提交中被改动的，比如说提交 <code>febe3a3</code> 中。但是这个提交中的文件内容是已经更改过的了，我们需要回滚的对象应该是这个提交的父级，也就是 <code>febe3a3^</code>，对应的命令也就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset -p febe3a3^ filename</span><br></pre></td></tr></table></figure><p>执行命令后，命令行输出 No changes. 哪里出了问题呢？</p><p>后来在 <a href="https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection" target="_blank" rel="noopener">Git Documentation: Revision Selection</a> 中发现了这样一行小提示：</p><blockquote><p>On Windows in cmd.exe, ^ is a special character and needs to be treated differently. You can either double it or put the commit reference in quotes.</p></blockquote><p>也就是说，Windows 命令行中 <code>^</code> 是特殊字符，可以通过写两边或者用引号引起来来做特殊处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git show HEAD^     # 无效</span><br><span class="line">$ git show HEAD^^    # 有效</span><br><span class="line">$ git show &quot;HEAD^&quot;   # 有效</span><br></pre></td></tr></table></figure><p>另外，也可以用 <code>febe3a3~</code> 指代父提交。<code>~</code> 和 <code>^</code> 只在有多个父提交的时候有差别，如合并提交的父提交，关于两者的差别后续会有专门篇幅讲到。</p><div class="reference-linking">参考链接</div><ul><li><a href="https://git-scm.com/docs/git-reset#git-reset-emgitresetem--patch-plttree-ishgt--ltpathsgt82308203" target="_blank" rel="noopener">Git Documentation: Git Reset</a></li><li><a href="https://git-scm.com/docs/git-add#_editing_patches" target="_blank" rel="noopener">Git Documentation: EDITING PATCHES</a></li><li><a href="https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection" target="_blank" rel="noopener">Git Documentation: Revision Selection</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://yearito-1256884783.image.myqcloud.com/thumbnails/boat-in-sky.jpg!thumbnail&quot; alt=&quot;题图&quot;&gt;&lt;/p&gt;
&lt;p&gt;工作中遇到了这样一个场景：突然发现自己写的一段代码被人改过，想看看到底是谁改的，改了啥。&lt;/p&gt;
&lt;p&gt;本文就基于以上这样一个场景预设介绍一系列相关的Git命令。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://freegale.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Git" scheme="http://freegale.github.io/categories/%E6%8A%80%E6%9C%AF/Git/"/>
    
    
      <category term="Git" scheme="http://freegale.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>实用截图工具推荐</title>
    <link href="http://freegale.github.io/posts/screenshot.html"/>
    <id>http://freegale.github.io/posts/screenshot.html</id>
    <published>2019-01-14T13:24:03.000Z</published>
    <updated>2020-11-05T12:16:14.159Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://yearito-1256884783.image.myqcloud.com/thumbnails/shadow.jpg!thumbnail" alt="题图"></p><p>一开始，我们都习惯于将QQ作为默认截图工具，直到有一天我按了 Ctrl + Alt + A 却没有响应，展开任务栏发现居然没有挂QQ，突然意识到陪伴了我们十几年的QQ已经开始淡出我们的社交圈。同时，我对截图功能有了更复杂的需求，例如为博客中的截图添加四周阴影，所以开始寻找一些独立的截图工具。</p><p>本文对比几款比较实用的截图工具，并谈及具体的应用场景。</p><a id="more"></a><h1 id="Snipaste"><a href="#Snipaste" class="headerlink" title="Snipaste"></a>Snipaste</h1><p><img src="http://ww2.sinaimg.cn/large/840a8430jw1f68mbo23png20qv0higz2.jpg" alt="Snipaste 截图功能" title="Snipaste 截图功能"></p><p><a href="https://zh.snipaste.com" target="_blank" rel="noopener">Snipaste</a>是由 Le Liu 读博期间独立开发的一款个人作品，它小巧精致，但功能很强大，绝对是截图工具的不二之选。但如同开发者所说，截图虽然很好用，贴图才是本体。贴图功能成为了它区别于其他所有工具的一大亮点，也借此俘获了我的青睐。它的其他功能特性也很实用，能够解决需求痛点，并且它目前对个人用户是免费的，付费专业版(￥99)则提供了更为丰富强大的功能。</p><p>Snipaste本身的使用文档已经撰写的非常详尽了，详情请参考 <a href="https://docs.snipaste.com/zh-cn/getting-started" target="_blank" rel="noopener">Snipaste 操作手册</a>。在此只谈几点主观的使用体验。</p><p>好的地方：</p><ul><li>自定义配置项很丰富</li><li>贴图功能很实用，不用在两个文档之间切来切去找不同了</li><li>可以回溯截图记录，如果截完图发现边缘有瑕疵，直接回溯调整即可，不用再复现截图页面了，强迫症患者福音</li><li>可以将剪贴板里的内容直接转换成贴图，包括图片源文件、文字内容、HTML代码，甚至是GIF，这就很神奇了</li><li>有取色器功能，但不仅仅是取色器，还可以用来转换颜色格式，方便了设计师和前端开发人员</li></ul><p>有待改进的地方：</p><ul><li>不支持截图阴影</li><li>不支持滚动截图</li></ul><p>虽然是个人作品，但是软件版本迭代的挺快的，作者很用心的在Github开了反馈的<a href="https://github.com/Snipaste/feedback" target="_blank" rel="noopener">Repository</a>，用户可以提Issues。</p><p>如果你对于这款软件诞生的经历感兴趣，可以移步作者2016年在V2EX上发布的一篇帖子：<a href="https://www.v2ex.com/t/295433" target="_blank" rel="noopener">Snipaste - 开发了三年的截图工具，但不只是截图</a>。</p><h1 id="Winsnap"><a href="#Winsnap" class="headerlink" title="Winsnap"></a><a href="https://www.ntwind.com/software/winsnap.html" target="_blank" rel="noopener">Winsnap</a></h1><p><img src="http://yearito-1256884783.image.myqcloud.com/screenshot/winsnap.png" alt="Winsnap" title="Winsnap"></p><p>一款有点年纪的截图软件，界面UI比较传统，需要$24美金获取终身使用许可。这款软件不够轻量化，截图后会打开应用程序，无法默认保存到剪贴板。Winsnap除了可以编辑截图，也可以用来编辑本地图片，添加特殊效果与标注，所以说与其说是截图工具，它更像是一个图片处理软件，只是增加了一种通过截图获取图片的方法。唯一一个挽留我没卸载这个软件的原因是它所附带的截图阴影功能，用于捕获应用界面比较美观实用。</p><h1 id="Ashampoo-Snap"><a href="#Ashampoo-Snap" class="headerlink" title="Ashampoo Snap"></a><a href="https://www.ashampoo.com/cn/cny/pin/2024/multimedia-software/Ashampoo-Snap-10" target="_blank" rel="noopener">Ashampoo Snap</a></h1><p><img src="http://yearito-1256884783.image.myqcloud.com/screenshot/Ashampoo-snap.png" alt="Ashampoo Snap" title="Ashampoo Snap"></p><p>一款专业的截图软件，集成了非常多的截图相关功能，界面UI比较新颖。支持多屏截图自动拼接，可以滚动截图。除了能截图，还附带录屏、OCR等功能，价格自然也不菲，正式版价格￥189，但也提供了功能受限的免费版。</p><p>虽然功能强大，但真正使用起来发现还是有挺多问题的：</p><ul><li>软件不太稳定，有时候会崩溃</li><li>默认会截取光标，需要截图后手动从图片中剔除</li><li>应用窗口的捕获效果不理想，边缘有线框，可能是受Windows窗体Areo效果的影响</li><li>在滚动截取浏览器内容时发现，只有窗体出现滚动条时才能滚动截图，而某个固定高度元素内容溢出而产生的滚动条不会响应滚动截图，在一些自行实现内容滚动的网页应用中也就没法适用该功能特性了</li></ul><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>目前，以Snipaste作为QQ截图的替代品，适用于常用截图及标注，并设置了开机启动；用Winsnap来完成博客中配图的截图以添加阴影；用Ashampoo Snap完成更为复杂的截图需求，如页面滚动截图、跨屏截图自动拼接等。</p><div class="reference-linking">参考链接</div><ul><li><a href="https://sspai.com/post/34962" target="_blank" rel="noopener">Windows 上最好的免费截图标注工具：Snipaste</a></li><li><a href="https://www.v2ex.com/t/295433" target="_blank" rel="noopener">Snipaste - 开发了三年的截图工具，但不只是截图</a></li><li><a href="https://sspai.com/post/41443" target="_blank" rel="noopener">在 Windows 上为图片添加阴影，让截图更好看</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://yearito-1256884783.image.myqcloud.com/thumbnails/shadow.jpg!thumbnail&quot; alt=&quot;题图&quot;&gt;&lt;/p&gt;
&lt;p&gt;一开始，我们都习惯于将QQ作为默认截图工具，直到有一天我按了 Ctrl + Alt + A 却没有响应，展开任务栏发现居然没有挂QQ，突然意识到陪伴了我们十几年的QQ已经开始淡出我们的社交圈。同时，我对截图功能有了更复杂的需求，例如为博客中的截图添加四周阴影，所以开始寻找一些独立的截图工具。&lt;/p&gt;
&lt;p&gt;本文对比几款比较实用的截图工具，并谈及具体的应用场景。&lt;/p&gt;
    
    </summary>
    
      <category term="工作" scheme="http://freegale.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="效率" scheme="http://freegale.github.io/categories/%E5%B7%A5%E4%BD%9C/%E6%95%88%E7%8E%87/"/>
    
    
  </entry>
  
  <entry>
    <title>实战纪录：将Hexo站点备份到Github上</title>
    <link href="http://freegale.github.io/posts/backup-hexo-to-github.html"/>
    <id>http://freegale.github.io/posts/backup-hexo-to-github.html</id>
    <published>2018-11-28T17:20:39.000Z</published>
    <updated>2020-11-05T12:16:14.149Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://yearito-1256884783.image.myqcloud.com/thumbnails/soldier-on-planet.jpg!thumbnail" alt="题图" title="Photo by Felix Hernandez Dreamphography"></p><p>博客上线后向老婆大肆炫耀，老婆连连夸赞：“好厉害好厉害，老公我也想要！”。然后我就陷入了思考，如何快速给老婆也整个博客出来？直接复制根目录然后粘贴有点太low了，万一爸爸妈妈爷爷姥姥都想要了有点难办。理想的方案是，将博客项目上传到 github 上，然后谁要就去我的仓库里 clone 一份就行了，说起来简单，实操起来还是有不少坑的，于是就有了本文。</p><a id="more"></a><p>我们在之前的文章 <a href="/posts/hexo-deploy-to-VPS.html" title="Hexo搭建个人博客系列：部署上线篇">Hexo搭建个人博客系列：部署上线篇</a> 中提到通过 Git 向VPS同步站点静态资源，需要注意的是，这里同步的仅仅是Hexo编译打包后生成的静态资源，也就是 public 目录下的文件。而我们整个博客项目，包括我们之前添加的脚本和样式，修改过的配置文件，都未做好容灾备份，一但项目丢失就又要花费很大一番功夫来重建。</p><p>所以，<strong>将博客项目上传到Github上，不仅可以方便别人clone后快速建站，还能用来备份项目。</strong></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>在本地根目录初始化仓库并做第一次提交：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -a -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure><p>在Github上新建一个空项目，然后在本地添加远程仓库地址并追踪：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:Coodool/hexo-blog-yearito.git</span><br><span class="line">$ git push --set-upstream origin master</span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure><h1 id="Git-子模块"><a href="#Git-子模块" class="headerlink" title="Git 子模块"></a>Git 子模块</h1><p>然后我刷新github一看，发现问题了， themes\next\ 目录下没有任何文件。刚开始还以为是被git忽略了，打开.gitignore一看没有相关的规则，后来查到了是和 <a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">Submodules（子模块）</a> 有关。简单来说，子模块就是用来在一个git项目中包含了另一个git项目时处理代码提交逻辑的，或者说为独立两个项目的开发而通过子模块来隔离两个项目的提交内容，这通常发生于在项目目录里执行了 <code>git clone</code> 命令。对于本项目来说，就是在博客项目中包含了Next主题项目。</p><p>知道了怎么回事，接下来就要解决问题：如何删除子模块将两个项目合并？</p><p>在 <a href="https://stackoverflow.com/questions/16574625/how-do-i-add-files-in-git-to-the-path-of-a-former-submodule/16581096#16581096" target="_blank" rel="noopener">How do I add files in Git to the path of a former submodule?</a> 里找到了正解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm --cached themes\next</span><br></pre></td></tr></table></figure><p>所查资料中还提到了所有的子模块都会记录在根目录下的 .gitmodules 和 .git\config 文件中，我在项目中却没有发现 .gitmodules 文件， .git\config 中也没有相关的子模块记录。想想可能是因为我是在 <code>git clone</code> 主题之后才执行的 <code>git init</code> 操作的吧，导致没有记录子模块。</p><p>后来注意到在本地初始化仓库后执行 <code>git add .</code> 命令的时候就已经有提示子模块的问题了，只是当时没细看：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/backup-hexo-to-github/git-add-hint.png" alt="git add hint" title="git add hint"></p><h1 id="撤销提交"><a href="#撤销提交" class="headerlink" title="撤销提交"></a>撤销提交</h1><p>讲道理这个时候应该重新提交一次就完了，但作为一个有强迫症的人我怎么能容忍我的第一次提交中存在这种纰漏呢，当然要想办法撤销掉了。正常情况下，如果已经push到了远程仓库但合作开发者尚未同步提交的话，可以通过如下方法重写提交历史：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD^</span><br><span class="line">$ git commit -a -m &quot;message&quot;</span><br><span class="line">$ git push --force</span><br></pre></td></tr></table></figure><div class="note danger"><p>一般情况下，如果push了就不要用reset来撤销提交了，否则会被同事骂猪队友的。（可以用revert）</p></div><p>但是这是第一次提交，<code>^HEAD</code> 不管用怎么办呢，在 <a href="https://stackoverflow.com/questions/6632191/how-to-revert-initial-git-commit" target="_blank" rel="noopener">How to revert initial git commit?</a> 中找到了答案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git update-ref -d HEAD</span><br></pre></td></tr></table></figure><p>然后重新提交并强推更新上去：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push --force --set-upstream origin master</span><br></pre></td></tr></table></figure><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>突然想到大学的时候同系一个同学用单片机控制发光二极管阵列来显示文字作为女朋友的生日礼物。大概程序员的爱情就是“老婆，这是我给你整的博客！”不过还好博客是能看得见的东西，脑补了一下搞Linux开发的momo指着shell说：“亲爱的，这是我给你买的VPS！”</p><p>哦忘记了，他女朋友是比他还大佬的程序员……</p><div class="reference-linking">参考链接</div><ul><li><a href="https://stackoverflow.com/questions/16574625/how-do-i-add-files-in-git-to-the-path-of-a-former-submodule/16581096#16581096" target="_blank" rel="noopener">How do I add files in Git to the path of a former submodule?</a></li><li><a href="https://stackoverflow.com/questions/6632191/how-to-revert-initial-git-commit" target="_blank" rel="noopener">How to revert initial git commit?</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://yearito-1256884783.image.myqcloud.com/thumbnails/soldier-on-planet.jpg!thumbnail&quot; alt=&quot;题图&quot; title=&quot;Photo by Felix Hernandez Dreamphography&quot;&gt;&lt;/p&gt;
&lt;p&gt;博客上线后向老婆大肆炫耀，老婆连连夸赞：“好厉害好厉害，老公我也想要！”。然后我就陷入了思考，如何快速给老婆也整个博客出来？直接复制根目录然后粘贴有点太low了，万一爸爸妈妈爷爷姥姥都想要了有点难办。理想的方案是，将博客项目上传到 github 上，然后谁要就去我的仓库里 clone 一份就行了，说起来简单，实操起来还是有不少坑的，于是就有了本文。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://freegale.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="博客" scheme="http://freegale.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://freegale.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客系列：部署上线篇</title>
    <link href="http://freegale.github.io/posts/hexo-deploy-to-VPS.html"/>
    <id>http://freegale.github.io/posts/hexo-deploy-to-VPS.html</id>
    <published>2018-11-20T12:09:55.000Z</published>
    <updated>2020-11-05T12:16:14.154Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://yearito-1256884783.image.myqcloud.com/thumbnails/dolphin.jpg!thumbnail" alt="题图" title="Photo by Felix Hernandez Dreamphography"></p><p>本文主要介绍了在将Hexo博客部署上线过程中将会遇到的一系列问题。</p><p>第一章主要介绍了将 Hexo 部署到 VPS 的方案，使得在本地推送更新后自动同步线上内容，部署过程主要分为三步走，首先从本地推送更新到远程仓库，然后触发 Git Hooks 将静态资源部署到 Web 根目录，最后启动 Nginx 服务器。</p><p>第二章主要介绍了如何分析页面加载性能瓶颈，并提供了通过CDN和代码压缩合并等方法来优化页面加载速度的方案。</p><p>第三章主要介绍了如何将站点提交到各大搜索引擎收录，并讨论了SEO相关话题。</p><p>后续章节则零散的介绍了为站点添加404页面和RSS链接。</p><a id="more"></a><p>部署个人博客主要有两种方案，一种是托管到Github Pages上，一种是部署到自己的VPS上。</p><p>对于Github Pages，优势在于完全免费，部署方便快捷，适用于新手，但一个Github账号只能用来部署一个个人站点。另外，Github服务器在国外，理论上从国内加载站点资源会有延迟，并且由于GFW的存在有时候可能访问不到站点。当然，可以通过Coding Pages来实现国内外双线部署来解决这个问题，详情可以参考网上相关教程。</p><p>对于VPS，需要独立购买域名和服务器，还需要熟悉Linux系统的基本操作，但同时也提供了更广的自由度。本篇主要介绍使用VPS部署博客的方案。</p><h1 id="VPS自动部署"><a href="#VPS自动部署" class="headerlink" title="VPS自动部署"></a>VPS自动部署</h1><div class="note info"><p>本章节参考 <a href="https://blog.yizhilee.com/post/deploy-hexo-to-vps/" target="_blank" rel="noopener">荔枝 | 通过 Git Hooks 自动部署 Hexo 到 VPS</a></p></div><p>使用VPS部署博客的主要思路分为三步：</p><ul><li><code>hexo deploy</code> 的时候通过git把 public 目录下的博客静态资源推送到远程仓库中</li><li>推送更新时触发 Git Hooks 将静态资源克隆到网站根目录下</li><li>使用 nginx 作为Web服务器提供对博客的 HTTP 访问</li></ul><p>本文基于腾讯云 Ubuntu 16.04实现自动部署。</p><h2 id="远程仓库推送"><a href="#远程仓库推送" class="headerlink" title="远程仓库推送"></a>远程仓库推送</h2><p>在推送静态资源之前需要做些准备工作，包括基于公钥的ssh通信以及VPS用户和权限管理。</p><div class="note info"><p>在进行下一步操作之前请先确认本地已经安装了 <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> 和 <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a>。</p></div><p>为什么要实现基于公钥的ssh通信？</p><p>通常可以使用密码和公钥两种方式登陆VPS，如果在VPS上为某用户添加了授权公钥，则之后每次以该用户身份登陆或者获取授权就无须再重复输入密码了。<strong>Hexo的git自动部署插件不支持使用密码验证授权</strong>，所以要实现基于公钥的ssh通信。</p><p>如果尚未生成ssh公钥对，执行如下命令生成新的公钥对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen</span><br></pre></td></tr></table></figure><div class="note info"><p>无须设置公钥密码，否则每次通过公钥登陆的时候都要输入密码。</p></div><p>如果是Windows操作系统，此时会在 C:\Users\Username\.ssh\ 目录下生成密钥文件 id_rsa 和公钥文件 id_rsa.pub。</p><p>腾讯云的默认登陆用户名为ubuntu，在设置根用户密码之前无法切换为根用户，可以通过 <code>sudo passwd</code> 命令来设置根用户密码，然后通过 <code>su</code> 命令切换到根用户身份。</p><p>以管理员权限执行如下命令新建用户并设置密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo adduser git</span><br><span class="line">$ sudo passwd git</span><br></pre></td></tr></table></figure><p>这一步虽然不是必须的，但一般情况下都会单独新建git用户专用于git代码同步，并将远程仓库放在git用户目录下。</p><p>为方便后续以git用户身份获取管理员权限来新建目录，此处为其添加管理员操作权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gpasswd -a git sudo</span><br></pre></td></tr></table></figure><div class="note info"><p>该命令指的是将 git 用户添加到 sudo用户组中，也就使得git用户有了sudo用户组的操作权限。</p></div><p>在本地Git Bash中执行如下命令将ssh公钥上传到VPS：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id git@yearito.cn</span><br></pre></td></tr></table></figure><div class="note info"><p>该命令会自动把默认ssh公钥id_rsa.pub中的内容拷贝到git用户目录下的 .ssh/authorized_keys文件中。</p></div><p>此时在本地cmd中用git用户登陆VPS将会直接成功登陆而无须输入密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh git@yearito.cn</span><br></pre></td></tr></table></figure><p>在git用户目录下执行如下命令创建远程仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir blog.yearito.git</span><br><span class="line">$ cd blog.yearito.git</span><br><span class="line">$ git init --bare</span><br></pre></td></tr></table></figure><p>在本地站点根目录下执行以下命令安装相关依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>在本地站点配置文件中添加git远程仓库信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@yearito.cn:~/blog.yearito.git</span><br></pre></td></tr></table></figure><p>此时在站点根目录下执行 <code>hexo deploy</code> 命令，如果最后一行出现如下提示：</p><blockquote><p><span style="color: green">INFO</span>  Deploy done: git</p></blockquote><p>则说明已经实现本地和VPS远程仓库之间的资源同步了。</p><div class="note info"><p>需要注意的是，同步的仅是 public 目录下的静态资源文件，而非整个项目目录。</p></div><p>如果在部署过程中出现如下提示：</p><blockquote><p>The file will have its original line endings in your working directory. <br>warning: LF will be replaced by CRLF in tags/Hexo/index.html.</p></blockquote><p>这是由 Windows 操作系统和 Linux 操作系统中行尾换行符不一致所引起的，可以通过执行 <code>git config core.autocrlf false</code> 来关闭告警。</p><h2 id="Git-Hooks-拷贝资源"><a href="#Git-Hooks-拷贝资源" class="headerlink" title="Git Hooks 拷贝资源"></a>Git Hooks 拷贝资源</h2><p>此时VPS上的远程仓库只是一个裸仓库，无法用于搭建站点服务器。所以我们需要在推送更新的同时触发Git Hooks钩子，来从远程仓库中克隆出完整的博客资源放到Web服务器根目录下。</p><p>首先创建Web根目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir /var/www/blog.yearito -p</span><br></pre></td></tr></table></figure><div class="note info"><p>其中，-p 参数表示若所要建立目录的上层目录目前尚未建立，则一并建立上层目录。</p></div><p>然后改变Web根目录的所有者和所有工作组，以使git用户拥有对该目录的操作权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chown git:git -R /var/www/blog.yearito</span><br></pre></td></tr></table></figure><p>打开到远程仓库中的hooks目录下，默认该目录下是没有post-receive钩子文件的，直接通过 <code>vim post-receive</code> 新建该文件并添加以下代码：</p><figure class="highlight bash"><figcaption><span>~/blog.yearito.git/hooks/post-receive</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"post-receive hook is running..."</span></span><br><span class="line"></span><br><span class="line">GIT_REPO=/home/git/blog.yearito.git</span><br><span class="line">TMP_GIT_CLONE=/tmp/blog.yearito</span><br><span class="line">PUBLIC_WWW=/var/www/blog.yearito</span><br><span class="line"></span><br><span class="line">rm -rf <span class="variable">$TMP_GIT_CLONE</span></span><br><span class="line">git <span class="built_in">clone</span> <span class="variable">$GIT_REPO</span> <span class="variable">$TMP_GIT_CLONE</span></span><br><span class="line">rm -rf <span class="variable">$&#123;PUBLIC_WWW&#125;</span>/*</span><br><span class="line">cp -rf <span class="variable">$&#123;TMP_GIT_CLONE&#125;</span>/* <span class="variable">$&#123;PUBLIC_WWW&#125;</span>/</span><br></pre></td></tr></table></figure><div class="note info"><p>为什么不直接将裸仓库克隆到Web根目录下呢？我之前也一直被这个问题困扰，感觉先克隆到 tmp 目录再拷贝到Web根目录是多此一举。后来我觉得可能是出于项目安全的考虑，在执行cp命令的时候，.git作为隐藏目录不会被拷贝到Web根目录下，也就避免了将整个仓库历史暴漏在Web服务中。</p></div><p>输入 <code>:wq</code> 保存并退出，此时可以看到 post-receive 文件只有读写权限，没有执行权限：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/post-receive-before.png" alt="修改 post-receive 权限前" title="修改 post-receive 权限前"></p><p>执行以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure><p>执行后可以看到 post-receive 已获得执行权限：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/post-receive-after.png" alt="修改 post-receive 权限后" title="修改 post-receive 权限后"></p><p>然后在本地站点目录下执行 <code>hexo deploy -g</code>，如果出现我们之前设定好的 <code>remote: post-receive hook is running...</code> 提示，且没有其他权限错误，则说明钩子正确执行了，从远程仓库拷贝资源成功，此时打开 /var/www/blog.yearito/ 目录可以看到完整的博客静态资源文件。</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/auto-deploy-success.png" alt="Git Hooks 拷贝资源成功" title="Git Hooks 拷贝资源成功"></p><h2 id="配置Nginx服务器"><a href="#配置Nginx服务器" class="headerlink" title="配置Nginx服务器"></a>配置Nginx服务器</h2><p>将静态资源部署到Web服务器根目录后，接下来要做就是通过配置Nginx来启动Web服务。</p><p>切换到根用户并安装Nginx：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install nginx</span><br></pre></td></tr></table></figure><p>成功安装后可以通过 <code>nginx -v</code> 查看Nginx版本信息，以及可以通过 <code>service nginx status</code> 或者 <code>systemctl status nginx</code> 命令来查看Nginx运行状态。</p><p>修改nginx配置文件内容，启动80端口的HTTP服务到Web根目录，此处提供最简配置作为参考，读者可以在此基础上自定义：</p><figure class="highlight nginx"><figcaption><span>/etc/nginx/nginx.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span> www-data;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">pid</span> /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">  <span class="attribute">worker_connections</span>  <span class="number">768</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="attribute">include</span>  mime.types;</span><br><span class="line">  <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">root</span> /var/www/blog.yearito;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时通过 <code>nginx -s reload</code> 重新加载配置文件，如果此前Nginx服务未启动，则直接执行 <code>nginx</code> 命令即可。</p><p>执行以下命令设置Nginx开机自动启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl enable nginx</span><br></pre></td></tr></table></figure><p>此外提供一些其他的Nginx语法命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx -s stop //强制关闭</span><br><span class="line">nginx -s quit //完成当前服务后关闭</span><br><span class="line">nginx -s reload //重新加载配置文件</span><br></pre></td></tr></table></figure><p>在浏览器中输入VPS域名，即可打开个人博客站点，至此实现了在本地推送更新后自动同步部署线上站点内容的功能。</p><h1 id="页面加载性能"><a href="#页面加载性能" class="headerlink" title="页面加载性能"></a>页面加载性能</h1><p>博客上线后，需要关注页面的加载速度。<a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener">Google PageSpeed Insights</a> 可用于帮助分析网页加载速度瓶颈，该网站将会针对指定域名进行在线测试，并提供一份详细的页面加载分析报告，报告中还会根据页面资源加载情况给出合理的优化建议及预期优化效果，因此用户可以有的放矢的进行性能优化专项整改。</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/pagespeed-insights.png" alt="Google PageSpeed Insights" title="Google Pagespeed Insights"></p><p>虽然可以从报告中了解到站点的加载性能瓶颈，但是，报告中仅是提供优化建议，具体的落实还须自己实施。本章节主要介绍CDN加速和代码合并压缩两种比较常见的优化方案。</p><h2 id="CDN加速"><a href="#CDN加速" class="headerlink" title="CDN加速"></a>CDN加速</h2><p>在控制台的Network Tab页中可以查看到页面加载瀑布流。在此需要勾选 Disable cache 以避免缓存干扰分析。另外，在所有静态资源中，对加载速度影响较大且存在大幅优化空间的主要还是JS脚本，所以我们先拿它开刀。</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/before-optimize.png" alt="页面加载瀑布流" title="页面加载瀑布流"></p><p>首先理解一下底部信息栏中的这行文字：</p><blockquote><p><span style="font-family: Arial">21 / 50 requests | 518 KB / 818KB transferred | Finish: 8.44 s | <span style="color: blue">DOMContentLoaded: 4.36 s</span> | <span style="color: red">Load: 6.80 s</span></span></p></blockquote><p>主要包括以下几条信息：</p><ul><li>加载页面总共发起了50次请求，下载了818 KB资源，其中JS脚本资源共计518 KB，占据了21次请求。</li><li>在 4.36 s 时DOM树渲染完毕（蓝线），此时已经可以看到正常的页面，由于JS脚本会阻塞DOM解析，所以这段时间是包含了JS脚本的下载与执行过程的。</li><li>在 6.80 s 时所有资源加载完毕（红线），包括异步的脚本和其他非阻塞的页面资源，如图片、CSS文件等。</li><li>在 8.44 s 时所有HTTP请求响应完毕，包括XHR请求。</li></ul><div class="note info"><p>关于 Finish / DOMContentLoaded / Load 的讨论请参见 <a href="https://stackoverflow.com/questions/31729240/how-to-analyzing-page-speed-in-chrome-dev-tools" target="_blank" rel="noopener">How to analyzing Page Speed in Chrome Dev tools</a> 和 <a href="https://segmentfault.com/q/1010000011840948/a-1020000011947156" target="_blank" rel="noopener">chrome devtools 中 network 一栏中的 Finish 时间代表着什么</a>，两者说法不一致，我倾向于认同后者的观点。</p></div><p>分析以上页面加载瀑布流可知，DOM树的解析渲染主要是被从VPS本地下载 jquery、velocity、fancybox 等脚本所滞后，所以对症下药，我们可以改为从开源公共CDN加载脚本。</p><p>对于在站点中用到的三方插件，在主题配置文件中为其添加CDN加载源：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="attr">jquery:</span> <span class="string">//cdn.jsdelivr.net/npm/jquery@2.1.3/dist/jquery.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">fancybox:</span> <span class="string">https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.5.2/dist/jquery.fancybox.min.js</span></span><br><span class="line">  <span class="attr">fancybox_css:</span> <span class="string">https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.5.2/dist/jquery.fancybox.min.css</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">velocity:</span> <span class="string">https://cdn.jsdelivr.net/npm/velocity-animate@1.2.1/velocity.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">velocity_ui:</span> <span class="string">//cdn.jsdelivr.net/npm/velocity-animate@1.2.1/velocity.ui.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">fontawesome:</span> <span class="string">//cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">algolia_instant_js:</span> <span class="string">https://cdn.jsdelivr.net/npm/instantsearch.js@2.4.1/dist/instantsearch.js</span></span><br><span class="line">  <span class="attr">algolia_instant_css:</span> <span class="string">https://cdn.jsdelivr.net/npm/instantsearch.js@2.4.1/dist/instantsearch.min.css</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">pace:</span> <span class="string">//cdn.jsdelivr.net/npm/pace-js@1.0.2/pace.min.js</span></span><br><span class="line">  <span class="attr">pace_css:</span> <span class="string">//cdn.jsdelivr.net/npm/pace-js@1.0.2/themes/blue/pace-theme-minimal.css</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">pangu:</span> <span class="string">//cdn.jsdelivr.net/npm/pangu@3.3.0/dist/browser/pangu.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">valine:</span> <span class="string">https://cdn.jsdelivr.net/npm/valine@1.3.3/dist/Valine.min.js</span></span><br></pre></td></tr></table></figure><div class="note info"><p>主题配置文件中给出的CDN链接示例的版本可能已经落后很久了，请查找并使用最新版的插件CDN链接。</p></div><p>比较常用的开源项目CDN服务商主要有unpkg、bootcdn、 cdnjs、jsdelivr 和 cloudflare，用户可以自行在浏览器中检测资源下载速度后做取舍。本站中主要使用 jsdelivr 提供的CDN加速服务。</p><p>使用CDN加速后页面加载瀑布流如下：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/after-optimize.png" alt="CDN加载三方插件后的页面加载瀑布流" title="CDN加载三方插件后的页面加载瀑布流"></p><p>DOM树的渲染完成时间缩减到了654 ms，<strong>也就是说刷新页面后654 ms后就可以看到页面内容了，相比优化前的4.36 s 有了极大的提升</strong>。</p><p>如果开启了Live2D看板娘，一样可以通过将脚本来源改为CDN来完成性能优化：</p><figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  # Live2D</span><br><span class="line">  ## https://github.com/EYHN/hexo-helper-live2d</span><br><span class="line">  live2d:</span><br><span class="line">    enable: true</span><br><span class="line">    pluginRootPath: live2dw/ # Root path of plugin to be on the site (Relative)</span><br><span class="line">    pluginJsPath: lib/ # JavaScript path related to plugin's root (Relative)</span><br><span class="line">    pluginModelPath: assets/ # Relative model path related to plugin's root (Relative)</span><br><span class="line"><span class="deletion">-   scriptFrom: local # Default</span></span><br><span class="line"><span class="addition">+   scriptFrom: jsdelivr # jsdelivr CDN</span></span><br><span class="line">    tagMode: true # Whether only to replace live2d tag instead of inject to all pages</span><br><span class="line">    log: false # Whether to show logs in console</span><br><span class="line">    model:</span><br><span class="line">      use: live2d-widget-model-shizuku  # 萌系少女</span><br><span class="line">    display:</span><br><span class="line">      position: left</span><br><span class="line">      width: 100</span><br><span class="line">      height: 180</span><br><span class="line">    mobile:</span><br><span class="line">      show: false</span><br><span class="line">    react:</span><br><span class="line">      opacityDefault: 0.7 # 默认透明度</span><br></pre></td></tr></table></figure><p>另外，我们注意到，处理 hotjar 的脚本共计耗时 5 s，那么该脚本是否影响到了页面加载性能呢？事实上没有，在HTML结构树中可以找到 hotjar 的脚本引入代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"https://static.hotjar.com/c/hotjar-1061283.js?sv=6"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中 <code>async</code> 属性意味着脚本将以异步形式加载，不会阻塞DOM树的解析和渲染。也就是说该脚本只使得 Load 的完成时间滞后，但没有影响到 DOMContentLoaded 的时间节点。</p><p>关于 Hotjar 是否会使得站点加载变慢，Hotjar 官方给出否定的回应，理由如下：</p><ul><li>通过异步的方式加载脚本</li><li>脚本使用CDN加速</li><li>脚本合理利用了浏览器缓存</li></ul><div class="note info"><p>更多详情请参考 <a href="https://help.hotjar.com/hc/en-us/articles/115009335727-Will-Hotjar-Slow-Down-My-Site-" target="_blank" rel="noopener">Will Hotjar Slow Down My Site?</a></p></div><p>除了可以使用CDN加速三方插件外，还可以使用CDN域名加速来加速站点静态资源，包括HTML文件、CSS样式、字体文件等，具体操作方案参考VPS服务商说明文档。</p><p>CDN域名加速也有几个坑点：</p><ul><li>CDN缓存会导致更新站点后访问到的仍是旧版内容，需要等待缓存刷新后才能看到更新。</li><li>加速后就不能通过该域名建立ssh连接了，此时 <code>hexo deploy</code> 将会出现端口连接超时，可以将远程仓库地址改为真实IP地址来确保推送成功。</li></ul><h2 id="代码合并压缩"><a href="#代码合并压缩" class="headerlink" title="代码合并压缩"></a>代码合并压缩</h2><p>另一种优化页面加载速度的方案是通过删除注释和空格、将长变量名改为短变量名等方式压缩代码体积，从而缩短资源下载时间。</p><p><a href="https://github.com/chenzhutian/hexo-all-minifier" target="_blank" rel="noopener">hexo-all-minifier</a> 插件通过集成下列插件提供一站式的资源压缩服务：</p><ul><li><a href="https://github.com/hexojs/hexo-html-minifier" target="_blank" rel="noopener">hexo-html-minifier</a>: 基于 <a href="https://github.com/kangax/html-minifier" target="_blank" rel="noopener">HTMLMinifier</a> 提供 HTML 压缩服务。</li><li><a href="https://github.com/hexojs/hexo-clean-css" target="_blank" rel="noopener">hexo-clean-css</a>: 基于 <a href="https://github.com/jakubpawlowicz/clean-css" target="_blank" rel="noopener">clean-css</a> 提供 CSS 压缩服务。</li><li><a href="https://github.com/hexojs/hexo-uglify" target="_blank" rel="noopener">hexo-uglify</a>: 基于 <a href="http://lisperator.net/uglifyjs/" target="_blank" rel="noopener">UglifyJS</a> 提供 JS 压缩服务。</li><li><a href="https://github.com/vseventer/hexo-imagemin" target="_blank" rel="noopener">hexo-imagemin</a>: 基于 <a href="https://github.com/imagemin/imagemin" target="_blank" rel="noopener">imagemin</a> 提供图片压缩服务。</li></ul><p>此外，该插件还可以把多个JS脚本拼接打包到一个文件中来减少HTTP请求次数，从而减少页面加载时间。</p><p>该方案从理论上来讲是有效且可行的，但是和一般的大型软件项目不同，博客项目中的主要资源是Markdown文件解析后的HTML文件，其核心是文本内容而非逻辑代码，压缩空间极其有限，在实际应用过程中效果并不明显，所以本站也就没有应用该插件功能。</p><h1 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h1><h2 id="提交网址"><a href="#提交网址" class="headerlink" title="提交网址"></a>提交网址</h2><div class="note info"><p>本节参考 <a href="https://juejin.im/post/590b451a0ce46300588c43a0" target="_blank" rel="noopener">hexo高阶教程：教你怎么让你的hexo博客在搜索引擎中排第一</a></p></div><p>在搜索引擎中输入 site:yearito.cn，会发现暂时还搜不到自己的站点：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/google-search-result.png" alt="谷歌搜索结果" title="谷歌搜索结果"></p><p>想要搜到自己的站点，首先要将个人网站提交给搜索引擎收录。针对不同的搜索引擎需要分别提交网址，但提交的步骤是大同小异的：</p><p><strong>第一步：提交网站域名</strong></p><p>注意需要区分输入 http 与 https。</p><p><strong>第二步：验证网站所有权</strong></p><p>一般都包括以下三种验证方法，其本质都是通过一段字符串验证码来验证用户的网站所有权，三种方法任选其一：</p><ul><li>HTML文件验证：将给定的HTML文件上传到站点根目录下（验证码包含在HTML文件中）</li><li>HTML元标签验证：在站点首页中添加给定的 <code>meta</code> 标签（验证码包含在 <code>meta</code> 标签属性中）</li><li>CNAME验证：添加一个CNAME域名解析记录到指定站点（验证码包含在二级域名中）</li></ul><p>Next主题中已经内置集成了各大搜索引擎的HTML元标签验证方案，用户只需获取验证码填写到主题配置文件中并重新打包部署即可完成身份验证。</p><p><strong>第三步：推送或者提交 sitemap</strong></p><p>sitemap，又称站点地图，通常是一个xml格式的文件，最早由谷歌提出，现已被多数引擎所支持。里面包含了站点内的页面列表，帮助搜索引擎理解网站内容的组织架构。</p><p>在Hexo中可以通过 <a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="noopener">hexo-generator-sitemap</a> 和 <a href="https://github.com/coneycode/hexo-generator-baidu-sitemap" target="_blank" rel="noopener">hexo-generator-baidu-sitemap</a> 两个插件帮助生成通用站点地图和百度专用站点地图文件。</p><p>在站点根目录下执行以下命令安装相关依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-sitemap --save-dev</span><br><span class="line">$ npm install hexo-generator-baidu-sitemap --save-dev</span><br></pre></td></tr></table></figure><p>之后在执行 <code>hexo generate</code> 打包后即可在 public 目录下找到 sitemap.xml 和 baidusitemap.xml 两个文件，将该文件提交到搜索引擎站长后台即可帮助搜索引擎分析收录站点内容，各个搜索引擎收录效率不同，可能需要耐心等上几天。</p><h3 id="谷歌"><a href="#谷歌" class="headerlink" title="谷歌"></a>谷歌</h3><p>在 <a href="https://search.google.com/search-console" target="_blank" rel="noopener">Google Search Console</a> 中提交站点域名，此时会提供几种验证网站所有权的方法，展开 <strong>其他验证方法</strong> 中的 <strong>HTML 标记</strong>，然后将 <code>meta</code> 标签的 <code>content</code> 属性值复制到主题配置文件中：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/google-verify-site.png" alt="Google 选择验证方式" title="Google 选择验证方式"></p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Google Webmaster tools verification setting</span></span><br><span class="line"><span class="comment"># See: https://www.google.com/webmasters/</span></span><br><span class="line"><span class="attr">google_site_verification:</span> <span class="string">cEGDN99xe2gtAy97He-NH4ihW3Y4GrGQl_xTxp7p3sg</span></span><br></pre></td></tr></table></figure><p>执行 <code>hexo generate deploy</code> 重新部署站点，此时网站中就已经自动包含了用于验证身份的 <code>meta</code> 标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"google-site-verification"</span> <span class="attr">content</span>=<span class="string">"u9qDJxSM-SphoS5GXBhunqp1UXBY5H4FT6J1V2LxXqI"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>回到 Search Console 页面点击验证按钮，验证成功后将进入控制台，点击左侧 <strong>站点地图</strong> 菜单，在域名后输入 sitemap.xml 并提交，即可添加新的站点地图。</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/google-add-sitemap.png" alt="添加站点地图" title="添加站点地图"></p><p>在新版的 Search Console 中只能添加站点地图，却没有删除站点地图的接口，后来在 <a href="https://www.dear.today/731.html" target="_blank" rel="noopener">Google Search Console 删除站点地图方法</a> 一文中发现了解决办法：需要在 <a href="www.google.com/webmasters/tools/sitemap-list">旧版 Search Console</a> 中才能删除。</p><h3 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h3><p>在 <a href="https://ziyuan.baidu.com/site" target="_blank" rel="noopener">百度搜索资源平台</a> 中提交站点域名，勾选站点属性，最后一步中同样会要求验证网站的所有权身份，选择 <strong>HTML标签验证</strong>，然后将 <code>meta</code> 标签的 <code>content</code> 属性值复制到主题配置文件中：：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/baidu-verify-site.png" alt="Baidu 选择验证方式" title="Baidu 选择验证方式"></p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  Webmaster tools verification setting</span></span><br><span class="line"><span class="comment"># See: https://ziyuan.baidu.com/site/</span></span><br><span class="line"><span class="attr">baidu_site_verification:</span> <span class="string">UHED80Nn65</span></span><br></pre></td></tr></table></figure><p>执行 <code>hexo generate deploy</code> 重新部署站点，此时网站中就已经自动包含了用于验证身份的 <code>meta</code> 标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"baidu-site-verification"</span> <span class="attr">content</span>=<span class="string">"UHED80Nn65"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>回到百度站长管理平台点击完成验证按钮，验证成功后将进入控制台，在左侧 <strong>数据引入</strong> 菜单下点击 <strong>链接提交</strong>，在此可以看到除了sitemap之外还提供了多种推送站点内容的方案：</p><ul><li>主动推送：通过API接口推送站点内容，实时性较高</li><li>自动推送：在网页内添加JS脚本，每当页面被访问的时候会将页面url推送给百度，比较被动</li><li>sitemap：填写站点地图文件地址，百度会周期性的抓取其中的内容进行分析收录，收录效率比较低</li><li>手动提交：手动填写链接地址进行收录</li></ul><p>本站采用主动推送和自动推送相结合的形式推送站点内容。</p><h4 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h4><p>Hexo中可以借助 <a href="https://github.com/huiwang/hexo-baidu-url-submit" target="_blank" rel="noopener">hexo-baidu-url-submit</a> 插件快捷实现主动推送，在根目录下安装相关依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure><p>在站点配置文件中添加以下代码：</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 百度主动推送</span></span><br><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">100</span>  <span class="comment"># 提交最新的一个链接</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">yearito.cn</span>  <span class="comment"># 在百度站长平台中注册的域名</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">xxxxx</span>  <span class="comment"># 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span>  <span class="comment"># 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure><p>然后在站点配置文件中修改部署策略：</p><figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  # Deployment</span><br><span class="line">  ## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line"><span class="deletion">- deploy:</span></span><br><span class="line"><span class="deletion">-   type: git</span></span><br><span class="line"><span class="deletion">-   repo: git@yearito.cn:~/blog.yearito.git</span></span><br><span class="line"><span class="addition">+ deploy:</span></span><br><span class="line"><span class="addition">+ - type: git</span></span><br><span class="line"><span class="addition">+   repo: git@yearito.cn:~/blog.yearito.git</span></span><br><span class="line"><span class="addition">+ - type: baidu_url_submitter # 百度</span></span><br></pre></td></tr></table></figure><p>每次部署的时候将会自动推送网站内容到百度。</p><h4 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h4><p>Next主题中内置了一键开启百度自动推送的选项：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</span></span><br><span class="line"><span class="attr">baidu_push:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>开启后将会自动在页面中添加如下脚本用于百度推送：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</span></span><br><span class="line"><span class="javascript">    bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">    bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span></span><br><span class="line">  s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每次访问站点页面都会通过以上脚本推送本页url到百度。</p><h3 id="必应"><a href="#必应" class="headerlink" title="必应"></a>必应</h3><p>在 <a href="https://www.bing.com/toolbox/webmaster" target="_blank" rel="noopener">必应网站管理员</a> 中提交站点域名，此时可以同时输入 sitemap 文件链接，然后同样会进入网站所有权验证页面，在选择二中复制 <code>meta</code> 标签的 <code>content</code> 属性值到主题配置文件中：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/bing-verify-site.png" alt="Bing 选择验证方式" title="Bing 选择验证方式"></p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Bing Webmaster tools verification setting</span></span><br><span class="line"><span class="comment"># See: https://www.bing.com/webmaster/</span></span><br><span class="line"><span class="attr">bing_site_verification:</span> <span class="string">538CCB61234CB4A0B1A71C4581705DCD</span></span><br></pre></td></tr></table></figure><p>执行 <code>hexo generate deploy</code> 重新部署站点，此时网站中就已经自动包含了用于验证身份的 <code>meta</code> 标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msvalidate.01"</span> <span class="attr">content</span>=<span class="string">"538CCB61234CB4A0B1A71C4581705DCD"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>回到网站管理员页面点击验证按钮，验证成功后将进入控制台，可以在左侧导航菜单中点击 <strong>仪表板</strong> -&gt; <strong>配置我的网站</strong> -&gt; <strong> Sitemaps</strong> 查看已提交的站点地图文件的解析抓取情况。</p><h2 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h2><div class="note info"><p>本节参考 <a href="https://blog.paddings.cn/2016/08/16/blog/Hexo-NexT-SEO/" target="_blank" rel="noopener">Hexo NexT 主题SEO优化指南</a> 及<a href="https://sofree.cc/meta-keywords/" target="_blank" rel="noopener">SEO優化：不要使用Meta Keywords關鍵字</a></p></div><p>SEO（Search Engine Optimization）意指搜索引擎优化，可以帮助提高目标网站在搜索引擎中的排名，使得在别人搜索相关内容的时候更容易脱颖而出被人所发现，以提高个人站点的存在价值。</p><p>在Hexo中可以从以下几个方面进行简单的优化：</p><ul><li><p><strong>开启Next主题内置seo优化</strong></p><p>在主题配置文件中设置 <code>seo: true</code>，将会自动部署Next内置的seo优化方案，比如在 themes\next\layout\_partials\footer.swig 为链接添加 <code>rel=&quot;external nofollow&quot;</code> 属性。</p></li><li><p><strong>修改文章url地址格式</strong></p><p>默认的文章url地址为 <code>http://yoursite.com/:year/:month/:day/:title/</code>，这种url格式层级太多，并且如果文章标题是中文的话可能会发生转义而出现一堆乱码，不利于搜索引擎的爬取分析，因此建议在站点配置中修改 <code>permalink</code> 的格式来简化页面url，并尽量采用英文命名Markdown文件。</p></li></ul><p>在一些SEO优化的教程中会提到通过为页面添加 keywords 来影响搜索结果排名，事实上，在早期搜索引擎技术发展尚未成熟的时候，这样的做法确实有效，但当人们发现了这个规律后，就开始添加甚至无关的keywords来影响搜索结果排名，这一标签的滥用极大的降低了搜索引擎的准确度。随后，各大搜索引擎纷纷宣布不再将keywords作为搜索排名权重因子。</p><p>如Google就在2009年发布声明：<a href="https://webmasters.googleblog.com/2009/09/google-does-not-use-keywords-meta-tag.html" target="_blank" rel="noopener">Google does not use the keywords meta tag in web ranking</a>。声明中表示Google不会将keywords标签作为网页排名的依据，未来也不会改变这一政策。部分原文摘录如下：</p><blockquote><p>Our web search (the well-known search at Google.com that hundreds of millions of people use each day) disregards keyword metatags completely. They simply don’t have any effect in our search ranking at present.</p></blockquote><blockquote><p>Google has ignored the keywords meta tag for years and currently we see no need to change that policy.</p></blockquote><p>而Bing则表示过多的keywords会被作为垃圾讯号，可能导致你的网站被归类为垃圾网站，详见<a href="https://searchengineland.com/the-meta-keywords-tag-lives-at-bing-why-only-spammers-should-use-it-96874" target="_blank" rel="noopener">The Meta Keywords Tag Lives At Bing &amp; Why Only Spammers Should Use It</a>。</p><p>说起keywords，不得不提到另外一个与之相关的meta标签description。那么description是否有助于提升搜索排名呢？Google仍然给出了否定的答案：</p><blockquote><p>Even though we sometimes use the description meta tag for the snippets we show, we still don’t use the description meta tag in our ranking.</p></blockquote><p>虽然description不影响搜索排名，但搜索引擎通常会将description作为快照显示在搜索结果页面作为内容补充，因此合适的description还是有助于吸引读者的目光增加网站的点击率的。</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/search-snapshot.png" alt="搜索结果快照" title="搜索结果快照"></p><p>如果页面上没有description元标签的话，搜索引擎可能会从页面中自动抓取部分内容作为页面描述，至于说抓取质量可就没法保证了。</p><p>默认情况下，Next会使用 tags 作为页面 keywords，使用文章前两百个字符作为description。如果文章页面内含有 <code>&lt;!-- more --&gt;</code> 内容分隔符，则会使用分隔符之前的正文 description。用户也可以在Front-Matter中添加 keywords 和 description属性来手动指定页面meta标签内容。</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/keywords-description.png" alt="keywords &amp; description" title="keywords &amp; description"></p><p>越是容易被人为操控的SEO影响因子，影响力就会越来越低，所以：</p><blockquote class="blockquote-center"><p>最好的SEO优化是做好内容，最好的加薪办法是做好工作。</p></blockquote><h1 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h1><p>Nginx默认的404页面有些简陋，这里有两种自定义404页面的方案。</p><p><strong>第一种是仍沿用Hexo主题的页面框架，基于 page 布局搭建404页面。</strong></p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/404pages.png" alt="基于主题布局的404页面" title="基于主题布局的404页面"></p><p>在 source 目录下新建 404.md 文件，添加如下内容：</p><figure class="highlight html"><figcaption><span>source\404.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"text-align:center; font-size: 36px"</span>&gt;</span></span><br><span class="line">  404 页面未找到</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">onclick</span>=<span class="string">"window.history.back()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-angle-double-left fa-fw fa-lg"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    返回</span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  &#123;% btn /, 首页, home fa-fw fa-lg %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用户可以在此基础上自定义修改显示内容。</p><p><strong>第二种是完全抛弃掉Hexo的框架，搭建一个纯粹的自定义 404 HTML 页面。</strong></p><p>在 source 目录下新建 404.html 文件，自行编写页面结构与样式。你也可以直接在网上搜索404页面模板并下载使用，一般都不会太复杂，一个HTML文件就能搞定。例如 <a href="https://freefrontend.com/html-css-404-page-templates/" target="_blank" rel="noopener">28 HTML 404 Page Templates</a> 中就提供了很多精美的动态404页面。</p><p>此时打包的时候Hexo仍会渲染该文件，添加上复杂的主题框架与功能，用户可以修改站点配置文件以跳过渲染该文件：</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> <span class="number">404.</span><span class="string">html</span></span><br></pre></td></tr></table></figure><p>这样以来Hexo在打包的时候就只是将该文件复制到 public 目录下，而不做任何处理了。</p><p>以上仅仅是搭建起了404页面，至于如何在服务器返回404响应时重定向到该页面，还要依赖于Nginx的配置规则。修改VPS上的Nginx配置文件，添加一行404页面重定向规则：</p><figure class="highlight diff"><figcaption><span>/etc/nginx/nginx.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  http &#123;</span><br><span class="line">    include  mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">      listen  80;</span><br><span class="line">      root /var/www/blog.yearito;</span><br><span class="line"><span class="addition">+     error_page 404 /404.html;      </span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>修改后执行 <code>nginx -s reload</code> 重新加载配置文件即可生效。</p><h1 id="RSS链接"><a href="#RSS链接" class="headerlink" title="RSS链接"></a>RSS链接</h1><p>什么是RSS，RSS有什么用？第一次在别人的博客搭建教程中了解到这个概念的时候，同样的问题也困扰着我。通过订阅网站RSS可以第一时间发现站点内容的更新，而不用自己跑到站点去刷新，这是一个轮询到通知的转变。</p><div class="note "><p>虽然大致知道它的用途，但还是理解不够深刻，读者可以参考 <a href="http://www.ruanyifeng.com/blog/2006/01/rss.html" target="_blank" rel="noopener">如何使用RSS | 阮一峰</a> 来帮助理解这一概念。</p></div><p>在站点根目录下执行以下命令安装相关依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>然后站点概览中就会自动出现feed链接：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-deploy-to-VPS/rss-feed.png" alt="站点 feed 链接" title="站点 feed 链接"></p><p>在主题配置文件中不需要设置rss的值，置空即可，如果设置为 <code>true</code> 反而会导致如下报错：</p><blockquote><p><a href="https://github.com/iissnan/theme-next-docs/issues/99" target="_blank" rel="noopener">Unhandled rejection TypeError: path.substring is not a function</a></p></blockquote><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>本文介绍了在站点部署上线过程中将会遇到的各种技术问题，包括部署到VPS中的三步实现方案，优化页面加载性能的方法等。至此，Hexo搭建个人博客系列的最后一篇文章也已经完成，本站历经2个月的修修改改后也终于上线与大家见面了。如果你喜欢本站，可以在我的 <a href="http://github.com/Coodool/hexo-blog-yearito" target="_blank" rel="noopener">Github仓库</a> 上Fork或者Star。关于本系列文章如果有什么疑问与指正，也欢迎私信或者评论。</p><div class="reference-linking">参考链接</div><ul><li><a href="https://blog.yizhilee.com/post/deploy-hexo-to-vps/" target="_blank" rel="noopener">荔枝 | 通过 Git Hooks 自动部署 Hexo 到 VPS</a></li><li><a href="https://stackoverflow.com/questions/31729240/how-to-analyzing-page-speed-in-chrome-dev-tools" target="_blank" rel="noopener">How to analyzing Page Speed in Chrome Dev tools</a></li><li><a href="https://segmentfault.com/q/1010000011840948/a-1020000011947156" target="_blank" rel="noopener">chrome devtools 中 network 一栏中的 Finish 时间代表着什么</a></li><li><a href="https://help.hotjar.com/hc/en-us/articles/115009335727-Will-Hotjar-Slow-Down-My-Site-" target="_blank" rel="noopener">Will Hotjar Slow Down My Site?</a></li><li><a href="https://juejin.im/post/590b451a0ce46300588c43a0" target="_blank" rel="noopener">hexo高阶教程：教你怎么让你的hexo博客在搜索引擎中排第一</a></li><li><a href="https://blog.paddings.cn/2016/08/16/blog/Hexo-NexT-SEO/" target="_blank" rel="noopener">Hexo NexT 主题SEO优化指南</a></li><li><a href="https://sofree.cc/meta-keywords/" target="_blank" rel="noopener">SEO優化：不要使用Meta Keywords關鍵字</a></li><li><a href="https://webmasters.googleblog.com/2009/09/google-does-not-use-keywords-meta-tag.html" target="_blank" rel="noopener">Google does not use the keywords meta tag in web ranking</a></li><li><a href="http://www.ruanyifeng.com/blog/2006/01/rss.html" target="_blank" rel="noopener">如何使用RSS | 阮一峰</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://yearito-1256884783.image.myqcloud.com/thumbnails/dolphin.jpg!thumbnail&quot; alt=&quot;题图&quot; title=&quot;Photo by Felix Hernandez Dreamphography&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文主要介绍了在将Hexo博客部署上线过程中将会遇到的一系列问题。&lt;/p&gt;
&lt;p&gt;第一章主要介绍了将 Hexo 部署到 VPS 的方案，使得在本地推送更新后自动同步线上内容，部署过程主要分为三步走，首先从本地推送更新到远程仓库，然后触发 Git Hooks 将静态资源部署到 Web 根目录，最后启动 Nginx 服务器。&lt;/p&gt;
&lt;p&gt;第二章主要介绍了如何分析页面加载性能瓶颈，并提供了通过CDN和代码压缩合并等方法来优化页面加载速度的方案。&lt;/p&gt;
&lt;p&gt;第三章主要介绍了如何将站点提交到各大搜索引擎收录，并讨论了SEO相关话题。&lt;/p&gt;
&lt;p&gt;后续章节则零散的介绍了为站点添加404页面和RSS链接。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://freegale.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="博客" scheme="http://freegale.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://freegale.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客系列：进阶设置篇</title>
    <link href="http://freegale.github.io/posts/hexo-advanced-settings.html"/>
    <id>http://freegale.github.io/posts/hexo-advanced-settings.html</id>
    <published>2018-11-20T12:09:54.000Z</published>
    <updated>2020-11-05T13:20:38.456Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://yearito-1256884783.image.myqcloud.com/thumbnails/snow-mountain.jpg!thumbnail" alt="题图" title="Photo by Przemyslaw Kruk"></p><p>本篇文章介绍了如何为 Hexo 博客集成更多强大的功能。</p><p>第一章介绍了在站点中集成基于三方插件的数据统计服务，包括站点 PV 和 PU 统计、站点运行时间统计、文章 PV 统计、站点和文章字数统计等。</p><p>第二张介绍了针对于站点的个性化设置方案，包括添加搞怪的网页标题，添加站内搜索功能，添加热门文章排行榜页面，添加豆瓣阅读/电影/游戏等资料页面，添加在线聊天和即时反馈等功能。</p><p>第三章介绍了针对于文章页面的个性化设置方案，包括在文章末尾添加评论组件、评分组件、打赏入口、版权声明、推荐文章等，为文章中的图片添加点击灯箱效果，以及为文章设置访问密码。</p><a id="more"></a><h1 id="数据统计"><a href="#数据统计" class="headerlink" title="数据统计"></a>数据统计</h1><h2 id="站点访问量统计"><a href="#站点访问量统计" class="headerlink" title="站点访问量统计"></a>站点访问量统计</h2><p>该功能由 <a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a> 提供，效果如下图：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/busuanzi-site-footer.png" alt="站点访问统计" title="站点访问统计"></p><p>左侧数据表示独立访客数 UV，右侧数据表示网站浏览量 PV，访客数和浏览量的区别在于一个用户连续点击 n 篇文章，会记录 n 次浏览量，但只记录一次访客数。</p><div class="note "><p>由于不蒜子是基于域名来进行统计计算的，所以通过 localhost:4000 端口访问的时候统计数据 PV 和 UV 都会异常的大，属于正常现象。</p></div><p>在页脚布局模板文件首行添加如下代码：</p><figure class="highlight html"><figcaption><span>themes\next\layout_partial\footer.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">  <span class="attr">async</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在主题配置文件中做出如下修改：</p><figure class="highlight yaml"><figcaption><span>themes\next_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span> <span class="comment"># 访客数</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span> <span class="comment"># 访问量</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">eye</span></span><br></pre></td></tr></table></figure><p>刷新浏览器即可生效。</p><p>高阶用法：通过修改代码来自定义统计文案，如果你想使用本站统计文案，需要对不蒜子的代码做出如下修改：</p><figure class="highlight diff"><figcaption><span>themes\next\layout_third-party\analytics\busuanzi-counter.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  &#123;% if theme.busuanzi_count.total_visitors %&#125;</span><br><span class="line"><span class="deletion">-   &lt;span class="site-uv" title="&#123;&#123; __('footer.total_visitors') &#125;&#125;"&gt;</span></span><br><span class="line"><span class="addition">+   &lt;span class="site-uv"&gt;</span></span><br><span class="line"><span class="addition">+     &#123;&#123; __('footer.total_visitors', '&lt;span class="busuanzi-value" id="busuanzi_value_site_uv"&gt;&lt;/span&gt;') &#125;&#125;</span></span><br><span class="line"><span class="deletion">-     &lt;i class="fa fa-&#123;&#123; theme.busuanzi_count.total_visitors_icon &#125;&#125;"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="deletion">-     &lt;span class="busuanzi-value" id="busuanzi_value_site_uv"&gt;&lt;/span&gt;</span></span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;% if theme.busuanzi_count.total_views %&#125;</span><br><span class="line"><span class="deletion">-   &lt;span class="site-pv" title="&#123;&#123; __('footer.total_views') &#125;&#125;"&gt;</span></span><br><span class="line"><span class="addition">+   &lt;span class="site-pv"&gt;</span></span><br><span class="line"><span class="addition">+     &#123;&#123; __('footer.total_views', '&lt;span class="busuanzi-value" id="busuanzi_value_site_pv"&gt;&lt;/span&gt;') &#125;&#125;</span></span><br><span class="line"><span class="deletion">-     &lt;i class="fa fa-&#123;&#123; theme.busuanzi_count.total_views_icon &#125;&#125;"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="deletion">-     &lt;span class="busuanzi-value" id="busuanzi_value_site_pv"&gt;&lt;/span&gt;</span></span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>在自定义样式文件中添加如下样式：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//修改不蒜子数据颜色</span><br><span class="line"><span class="selector-class">.busuanzi-value</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改统计表述文案：</p><figure class="highlight yaml"><figcaption><span>themes\next\languages\zh-CN.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="string">"历经 %s 次回眸才与你相遇"</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="string">"我的第 %s 位朋友，"</span></span><br></pre></td></tr></table></figure><h2 id="站点运行时间统计"><a href="#站点运行时间统计" class="headerlink" title="站点运行时间统计"></a>站点运行时间统计</h2><div class="note info"><p>本章节受 <a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">reuixiy | 打造个性超赞博客 Hexo+NexT+GitHubPages 的超深度优化 #5.7</a> 启发，自行重构了代码逻辑。</p></div><p>在站点底部显示站点已运行时间，效果如下：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/site-running-time.png" alt="站点运行时间" title="站点运行时间"></p><p>在主题自定义布局文件中添加以下代码：</p><figure class="highlight html"><figcaption><span>thems\next\layout_custom\custom.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;# 页脚站点运行时间统计 #&#125; &#123;% if theme.footer.ages.enable %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/moment@2.22.2/moment.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/moment-precise-range-plugin@1.3.0/moment-precise-range.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ages = moment.preciseDiff(moment(),moment(&#123;&#123; theme.footer.ages.birthday &#125;&#125;,<span class="string">"YYYYMMDD"</span>));</span></span><br><span class="line"><span class="javascript">    ages = ages.replace(<span class="regexp">/years?/</span>, <span class="string">"年"</span>);</span></span><br><span class="line"><span class="javascript">    ages = ages.replace(<span class="regexp">/months?/</span>, <span class="string">"月"</span>);</span></span><br><span class="line"><span class="javascript">    ages = ages.replace(<span class="regexp">/days?/</span>, <span class="string">"天"</span>);</span></span><br><span class="line"><span class="javascript">    ages = ages.replace(<span class="regexp">/hours?/</span>, <span class="string">"小时"</span>);</span></span><br><span class="line"><span class="javascript">    ages = ages.replace(<span class="regexp">/minutes?/</span>, <span class="string">"分"</span>);</span></span><br><span class="line"><span class="javascript">    ages = ages.replace(<span class="regexp">/seconds?/</span>, <span class="string">"秒"</span>);</span></span><br><span class="line"><span class="xml">    ages = ages.replace(/\d+/g, '<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:&#123;&#123; theme.footer.ages.color &#125;&#125;"</span>&gt;</span>$&amp;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>');</span></span><br><span class="line"><span class="javascript">    div.innerHTML = <span class="string">`&#123;&#123; __('footer.age')&#125;&#125; <span class="subst">$&#123;ages&#125;</span>`</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span></span><br><span class="line"><span class="javascript">  <span class="comment">//插入到copyright之后</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> copyright = <span class="built_in">document</span>.querySelector(<span class="string">".copyright"</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.querySelector(<span class="string">".footer-inner"</span>).insertBefore(div, copyright.nextSibling);</span></span><br><span class="line">  timer();</span><br><span class="line"><span class="javascript">  setInterval(<span class="string">"timer()"</span>,<span class="number">1000</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>如果 custom.swig 文件不存在，需要手动新建并在布局页面中 body 末尾引入：</p><figure class="highlight diff"><figcaption><span>themes\next\layout_layout.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      ...</span><br><span class="line">      &#123;% include '_third-party/exturl.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/bookmark.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/copy-code.swig' %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+     &#123;% include '_custom/custom.swig' %&#125;</span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>修改主题配置文件：</p><figure class="highlight diff"><figcaption><span>themes\next_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  footer:</span><br><span class="line">    ...</span><br><span class="line"><span class="addition">+   ages:</span></span><br><span class="line"><span class="addition">+     # site running time</span></span><br><span class="line"><span class="addition">+     enable: true</span></span><br><span class="line"><span class="addition">+     # birthday of your site</span></span><br><span class="line"><span class="addition">+     birthday: 20181001</span></span><br><span class="line"><span class="addition">+     # color of number</span></span><br><span class="line"><span class="addition">+     color: "#1890ff"</span></span><br></pre></td></tr></table></figure><p>然后补全对应文案：</p><figure class="highlight diff"><figcaption><span>themes\next\languages\zh-CN.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  footer:</span><br><span class="line">    powered: "由 %s 强力驱动"</span><br><span class="line">    theme: 主题</span><br><span class="line"><span class="addition">+   age: 我已在此等候你</span></span><br><span class="line">    total_views: "历经 %s 次回眸才与你相遇"</span><br><span class="line">    total_visitors: "我的第 %s 位朋友，"</span><br></pre></td></tr></table></figure><p>刷新浏览器即可生效。</p><div class="note info"><p>日期统计计算功能由 <a href="https://momentjs.com/" target="_blank" rel="noopener">moment</a> 和 <a href="https://github.com/codebox/moment-precise-range" target="_blank" rel="noopener">moment-precise-range</a> 提供，也可用原生 JS Date 对象来实现。</p></div><h2 id="文章访问量统计"><a href="#文章访问量统计" class="headerlink" title="文章访问量统计"></a>文章访问量统计</h2><div class="note info"><p>本章节参考 <a href="https://notes.doublemine.me/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">夏末 | 为 NexT 主题添加文章阅读量统计功能</a></p></div><p>该功能基于 <a href="https://leancloud.cn" target="_blank" rel="noopener">LeanCloud</a> 提供后端数据服务，效果如下：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/post-pageviews.png" alt="文章访问量" title="文章访问量"></p><p>在 LeanCloud 上注册账号并创建应用，新建一个名为 Counter 的 Class，ACL 权限设置为 <strong>无限制</strong>：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/LeanCloud-Counter-class.png" alt="新建Counter类" title="新建Counter类"></p><div class="note info"><p>在 LeanCloud 中的 Class 可以理解为数据库中的数据表。Counter 用于存储记录文章访问量，记录是以 url 作为唯一依据的，所以根据默认的 permalink 组成结构，如果你更改了文章的发布日期和标题中的任意一个，都会造成文章阅读数值的清零重计。</p></div><p>在控制台的 <strong>设置</strong> -&gt; <strong>应用 Key</strong> 中获取 App ID 和 App Key 填入到主题配置文件中：</p><figure class="highlight yaml"><figcaption><span>themes\next_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="string">***&lt;app_id***</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="string">***&lt;app_key&gt;***</span></span><br><span class="line">  <span class="attr">security:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">betterPerformance:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>站点上线后可以在 <strong>设置</strong> -&gt; <strong>安全中心</strong> 中添加博客域名到 Web 安全域名中，设置后仅可在该域名下通过 JavaScript SDK 调用服务器资源，借以保护 LeanCloud 应用的数据安全。</p><p>如果想要自定义 PV 表述文案，可以修改文章布局模板中的相关代码：</p><figure class="highlight diff"><figcaption><span>themes\next\layout_macro\post.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  &#123;# LeanCould PageView #&#125;</span><br><span class="line">    ...</span><br><span class="line">    &#123;% if theme.post_meta.item_text %&#125;</span><br><span class="line"><span class="deletion">-     &lt;span class="post-meta-item-text"&gt;&#123;&#123;__('post.views') + __('symbol.colon') &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="addition">+     &lt;span class="post-meta-item-text"&gt;&#123;&#123;__('post.views')&#125;&#125; &lt;/span&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &lt;span class="leancloud-visitors-count"&gt;&lt;/span&gt;</span><br><span class="line"><span class="addition">+   &lt;span&gt;℃&lt;/span&gt;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>修改统计表述文案：</p><figure class="highlight yaml"><figcaption><span>themes/next/languages/zh-CN.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post:</span></span><br><span class="line">  <span class="attr">views:</span> <span class="string">热度</span></span><br></pre></td></tr></table></figure><p>刷新浏览器即可生效。</p><p>如果遇到如下报错，可能是你配置了 <code>security: true</code> 但又没有做好安全策略配置。</p><blockquote><p>阅读次数： Counter not initialized! See more at console err msg.</p></blockquote><p>有以下两种解决方案：</p><ul><li>下载安装 <a href="https://github.com/theme-next/hexo-leancloud-counter-security" target="_blank" rel="noopener">hexo-leancloud-counter-security</a> 插件</li><li>在主题配置中设置 <code>security: false</code></li></ul><p>个人推荐第二种，简单粗暴。</p><p>除了 LeanCloud，不蒜子也能提供文章阅读次数统计，但是不蒜子的统计结果只会在文章页显示，而不会显示在首页列表中，相关讨论可以参见 <a href="https://github.com/iissnan/hexo-theme-next/issues/801" target="_blank" rel="noopener">阅读计数。对比 LeanCloud 和不蒜子</a></p><h2 id="站点及文章字数统计"><a href="#站点及文章字数统计" class="headerlink" title="站点及文章字数统计"></a>站点及文章字数统计</h2><p>该功能由 <a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener">hexo-symbols-count-time</a> 提供，效果如下图：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/site-word-count.png" alt="站点字数统计" title="站点字数统计"></p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/post-word-count.png" alt="文章字数统计" title="文章字数统计"></p><p>在根目录下执行如下命令安装相关依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure><p>启用该功能需要同时修改站点配置文件和主题配置文件。</p><p>将如下配置项添加到<strong>站点配置文件</strong>中，这些配置项主要用于控制每项统计信息是否显示。</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span> <span class="comment"># 统计单篇文章字数</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">false</span> <span class="comment"># 取消估算单篇文章阅读时间</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span> <span class="comment"># 统计站点总字数</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">false</span> <span class="comment"># 取消估算站点总阅读时间</span></span><br></pre></td></tr></table></figure><p>在<strong>主题配置文件</strong>中做如下修改，这些配置项主要用于控制统计信息的显示样式。</p><figure class="highlight yaml"><figcaption><span>themes\next_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">false</span> <span class="comment"># 统计信息不换行显示</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span> <span class="comment"># 文章统计信息中是否显示“本文字数/阅读时长”等描述文字</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">true</span> <span class="comment"># 站点统计信息中是否显示“本文字数/阅读时长”等描述文字</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span> <span class="comment"># Average Word Length：平均字符长度</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span> <span class="comment"># Words Per Minute：阅读速度</span></span><br></pre></td></tr></table></figure><p>汉字的平均字符长度为 1.5，如果在文章中使用纯中文进行写作（没有混杂英文），那么推荐设置 <code>awl: 2</code> 及 <code>wpm: 300</code>，但是如果文章中存在英文，建议设置 <code>awl: 4</code> 及 <code>wpm: 275</code>。</p><p>因为修改了站点配置文件，所以需要重新启动服务器才能生效。</p><h1 id="站点个性化设置"><a href="#站点个性化设置" class="headerlink" title="站点个性化设置"></a>站点个性化设置</h1><h2 id="搞怪网页标题"><a href="#搞怪网页标题" class="headerlink" title="搞怪网页标题"></a>搞怪网页标题</h2><div class="note info"><p>本章节参考 <a href="https://diygod.me/2153/" target="_blank" rel="noopener">DIYgod | 我藏好了哦</a></p></div><p>离开和进入页面时动态修改 Tab 标签中的标题。</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/title-trick.png" alt="搞怪网页标题" title="搞怪网页标题"></p><p>在主题自定义布局文件中添加以下代码：</p><figure class="highlight html"><figcaption><span>themes\next\layout_custom\custom.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;# 搞怪网页标题 #&#125; &#123;% if theme.title_trick.enable %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> OriginTitile = <span class="built_in">document</span>.title;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> titleTime;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.addEventListener(<span class="string">"visibilitychange"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">document</span>.hidden) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.title = <span class="string">"&#123;&#123; theme.title_trick.leave &#125;&#125;"</span> + OriginTitile;</span></span><br><span class="line">      clearTimeout(titleTime);</span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.title = <span class="string">"&#123;&#123; theme.title_trick.enter &#125;&#125;"</span> + OriginTitile;</span></span><br><span class="line"><span class="javascript">      titleTime = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.title = OriginTitile;</span></span><br><span class="line">      &#125;, 2000);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>如果 custom.swig 文件不存在，需要手动新建并在布局页面中 body 末尾引入：</p><figure class="highlight diff"><figcaption><span>themes\next\layout_layout.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      ...</span><br><span class="line">      &#123;% include '_third-party/exturl.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/bookmark.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/copy-code.swig' %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+     &#123;% include '_custom/custom.swig' %&#125;</span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在主题配置文件中添加以下代码：</p><figure class="highlight yaml"><figcaption><span>themes\next_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a trick on website title</span></span><br><span class="line"><span class="attr">title_trick:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">leave:</span> <span class="string">"(つェ⊂)我藏好了哦~"</span></span><br><span class="line">  <span class="attr">enter:</span> <span class="string">"(*´∇｀*) 被你发现啦~"</span></span><br></pre></td></tr></table></figure><h2 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h2><p>该功能由 <a href="https://github.com/theme-next/hexo-generator-searchdb" target="_blank" rel="noopener">hexo-generator-searchdb</a> 提供，效果如下图：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/local-search.png" alt="站内搜索" title="站内搜索"></p><p>在根目录下执行以下命令安装相关依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>在<strong>主题配置</strong>文件中修改相关字段：</p><figure class="highlight yaml"><figcaption><span>themes\next_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span> <span class="comment"># 每次输入改变都执行搜索</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">3</span> <span class="comment"># 每篇文章显示的搜索结果数量</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>在<strong>站点配置</strong>文件中添加以下字段：</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span> <span class="comment"># 指定搜索范围，可选 post | page | all</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span> <span class="comment"># 指定页面内容形式，可选 html | raw (Markdown) | excerpt | more</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>在自定义样式文件中添加如下样式规则来增加搜索弹窗的页边距：</p><figure class="highlight css"><figcaption><span>themes\next\source\css_custom\custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//增加搜索弹窗的页边距</span><br><span class="line"><span class="selector-class">.local-search-popup</span> <span class="selector-id">#local-search-result</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">25px</span> <span class="number">40px</span></span><br><span class="line">  height: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">95px</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你同时在站点内启用了 wobblewindow 边缘摆动效果，则有可能会出现背景蒙版叠加在弹窗之前的问题，这种层级叠加异常的问题主要是因为 wobblewindow 中修改了弹窗父元素的 <code>position</code> 定位和 <code>z-index</code> 优先级，目前只能通过修改 localsearch 源码来修复该 Bug：</p><figure class="highlight diff"><figcaption><span>themes\next\layout_third-party\search\localsearch.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  $.ajax(&#123;</span><br><span class="line">    url: path,</span><br><span class="line">    dataType: isXml ? "xml" : "json",</span><br><span class="line">    async: true,</span><br><span class="line">    success: function(res) &#123;</span><br><span class="line">      // get the contents from search data</span><br><span class="line">      isfetched = true;</span><br><span class="line"><span class="deletion">-     $('.popup').detach().appendTo('.header-inner');</span></span><br><span class="line"><span class="addition">+     $('.popup').detach().appendTo('body');</span></span><br><span class="line">      var datas = isXml ? $("entry", res).map(function() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          title: $("title", this).text(),</span><br><span class="line">          content: $("content",this).text(),</span><br><span class="line">          url: $("url" , this).text()</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;).get() : res;</span><br><span class="line">      ...</span><br></pre></td></tr></table></figure><h2 id="热门文章排行榜"><a href="#热门文章排行榜" class="headerlink" title="热门文章排行榜"></a>热门文章排行榜</h2><div class="note info"><p>本章节部分思路参考 <a href="https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">nMask | Hexo 搭建博客教程 #7.16</a>，自行进行了代码重构。</p></div><p>添加文章阅读次数排行统计页面，效果如下图：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/top10.png" alt="热门文章排行榜" title="热门文章排行榜"></p><p>该功能同样是基于 LeanCloud 提供的后端服务支持。具体实现方案如下：</p><p>在站点目录下执行以下命令新建页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page top</span><br></pre></td></tr></table></figure><p>在主题配置文件中新增一项菜单入口：</p><figure class="highlight diff"><figcaption><span>themes\next_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  menu:</span><br><span class="line">    home: / || home</span><br><span class="line"><span class="addition">+   top: /top/ || signal</span></span><br><span class="line">    tags: /tags/ || tags</span><br><span class="line">    categories: /categories/ || th</span><br><span class="line">    archives: /archives/ || archive</span><br><span class="line">    about: /about/ || user</span><br></pre></td></tr></table></figure><p>在语言包中新增菜单中文：</p><figure class="highlight diff"><figcaption><span>themes\next\languages\zh-CN.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  menu:</span><br><span class="line">    home: 首页</span><br><span class="line">    archives: 归档</span><br><span class="line">    categories: 分类</span><br><span class="line">    tags: 标签</span><br><span class="line">    about: 关于</span><br><span class="line"><span class="addition">+   top: 排行榜</span></span><br></pre></td></tr></table></figure><p>然后在新增的排行榜页面内添加以下内容：</p><figure class="highlight html"><figcaption><span>source\top\index.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 热门文章Top 10</span><br><span class="line">comments: false</span><br><span class="line">date: 2018-10-30 00:54:50</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"post-rank"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.jsdelivr.net/npm/leancloud-storage@3.10.0/dist/av-min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> APP_ID = ******;  <span class="comment">//输入个人LeanCloud账号AppID</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> APP_KEY = ******;  <span class="comment">//输入个人LeanCloud账号AppKey</span></span></span><br><span class="line">  AV.init(&#123;</span><br><span class="line">    appId: APP_ID,</span><br><span class="line">    appKey: APP_KEY</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(<span class="string">'Counter'</span>);<span class="comment">//表名</span></span></span><br><span class="line"><span class="javascript">  query.descending(<span class="string">'time'</span>); <span class="comment">//结果按阅读次数降序排序</span></span></span><br><span class="line"><span class="javascript">  query.limit(<span class="number">10</span>);  <span class="comment">//最终只返回10条结果</span></span></span><br><span class="line"><span class="javascript">  query.find().then( <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> content = response.reduce( <span class="function">(<span class="params">accum, &#123;attributes&#125;</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">      accum += `<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"prefix"</span>&gt;</span>热度 $&#123;attributes.time&#125; ℃<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;attributes.url&#125;"</span>&gt;</span>$&#123;attributes.title&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>`</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> accum;</span></span><br><span class="line"><span class="javascript">    &#125;,<span class="string">""</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">"#post-rank"</span>).innerHTML = content;</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  .catch( <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(error);</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#post-rank</span> &#123;</span></span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-id">#post-rank</span> <span class="selector-class">.prefix</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#ff4d4f</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本是根据 <a href="https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">nMask | Hexo 搭建博客教程 #7.16</a> 引入 v0.6.1 的脚本来实现该功能，结果发现出现如下 Bug：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/LeanCloud-bug.png" alt="LeanCloud v0.6.1 Bug" title="LeanCloud v0.6.1 Bug"></p><p>后来根据 <a href="https://leancloud.cn/docs/leanstorage_guide-js.html" target="_blank" rel="noopener">LeanCloud | JavaScript SDK 安装指南</a> 引入 v3.10.0 的最新脚本，使用过程中虽然功能正常，但是控制台有报错信息:</p><blockquote><p>Uncaught TypeError: Cannot redefine property: applicationId</p></blockquote><h2 id="豆瓣阅读-电影-游戏"><a href="#豆瓣阅读-电影-游戏" class="headerlink" title="豆瓣阅读/电影/游戏"></a>豆瓣阅读/电影/游戏</h2><div class="note info"><p>本章节参考 <a href="https://github.com/mythsman/hexo-douban" target="_blank" rel="noopener">mythsman/hexo-douban README.md</a></p></div><p>为站点添加豆瓣阅读/电影/游戏页面，效果如下：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/douban-movies.png" alt="豆瓣电影" title="豆瓣电影"></p><p>在根目录下执行以下命令安装相关依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-douban --save</span><br></pre></td></tr></table></figure><p>在站点配置文件中添加以下内容：</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">douban:</span></span><br><span class="line">  <span class="attr">user:</span> <span class="comment"># 个人豆瓣ID</span></span><br><span class="line">  <span class="attr">builtin:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">book:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">"This is my book title"</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">"This is my book quote"</span></span><br><span class="line">  <span class="attr">movie:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">"This is my movie title"</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">"This is my movie quote"</span></span><br><span class="line">  <span class="attr">game:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">"This is my game title"</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">"This is my game quote"</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><ul><li>user: 填写豆瓣 ID。登陆豆瓣后点击<strong>个人主页</strong>，此时 url 中最后一段即是用户 ID，一般情况下会是一段数字，如果设置了个人域名的话，则个人域名即为 ID。</li><li>builtin: 是否将生成页面的功能嵌入 <code>hexo s</code> 和 <code>hexo g</code> 中。</li><li>timeout: 爬取数据的超时时间。</li></ul><p>如果只想生成某一个页面（比如只生成读书页面），把其他的配置项注释掉即可。</p><p>在主题配置文件中新增菜单入口：</p><figure class="highlight diff"><figcaption><span>themes\next_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  menu:</span><br><span class="line">    home: / || home</span><br><span class="line">    tags: /tags/ || tags</span><br><span class="line">    categories: /categories/ || th</span><br><span class="line">    archives: /archives/ || tasks</span><br><span class="line"><span class="addition">+   books: /books/ || book</span></span><br><span class="line"><span class="addition">+   movies: /movies/ || video-camera</span></span><br><span class="line"><span class="addition">+   games: /games/ || gamepad</span></span><br></pre></td></tr></table></figure><p>在语言包中新增菜单中文：</p><figure class="highlight diff"><figcaption><span>themes\next\language\zh_CN.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  menu:</span><br><span class="line">    home: 首页</span><br><span class="line">    archives: 归档</span><br><span class="line">    categories: 分类</span><br><span class="line">    tags: 标签</span><br><span class="line"><span class="addition">+   movies: 电影</span></span><br><span class="line"><span class="addition">+   books: 读书</span></span><br><span class="line"><span class="addition">+   games: 游戏</span></span><br></pre></td></tr></table></figure><p>然后在根目录下执行以下命令生成豆瓣阅读/电影/游戏页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo douban</span><br></pre></td></tr></table></figure><p>可选参数:</p><ul><li>-b | --books: 只生成豆瓣读书页面</li><li>-m | --movies: 只生成豆瓣电影页面</li><li>-g | --games: 只生成豆瓣游戏页面</li></ul><p>执行命令后，插件会根据用户提供的 ID 爬取豆瓣中的数据信息并在 <code>public</code> 目录下生成对应的页面，当服务器启动或部署后会将页面显示在对应的菜单路由下。</p><p>如果在站点配置中设置了 <code>douban.builtin: false</code>，则每次豆瓣数据变动后需要手动执行一次 <code>hexo douban</code> 来刷新页面数据。如果设置了 <code>douban.builtin: true</code>，则每次执行 <code>hexo s</code> 和 <code>hexo g</code> 的时候将会自动同时执行 <code>hexo douban</code> 命令，但这样可能会增加打包编译的时间。建议如果豆瓣数据变动不频繁的情况下该项设为 <code>false</code> 即可。</p><p>通常大家都喜欢用 <code>hexo d</code> 来作为 <code>hexo deploy</code> 命令的简化，但是当安装了 <code>hexo douban</code> 之后， <code>hexo d</code> 就会有歧义而无法执行，因为 <code>hexo douban</code> 跟 <code>hexo deploy</code> 的 Alias 都是 <code>hexo d</code>。</p><h2 id="在线聊天"><a href="#在线聊天" class="headerlink" title="在线聊天"></a>在线聊天</h2><p>在线聊天算是一个比较成熟的 SaaS 商业应用了，业内产品如 <a href="https://www.tidiochat.com/" target="_blank" rel="noopener">Tidio</a>、 <a href="https://talkjs.com/" target="_blank" rel="noopener">TalkJS</a>、<a href="https://www.intercom.com/" target="_blank" rel="noopener">Intercom</a>、<a href="https://www.tawk.to/" target="_blank" rel="noopener">tawk.to</a> 等，使用体验都很好，交互界面也很干净别致。经过比较，本站最终选择了 Tidio：</p><ul><li>在个人博客这种业务场景中，几乎用不到它的收费功能，可以算是终身免费了。</li><li>Tidio 提供了多种消息回复渠道，包括网页、桌面应用、iOS/Android APP（需要 Google play 服务支持）。</li><li>除了在线聊天，Tidio 还可以在线发送邮件，以及关联接收 Fackbook 消息。</li><li>在几款产品的界面风格中，还是 Tidio 看起来更加优雅一些，深得我爱。</li></ul><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/Tidio.png" alt="Tidio 界面" title="Tidio 界面"></p><p>首先需要<a href="https://www.tidiochat.com/panel/login" target="_blank" rel="noopener">注册 Tidio 账号</a>，根据引导填写应用信息。进入控制台后，在 <strong>SETTINGS</strong> -&gt; <strong>Developer</strong> -&gt; <strong>Project data</strong> 中获取到 Public Key：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/tidio-public-key.png" alt="Tidio Public Key" title="Tidio Public Key"></p><p>在主题配置文件下添加以下代码并补全 Public Key：</p><figure class="highlight yaml"><figcaption><span>themes\next_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tidio online chat</span></span><br><span class="line"><span class="comment"># see: https://www.tidiochat.com</span></span><br><span class="line"><span class="attr">tidio:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">key:</span> <span class="comment"># Public_Key</span></span><br></pre></td></tr></table></figure><p>在主题自定义布局文件中添加以下代码：</p><figure class="highlight html"><figcaption><span>themes\next\layout_custom\custom.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;# Tidio 在线联系功能 #&#125; &#123;% if theme.tidio.enable %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"//code.tidio.co/&#123;&#123; theme.tidio.key &#125;&#125;.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>为避免代码加载阻塞页面渲染，需要为脚本添加 <code>async</code> 属性使其异步加载。</p><p>如果 custom.swig 文件不存在，需要手动新建并在布局页面中 body 末尾引入：</p><figure class="highlight diff"><figcaption><span>themes\next\layout_layout.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      ...</span><br><span class="line">      &#123;% include '_third-party/exturl.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/bookmark.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/copy-code.swig' %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+     &#123;% include '_custom/custom.swig' %&#125;</span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>刷新页面即可在右下角看到 Tidio 的会话标志了。接下来可以在 Tidio 控制台的 <strong>Channel</strong> -&gt; <strong>Live chat</strong> -&gt; <strong>Appearance</strong> 中根据提示定制聊天对话框的主题外观和语言包：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/Tidio-appearance.png" alt="定制Tidio样式与功能" title="定制Tidio样式与功能"></p><h2 id="行为监测与反馈"><a href="#行为监测与反馈" class="headerlink" title="行为监测与反馈"></a>行为监测与反馈</h2><p><a href="https://www.hotjar.com/" target="_blank" rel="noopener">Hotjar</a> 是一款轻量级的监测分析工具，能够提供用户行为监测和用户反馈分析，相比 Google Analysis 而言，它没有复杂的监测指标与分析报表，更加的简单实用，并且为免费用户提供 2000pv/day 的数据采集服务，适用于小型网站或个人博客的监测分析。</p><p>Hotjar 主要提供<strong>ANALYTICS</strong>和<strong>FEEDBACK</strong>两大类服务。</p><p>ANALYTICS 主要用于用户交互行为的监测分析，属于客观分析，包括以下四项具体功能：</p><ul><li>Heatmaps: 通过热力图可视化用户的鼠标交互行为，帮助理解用户动机和需求。</li><li>Recording: 记录用户在站点的行为轨迹，了解应用的可用性以及用户遭遇的问题。</li><li>Funnels: 记录每个页面或者步骤的用户流失率。</li><li>Forms: 记录表单中每一项输入的完成率，完成时间以及用户流失率。</li></ul><p>FEEDBACK 主要为用户提供反馈渠道，收集用户观点与数据，属于主观分析，包括以下四项具体功能：</p><ul><li>Incoming: 即时反馈，了解用户对页面的评价。</li><li>Polls: 投票反馈，获取某个问题的用户答案。</li><li>Surveys: 问卷调查，以问卷形式获取用户反馈。</li><li>Recruiters: 获取用户信息，招募用户用于用户调查或测试反馈。</li></ul><p>Hotjar 通过以上八项具体而实用的功能为用户提供主客观相结合的监测分析服务，可以说它是所有轻量级分析工具中唯一做到了主客观相结合的，同时也是所有主客观分析工具中，做的最轻量的。</p><div class="note info"><p>更多功能介绍请参考 <a href="https://www.hotjar.com/tour" target="_blank" rel="noopener">Hotjar Features</a></p></div><p>本站点中应用了 Incoming 即时反馈功能，读者可以通过该渠道评价页面或者提交勘误，点击悬挂在屏幕右侧的 Feedback 按钮弹出对话框，点击人物头像评价后将会跳转到如下界面：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/hotjar-feedback.png" alt="Hotjar Incoming Feedback" title="Hotjar Incoming Feedback"></p><p>你可以在此页面输入反馈内容，并通过点击左下角的按钮在当前页面上标识目标元素，之后 hotjar 会将反馈内容连同带有高亮标识的页面截图一起提交到后台：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/hotjar-feedback-screenshot.png" alt="Incoming Feedback with screenshot " title="Incoming Feedback with screenshot"></p><div class="note info"><p>更多关于 Incoming Feedback 的介绍请参考 <a href="https://www.hotjar.com/incoming-feedback" target="_blank" rel="noopener">Incoming Feedback by Hotjar</a></p></div><p>在站点中集成 Hotjar 的各项功能，需要先 <a href="https://insights.hotjar.com/register" target="_blank" rel="noopener">注册 Hotjar 账号</a>，根据指引一步步填写站点信息，然后在控制面板首页中获取 site ID：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/hotjar-site-id.png" alt="Hotjar site ID" title="Hotjar site ID"></p><p>在主题配置文件下添加以下代码并补全 site ID：</p><figure class="highlight yaml"><figcaption><span>themes\next_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hotjar</span></span><br><span class="line"><span class="comment"># see: https://www.hotjar.com/</span></span><br><span class="line"><span class="attr">hotjar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">siteID:</span> <span class="comment"># site ID</span></span><br></pre></td></tr></table></figure><p>在主题自定义布局文件中添加以下代码：</p><figure class="highlight html"><figcaption><span>themes\next\layout_custom\custom.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;# hotjar 页面反馈 #&#125; &#123;% if theme.hotjar.enable %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  (<span class="function"><span class="keyword">function</span>(<span class="params">h,o,t,j,a,r</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    h.hj=h.hj||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;(h.hj.q=h.hj.q||[]).push(<span class="built_in">arguments</span>)&#125;;</span></span><br><span class="line">    h._hjSettings=&#123;hjid:&#123;&#123; theme.hotjar.siteID &#125;&#125;,hjsv:6&#125;;</span><br><span class="line"><span class="javascript">    a=o.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    r=o.createElement(<span class="string">'script'</span>);r.async=<span class="number">1</span>;</span></span><br><span class="line">    r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;</span><br><span class="line">    a.appendChild(r);</span><br><span class="line"><span class="javascript">  &#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">'https://static.hotjar.com/c/hotjar-'</span>,<span class="string">'.js?sv='</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>如果 custom.swig 文件不存在，需要手动新建并在布局页面中 body 末尾引入：</p><figure class="highlight diff"><figcaption><span>themes\next\layout_layout.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      ...</span><br><span class="line">      &#123;% include '_third-party/exturl.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/bookmark.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/copy-code.swig' %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+     &#123;% include '_custom/custom.swig' %&#125;</span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>如此即可将 Hotjar 嵌入到站内，接下来在 Hotjar 控制台菜单中点击 Incoming，然后根据引导一步步配置即时反馈服务即可：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/hotjar-setup-incoming.png" alt="配置 Incoming Feedback" title="配置 Incoming Feedback"></p><div class="note info"><p>如果你在本站内发现了错别字、病句、失效链接、代码缩进不一致，可以通过页面右侧的 Feedback 反馈。</p></div><h1 id="文章页面个性化设置"><a href="#文章页面个性化设置" class="headerlink" title="文章页面个性化设置"></a>文章页面个性化设置</h1><h2 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h2><p>Next 支持多款评论系统：</p><ul><li><a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a>：欧美 UI 风格，支持 Tweet、Facebook 等国外社交软件的三方登陆和一键分享。 <a href="https://blog.disqus.com/disqus-welcomes-the-spruce" target="_blank" rel="noopener">Demo</a></li><li><a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">gitment</a>：必须用 github 账号登陆才能评论，支持 Markdown 语法，与 github issues 页面风格一致 <a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Demo</a></li><li><a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a>：支持匿名评论，支持 Markdown 语法，界面简洁美观</li><li><a href="http://changyan.kuaizhan.com/" target="_blank" rel="noopener">畅言</a>：国产评论系统，可区分热评和最新评论，论坛贴吧风</li><li><a href="https://www.livere.com/" target="_blank" rel="noopener">来必力</a>：支持插入图片和 GIF，支持国内外多种社交媒体的三方登陆 <a href="https://www.livere.com/city-demo" target="_blank" rel="noopener">Demo</a></li></ul><p>博客的评论系统不需要太过复杂的功能，我的要求是一定要轻量级，足够简洁美观，并且支持 Markdown 语法，因此我首选 Valine 和 gitment，这两个评论系统都是由国内个人开发的，在此向开发者致敬。</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/valine-comments.png" alt="Valine 评论系统" title="Valine 评论系统"></p><p>Next 已经内置了 Valine 组件，在主题配置文件中开启评论功能即可，同时，由于 Valine 是基于 Leancloud 提供后端服务的，所以需要填写 LeanCloud 的 App ID 和 App Key。</p><figure class="highlight yaml"><figcaption><span>themes\next_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span>  <span class="string">***&lt;app_id***</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="string">***&lt;app_key&gt;***</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span>  <span class="comment"># 收到新评论是否邮件通知</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span>  <span class="comment"># 是否开启验证码</span></span><br><span class="line">  <span class="attr">placeholder:</span>  <span class="comment"># 默认填充文字</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span>  <span class="comment"># 设置默认评论列表</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail</span>  <span class="comment"># 评论区头部表单</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span>  <span class="comment"># 每页评论数</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span>  <span class="comment"># 同时开启文章阅读次数统计</span></span><br></pre></td></tr></table></figure><p>Valine 也附带了阅读统计功能，可以在 Valine 配置项中设置 <code>visitor: true</code> 开启该功能。为避免后端服务冲突，建议不要同时启用 Valine 的阅读统计功能和 <code>leancloud_visitors</code>。</p><div class="note info"><p>关于如何在收到评论时发送邮件提醒请参照 <a href="http://www.zhaojun.im/hexo-valine-admin/" target="_blank" rel="noopener">赵俊 | Hexo 优化 — Valine 扩展之邮件通知</a></p></div><p>Next 暂时不支持通过配置的方式隐藏文章标题下的评论数量，如要隐藏，可在自定义样式文件中添加如下代码：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//屏蔽标题下的评论数量</span><br><span class="line"><span class="selector-class">.post-comments-count</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你是轻度洁癖患者，想要隐藏评论区的浏览器和操作系统版本号以拥有更加干净的评论界面，可在自定义样式文件中添加如下代码：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//屏蔽评论组件的多余信息</span><br><span class="line"><span class="selector-id">#comments</span> <span class="selector-class">.vsys</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文末版权声明"><a href="#文末版权声明" class="headerlink" title="文末版权声明"></a>文末版权声明</h2><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/post-copyright.png" alt="文章版权声明" title="文章版权声明"></p><p>在主题配置文件中开启文章底部的版权声明，版权声明默认使用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">CC BY-NC-SA 4.0</a> 许可协议，用户可以根据自身需要修改 <code>licence</code> 字段变更协议。</p><figure class="highlight yaml"><figcaption><span>themes\next_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">&lt;a</span> <span class="string">href="https://creativecommons.org/licenses/by-nc-sa/4.0/"</span> <span class="string">rel="external</span> <span class="string">nofollow"</span> <span class="string">target="_blank"&gt;CC</span> <span class="string">BY-NC-SA</span> <span class="number">4.0</span><span class="string">&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><p>默认版权声明中只有 <strong>本文作者</strong>、<strong>本文链接</strong>、<strong>版权声明</strong> 三项，如果你想添加更多内容，如 <strong>创建时间</strong>、<strong>修改时间</strong>、<strong>引用链接</strong> 等，需要修改版权声明的相关代码：</p><figure class="highlight html"><figcaption><span>themes\next\layout_macro\post-copyright.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JS库 clipboard 拷贝内容到粘贴板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/clipboard.js/2.0.1/clipboard.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JS库 sweetalert 显示提示信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/sweetalert/dist/sweetalert.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"post-copyright"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 本文标题 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; __('post.copyright.title') + __('symbol.colon') &#125;&#125; <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    &#123;&#123; post.title &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 本文作者 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-author"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; __('post.copyright.author') + __('symbol.colon') &#125;&#125; <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    &#123;&#123; post.author | default(author) &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 创建时间 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; __('post.created') + __('symbol.colon') &#125;&#125; <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    &#123;&#123; post.date.format("YYYY年MM月DD日 - HH时MM分") &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 修改时间 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; __('post.modified') + __('symbol.colon') &#125;&#125; <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    &#123;&#123; post.updated.format("YYYY年MM月DD日 - HH时MM分") &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 引用链接 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-link"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; __('post.copyright.link') + __('symbol.colon') &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; post.url | default(post.permalink) &#125;&#125;"</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; post.title &#125;&#125;"</span></span></span><br><span class="line"><span class="tag">      &gt;</span>&#123;&#123; post.url | default(post.permalink) &#125;&#125;<span class="tag">&lt;/<span class="name">a</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"copy-path"</span> <span class="attr">title</span>=<span class="string">"点击复制引用链接"</span></span></span><br><span class="line"><span class="tag">      &gt;</span><span class="tag">&lt;<span class="name">i</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"cursor: pointer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"fa fa-clipboard"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">data-clipboard-text</span>=<span class="string">"[&#123;&#123; post.author | default(author) &#125;&#125;'s Blog | &#123;&#123; post.title &#125;&#125;](&#123;&#123; post.permalink &#125;&#125;)"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">aria-label</span>=<span class="string">"&#123;&#123; __('post.copy_success') &#125;&#125;"</span></span></span><br><span class="line"><span class="tag">      &gt;</span><span class="tag">&lt;/<span class="name">i</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 版权声明 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-license"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span></span></span><br><span class="line"><span class="tag">      &gt;</span>&#123;&#123; __('post.copyright.license_title') + __('symbol.colon') &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    &#123;&#123; __('post.copyright.license_content', theme.post_copyright.license) &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> clipboard = <span class="keyword">new</span> ClipboardJS(<span class="string">".fa-clipboard"</span>);</span></span><br><span class="line"><span class="javascript">  clipboard.on(<span class="string">"success"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> message = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span></span><br><span class="line">    message.innerHTML =</span><br><span class="line"><span class="xml">      '<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-circle message-icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"message-content"</span>&gt;</span>' +</span></span><br><span class="line"><span class="javascript">      target.trigger.getAttribute(<span class="string">"aria-label"</span>) +</span></span><br><span class="line"><span class="javascript">      <span class="string">"&lt;/span&gt;"</span>;</span></span><br><span class="line">    swal(&#123;</span><br><span class="line">      content: message,</span><br><span class="line"><span class="javascript">      className: <span class="string">"copy-success-message"</span>,</span></span><br><span class="line">      timer: 1000,</span><br><span class="line"><span class="javascript">      button: <span class="literal">false</span></span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在版权样式文件中添加如下样式：</p><figure class="highlight css"><figcaption><span>themes\next\source\css_common\components\post\post-copyright.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.swal-overlay</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.copy-success-message</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">12px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.15</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">width</span>: auto;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">16</span>x <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.copy-success-message</span> <span class="selector-class">.swal-content</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.copy-success-message</span> <span class="selector-class">.message-icon</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#52c41a</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.copy-success-message</span> <span class="selector-class">.message-content</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后补全版权信息文案字段：</p><figure class="highlight yaml"><figcaption><span>themes/next/languages/zh-CN.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post:</span></span><br><span class="line">  <span class="attr">created:</span> <span class="string">创建时间</span></span><br><span class="line">  <span class="attr">modified:</span> <span class="string">修改时间</span></span><br><span class="line">  <span class="attr">copy_success:</span> <span class="string">复制成功</span></span><br><span class="line">  <span class="attr">copyright:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">本文标题</span></span><br><span class="line">    <span class="attr">author:</span> <span class="string">本文作者</span></span><br><span class="line">    <span class="attr">link:</span> <span class="string">引用链接</span></span><br><span class="line">    <span class="attr">license_title:</span> <span class="string">版权声明</span></span><br><span class="line">    <span class="attr">license_content:</span> <span class="string">"本博客所有文章除特别声明外，均采用 %s 许可协议。转载请注明出处！"</span></span><br></pre></td></tr></table></figure><div class="note info"><p>点击引用链接后的图标 <i class="fa fa-clipboard"></i> 即可快捷复制 Markdown 引用链接，并将弹出复制成功的提示语。该功能主要借助 <a href="https://clipboardjs.com/" target="_blank" rel="noopener">clipboard</a> 和 <a href="https://sweetalert.js.org/" target="_blank" rel="noopener">sweetalert</a> 两个 js 库来实现，并参考 <a href="https://ant.design/components/message/" target="_blank" rel="noopener">antDesign | message 组件</a> 重写了弹框样式。</p></div><p>在实际使用过程中，并非每篇文章都需要版权声明，如果转载了别人的文章，文末再出现个人版权声明就不太合适。此时可在 Front-Matter 中设定变量 <code>copyright</code> 用于控制是否显示版权信息。修改文章布局模板中相关代码，使得只有当主题配置文件中 <code>post_copyright.enable</code> 字段和 <code>page.copyright</code> 字段同时为 <code>true</code> 时才会插入版权声明：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_macro/post.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- &#123;% if theme.post_copyright.enable and not is_index %&#125;</span></span><br><span class="line"><span class="addition">+ &#123;% if theme.post_copyright.enable and page.copyright and not is_index %&#125;</span></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;% include 'post-copyright.swig' with &#123; post: post &#125; %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>为了批量为每篇新文章设定该变量并赋默认值，可以修改草稿模板内容，这样以来每篇草稿发布为正文后都会默认显示底部版权信息：</p><figure class="highlight diff"><figcaption><span>scaffolds\draft.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  title: &#123;&#123; title &#125;&#125;</span><br><span class="line">  tags:</span><br><span class="line">  categories:</span><br><span class="line"><span class="addition">+ copyright: true</span></span><br></pre></td></tr></table></figure><h2 id="添加打赏功能"><a href="#添加打赏功能" class="headerlink" title="添加打赏功能"></a>添加打赏功能</h2><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/post-reward.png" alt="文章打赏功能" title="文章打赏功能"></p><p>启用主题配置文件中的打赏相关字段，并将个人收款码图片置于 themes\next\source\images\ 目录下，注意保持图片命名与配置文件中一致：</p><figure class="highlight yaml"><figcaption><span>themes\next_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reward_comment:</span></span><br><span class="line"><span class="attr">wechatpay:</span> <span class="string">/images/wechatpay.png</span></span><br><span class="line"><span class="attr">alipay:</span> <span class="string">/images/alipay.jpg</span></span><br></pre></td></tr></table></figure><p>如果要关闭悬停收款码上的文字抖动效果，可以在自定义样式文件中添加以下代码：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//关闭打赏收款码的文字抖动效果</span><br><span class="line"><span class="selector-id">#QR</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并非每个页面都需要开启打赏功能，可以在 Front-Matter 中添加 <code>reward</code> 字段来控制是否在本文章中添加打赏信息，然后修改文章布局模板中相关的判定条件：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_macro/post.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- &#123;% if (theme.alipay or theme.wechatpay or theme.bitcoin) and not is_index %&#125;</span></span><br><span class="line"><span class="addition">+ &#123;% if ( post.reward and (theme.alipay or theme.wechatpay or theme.bitcoin) and not is_index %&#125;</span></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;% include 'reward.swig' %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>为了方便可在草稿模板 scaffolds\draft.md 中统一添加 <code>reward</code> 字段默认值：</p><figure class="highlight diff"><figcaption><span>scaffolds\draft.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  title: &#123;&#123; title &#125;&#125;</span><br><span class="line">  tags:</span><br><span class="line">  categories:</span><br><span class="line"><span class="addition">+ reward: true</span></span><br></pre></td></tr></table></figure><h2 id="添加图片灯箱"><a href="#添加图片灯箱" class="headerlink" title="添加图片灯箱"></a>添加图片灯箱</h2><p>添加灯箱功能，实现点击图片后放大聚焦图片，并支持幻灯片播放、全屏播放、缩略图、快速分享到社交媒体等，该功能由 <a href="https://github.com/fancyapps/fancybox" target="_blank" rel="noopener">fancyBox</a> 提供，效果如下：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/fancybox.png" alt="fancyBox 灯箱" title="fancyBox 灯箱"></p><p>在根目录下执行以下命令安装相关依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/theme-next/theme-next-fancybox3 themes/next/source/lib/fancybox</span><br></pre></td></tr></table></figure><p>在主题配置文件中设置 <code>fancybox: true</code>：</p><figure class="highlight yaml"><figcaption><span>themes\next_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>刷新浏览器即可生效。</p><h2 id="相关文章推荐"><a href="#相关文章推荐" class="headerlink" title="相关文章推荐"></a>相关文章推荐</h2><p>该功能由 <a href="https://github.com/tea3/hexo-related-popular-posts" target="_blank" rel="noopener">hexo-related-popular-posts</a> 插件提供，效果如下：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/related-post.png" alt="相关文章推荐" title="相关文章推荐"></p><p>在站点根目录中执行以下命令安装依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-related-popular-posts --save</span><br></pre></td></tr></table></figure><p>在主题配置文件中开启相关文章推荐功能：</p><figure class="highlight yaml"><figcaption><span>themes\next_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">related_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">title:</span> <span class="comment"># custom header, leave empty to use the default one</span></span><br><span class="line">  <span class="attr">display_in_home:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="attr">maxCount:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p>此时会在每篇文章结尾根据标签相关性和内容相关性来推荐相关文章。</p><p>事实上并非每篇文章都需要开启该功能，可在文章 Front-Matter 中设置 <code>related_posts</code> 字段来控制是否在文末显示相关文章，然后修改文章布局模板中相关的判定条件：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_macro/post.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- &#123;% if theme.related_posts.enable and (theme.related_posts.display_in_home or not is_index) %&#125;</span></span><br><span class="line"><span class="addition">+ &#123;% if theme.related_posts.enable and (theme.related_posts.display_in_home or not is_index) and post.related_posts %&#125;</span></span><br><span class="line">    &#123;% include 'post-related.swig' with &#123; post: post &#125; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>为了方便可在草稿模板 scaffolds\draft.md 中统一添加 <code>related_posts</code> 字段默认值：</p><figure class="highlight diff"><figcaption><span>scaffolds\draft.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  title: &#123;&#123; title &#125;&#125;</span><br><span class="line">  tags:</span><br><span class="line">  categories:</span><br><span class="line"><span class="addition">+ related_posts: true</span></span><br></pre></td></tr></table></figure><h2 id="文章评分"><a href="#文章评分" class="headerlink" title="文章评分"></a>文章评分</h2><p><a href="https://widgetpack.com" target="_blank" rel="noopener">widgetpack</a> 是一款轻量级的插件，提供四项具体的功能：</p><ul><li>Comments: 评论系统，类似于留言板</li><li>Reviews: 评价系统，类似于商品评价</li><li>Rating: 星级评分系统</li><li>Google Reviews: 关联展示 Google Rating</li></ul><p>Next 主题中已经集成了 widgetpack 的星级评分系统，用户无须再安装或引入插件脚本，只需在 widgetpack 中注册账号并修改主题配置即可，应用效果如下：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/rating.png" alt="文章评分组件" title="文章评分组件"></p><p>在 <a href="https://widgetpack.com" target="_blank" rel="noopener">widgetpack</a> 中注册账号，根据引导填写应用名称和域名创建应用，创建后可在页面左上角看到应用 id。</p><p>在主题配置文件中开启评分功能，填写应用 id，并设置评分颜色：</p><figure class="highlight yaml"><figcaption><span>themes\next_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Star rating support to each article.</span></span><br><span class="line"><span class="comment"># To get your ID visit https://widgetpack.com</span></span><br><span class="line"><span class="attr">rating:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">id:</span> <span class="comment">#&lt;app_id&gt;</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">fadb14</span></span><br></pre></td></tr></table></figure><p>此时刷新浏览器即可在文章末尾看到空的评分栏了。点击评分发现需要以社交账号登陆，而这些社交账号基本都是 facebook、twitter 等墙外的社交软件，限制了评分系统可用性，我们可以在 widgetpack 控制台中修改评分认证机制。</p><p>在控制台中点击左上角展开菜单，在 <strong>Rating</strong> -&gt; <strong>Setting</strong> 中将 Vote via 选项改为 Device(cookie) 以开启匿名评分，该选项将基于设备认证访问者身份：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/rate-vote-via.png" alt="开启匿名评分" title="开启匿名评分"></p><p>用户还可以在该页面设定 star 数量和大小。修改后记得勾选右下角的 SAVE SETTING 才会生效。</p><p>在实际使用过程中，并非每篇文章都需要开启评分。此时可在 Front-Matter 中设定变量 rating 用于控制是否开启评分。修改文章布局模板中相关代码，使得只有当主题配置文件中 <code>rating.enable</code> 字段和 <code>page.rating</code> 字段同时为 <code>true</code> 才会插入评分组件：</p><figure class="highlight diff"><figcaption><span>themes\next\layout_macro\post.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line"><span class="deletion">-  &#123;% if theme.rating.enable or (theme.vkontakte_api.enable and theme.vkontakte_api.like) or (theme.facebook_sdk.enable and theme.facebook_sdk.like_button) or (theme.needmoreshare2.enable and theme.needmoreshare2.postbottom.enable) or (theme.baidushare and theme.baidushare.type === "button" )%&#125;</span></span><br><span class="line"><span class="addition">+  &#123;% if (theme.rating.enable and post.rating) or (theme.vkontakte_api.enable and theme.vkontakte_api.like) or (theme.facebook_sdk.enable and theme.facebook_sdk.like_button) or (theme.needmoreshare2.enable and theme.needmoreshare2.postbottom.enable) or (theme.baidushare and theme.baidushare.type === "button" )%&#125;</span></span><br><span class="line">    &lt;div class="post-widgets"&gt;</span><br><span class="line">    &#123;% if theme.rating.enable %&#125;</span><br><span class="line">      &lt;div class="wp_rating"&gt;</span><br><span class="line">        &lt;div id="wpac-rating"&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>为了批量为每篇新文章设定该变量并赋默认值，可以修改草稿模板内容，这样以来每篇草稿发布后都会默认开启评分：</p><figure class="highlight diff"><figcaption><span>scaffolds\draft.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  title: &#123;&#123; title &#125;&#125;</span><br><span class="line">  tags:</span><br><span class="line">  categories:</span><br><span class="line"><span class="addition">+ rating: true</span></span><br></pre></td></tr></table></figure><p>站点上线后，可以在控制台菜单的 <strong>Site</strong> -&gt; <strong>Setting</strong> 中勾选 Private，使得组件只对应用内指定的域名上生效，这样以来即时别人错填了你的 id 也不会将评分数据误提交到你的应用中了。</p><div class="note info"><p>widgetpack 与前文提到的 hotjar 在评价反馈功能上的侧重点不一样，widgetpack 更侧重于对文章的评分，而 hotjar 侧重于对整个页面的评分，并提供了文字和截图反馈的渠道。</p></div><h2 id="文章加密访问"><a href="#文章加密访问" class="headerlink" title="文章加密访问"></a>文章加密访问</h2><p>该功能由 <a href="https://github.com/MikeCoder/hexo-blog-encrypt" target="_blank" rel="noopener">hexo-blog-encrypt</a> 插件提供，效果如下：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-advanced-settings/post-encrypt.png" alt="文章加密" title="文章加密"></p><p>在站点根目录中执行以下命令安装依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-blog-encrypt --save</span><br></pre></td></tr></table></figure><p>在站点配置文件中添加如下字段：</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">encrypt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">default_abstract:</span> <span class="string">此文章已被加密，需要输入密码访问。</span>  <span class="string">//首页文章列表中加密文章的默认描述文案</span></span><br><span class="line">  <span class="attr">default_message:</span> <span class="string">请输入密码以阅读这篇私密文章。</span>  <span class="string">//文章详情页的密码输入框上的默认描述文案</span></span><br></pre></td></tr></table></figure><p>然后在文章 Front-Matter 中添加 <code>password</code> 字段用于设置文章访问密码。重启服务器，这个时候可能需要经历较长一段时间的加密过程，请耐心等待，加密完成后刷新页面将会显示密码输入框，输入密码后才能继续访问文章内容。</p><div class="note info"><p>该功能只会加密文章正文，其他内容如打赏、版权信息、标签等则不会被加密隐藏，这样看起来有点奇怪，所以建议加密文章隐藏掉打赏和版权信息内容。</p></div><p>密码输入错误时将会显示浏览器默认告警弹窗，可以使用 <a href="https://sweetalert.js.org/" target="_blank" rel="noopener">sweetalert</a> 来美化错误提示：</p><p>在主题自定义布局文件中添加如下代码：</p><figure class="highlight html"><figcaption><span>themes\next\layout_custom\custom.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/sweetalert/dist/sweetalert.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果 custom.swig 文件不存在，需要手动新建并在布局页面中 body 末尾引入：</p><figure class="highlight diff"><figcaption><span>themes\next\layout_layout.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      ...</span><br><span class="line">      &#123;% include '_third-party/exturl.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/bookmark.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/copy-code.swig' %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+     &#123;% include '_custom/custom.swig' %&#125;</span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在 node_modules 依赖库中修改 hexo-blog-encrypt 源码：</p><figure class="highlight diff"><figcaption><span>node_modules\hexo-blog-encrypt\lib\blog.encrypt.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  ...</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line"><span class="deletion">-   alert(decryptionError);</span></span><br><span class="line"><span class="addition">+   swal(&#123;</span></span><br><span class="line"><span class="addition">+     text: "密码错误!",</span></span><br><span class="line"><span class="addition">+     icon: "error",</span></span><br><span class="line"><span class="addition">+     className: "password-error",</span></span><br><span class="line"><span class="addition">+     timer: 1000,</span></span><br><span class="line"><span class="addition">+     button: false</span></span><br><span class="line"><span class="addition">+   &#125;);</span></span><br><span class="line">    console.log(e);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>在自定义样式文件中添加如下代码：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//密码错误sweetalert弹框样式修改</span><br><span class="line"><span class="selector-class">.swal-overlay</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.password-error</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">12px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.15</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning"><p>由于是在 node_module 中修改的依赖文件，一旦更新或者重装依赖都会覆盖修改，需要重新修改一遍。</p></div><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>在集成第三方插件或者自定义新功能的过程中我一直试图秉持这些原则：</p><ul><li>可以在站点配置/主题配置文件中方便快捷的开启/关闭插件服务</li><li>可以在语言包 zh-CN.yml 中快速修改页面中的自定义文案，而不是在代码中将文字表述写死</li><li>尽量在自定义样式文件 custom.styl 和自定义布局文件 custom.swig 中添加代码，而非修改主题源码</li><li>新增文件统一放在 _custom 目录下</li></ul><p>所有以上这些原则，尽管实现起来可能更复杂，需要更多的代码，但都是为了让站点更好维护，更灵活方便。</p><p>本文介绍了如何通过修改自定义设置和集成三方插件服务搭建一个功能更加完善的个性化 Hexo 博客，尽管我们的博客可能已经做的令自己很满意了，但至今仍是只能在本地访问，别人看不到。我们建立博客往往都是希望能将自己的文章分享给他人来创造更多价值，如果想要了解如何将站点部署到公网，请参考本系列中最后一篇文章：<a href="/posts/hexo-deploy-to-VPS.html" title="Hexo搭建个人博客系列：部署上线篇">Hexo搭建个人博客系列：部署上线篇</a>。</p><div class="reference-linking">参考链接</div><ul><li><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">reuixiy | 打造个性超赞博客 Hexo+NexT+GitHubPages 的超深度优化</a></li><li><a href="https://notes.doublemine.me/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">夏末 | 为 NexT 主题添加文章阅读量统计功能</a></li><li><a href="https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">nMask | Hexo 搭建博客教程</a></li><li><a href="https://leancloud.cn/docs/leanstorage_guide-js.html" target="_blank" rel="noopener">LeanCloud | JavaScript SDK 安装指南</a></li><li><a href="https://diygod.me/2153/" target="_blank" rel="noopener">DIYgod | 我藏好了哦</a></li><li><a href="https://github.com/mythsman/hexo-douban" target="_blank" rel="noopener">mythsman/hexo-douban README.md</a></li><li><a href="https://asdfv1929.github.io/2018/01/21/daovoice/" target="_blank" rel="noopener">asdfv1929 | Hexo NexT 主题内接入网页在线联系功能</a></li><li><a href="https://www.hotjar.com/tour" target="_blank" rel="noopener">Hotjar Features</a></li><li><a href="https://www.hotjar.com/incoming-feedback" target="_blank" rel="noopener">Incoming Feedback by Hotjar</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://yearito-1256884783.image.myqcloud.com/thumbnails/snow-mountain.jpg!thumbnail&quot; alt=&quot;题图&quot; title=&quot;Photo by Przemyslaw Kruk&quot;&gt;&lt;/p&gt;
&lt;p&gt;本篇文章介绍了如何为 Hexo 博客集成更多强大的功能。&lt;/p&gt;
&lt;p&gt;第一章介绍了在站点中集成基于三方插件的数据统计服务，包括站点 PV 和 PU 统计、站点运行时间统计、文章 PV 统计、站点和文章字数统计等。&lt;/p&gt;
&lt;p&gt;第二张介绍了针对于站点的个性化设置方案，包括添加搞怪的网页标题，添加站内搜索功能，添加热门文章排行榜页面，添加豆瓣阅读/电影/游戏等资料页面，添加在线聊天和即时反馈等功能。&lt;/p&gt;
&lt;p&gt;第三章介绍了针对于文章页面的个性化设置方案，包括在文章末尾添加评论组件、评分组件、打赏入口、版权声明、推荐文章等，为文章中的图片添加点击灯箱效果，以及为文章设置访问密码。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://freegale.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="博客" scheme="http://freegale.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://freegale.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客系列：主题美化篇</title>
    <link href="http://freegale.github.io/posts/hexo-theme-beautify.html"/>
    <id>http://freegale.github.io/posts/hexo-theme-beautify.html</id>
    <published>2018-11-20T12:09:53.000Z</published>
    <updated>2020-11-05T12:16:14.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://yearito-1256884783.image.myqcloud.com/thumbnails/coast.jpg!thumbnail" alt="题图" title="Photo by Marina Weishaupt"></p><p>本文介绍了在Next主题的基础上进一步对博客进行美化的方案，主要包括:</p><ul><li>在文章末尾添加结束标记</li><li>修改侧边栏的位置到左边</li><li>添加不同类型的动态背景效果</li><li>添加 live2d 看板娘</li><li>为布局元素添加边缘弹性摆动效果</li><li>个性化回到顶部按钮</li><li>添加不同类型的鼠标点击特效</li><li>评论区输入打字礼花特效</li></ul><p>读者可以根据需要选择其中喜欢的方案应用到站点博客中。</p><a id="more"></a><h1 id="修改博客字体"><a href="#修改博客字体" class="headerlink" title="修改博客字体"></a>修改博客字体</h1><p>在 <a href="https://www.google.com/fonts" target="_blank" rel="noopener">Google Fonts</a> 上找到心仪的字体，然后在主题配置文件中为不同的应用场景配置字体：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 外链字体库地址，例如 //fonts.googleapis.com (默认值)</span></span><br><span class="line">  <span class="attr">host:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 全局字体，应用在 body 元素上</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Monda</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 标题字体 (h1, h2, h3, h4, h5, h6)</span></span><br><span class="line">  <span class="attr">headings:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Roboto</span> <span class="string">Slab</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 文章字体</span></span><br><span class="line">  <span class="attr">posts:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Logo 字体</span></span><br><span class="line">  <span class="attr">logo:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 代码字体，应用于 code 以及代码块</span></span><br><span class="line">  <span class="attr">codes:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br></pre></td></tr></table></figure><h1 id="文章页末美化"><a href="#文章页末美化" class="headerlink" title="文章页末美化"></a>文章页末美化</h1><h2 id="为标签添加图标"><a href="#为标签添加图标" class="headerlink" title="为标签添加图标"></a>为标签添加图标</h2><p>默认情况下标签前缀是 <code>#</code> 字符，用户可以通过修改主题源码将标签的字符前缀改为图标前缀，更改后效果如下：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/20181113045027074.png" alt="标签图标前缀" title="标签图标前缀"></p><p>在文章布局模板中找到文末标签相关代码段，将 <code>#</code> 换成 <code>&lt;i class=&quot;fa fa-tags&quot;&gt;&lt;/i&gt;</code> 即可：</p><figure class="highlight diff"><figcaption><span>themes\next\layout\_macro\post.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  &lt;footer class="post-footer"&gt;</span><br><span class="line">    &#123;% if post.tags and post.tags.length and not is_index %&#125;</span><br><span class="line">      &lt;div class="post-tags"&gt;</span><br><span class="line">        &#123;% for tag in post.tags %&#125;</span><br><span class="line"><span class="deletion">-          &lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt;# &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span></span><br><span class="line"><span class="addition">+          &lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt;&lt;i class="fa fa-tags"&gt;&lt;/i&gt; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/footer&gt;</span><br></pre></td></tr></table></figure><p>Next中使用 <a href="https://fontawesome.com/v4.7.0/icons/" target="_blank" rel="noopener">FontAwesome</a> 作为图标库，用户可以在 FontAwesome 上找到心仪的图标来替换标签的字符前缀。</p><h2 id="添加结束标记"><a href="#添加结束标记" class="headerlink" title="添加结束标记"></a>添加结束标记</h2><div class="note info"><p>本章节参考 <a href="https://asdfv1929.github.io/2018/01/28/add-the-end/" target="_blank" rel="noopener">asdfv1929 | Hexo NexT主题内给每篇文章后添加结束标语</a></p></div><p>在文末添加结束标记，效果如下：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/20181113045252399.png" alt="文末结束标记" title="文末结束标记"></p><p>新建布局模板文件 post-end-tag.swig，添加如下代码：</p><figure class="highlight html"><figcaption><span>themes\next\layout\_macro\post-end-tag.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;color:#bfbfbf;font-size:16px;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>-------- 本文结束 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-&#123;&#123; config.post_end_tag.icon &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span> 感谢阅读 --------<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在文章布局模板中添加如下代码：</p><figure class="highlight diff"><figcaption><span>themes\next\layout\_macro\post</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;#####################&#125;</span><br><span class="line">&#123;### END POST BODY ###&#125;</span><br><span class="line">&#123;#####################&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+ &#123;% if config.post_end_tag.enabled and not is_index %&#125;</span></span><br><span class="line"><span class="addition">+   &lt;div&gt;</span></span><br><span class="line"><span class="addition">+     &#123;% include 'post-end-tag.swig' %&#125;</span></span><br><span class="line"><span class="addition">+   &lt;/div&gt;</span></span><br><span class="line"><span class="addition">+ &#123;% endif %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% if theme.wechat_subscriber.enabled and not is_index %&#125;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;% include 'wechat-subscriber.swig' %&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>在站点配置文件末尾添加如下代码：</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_end_tag:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment"># 是否开启文末的本文结束标记</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">paw</span> <span class="comment"># 结束标记之间的图标</span></span><br></pre></td></tr></table></figure><p>重启服务器后即可在文末看到结束标记。</p><h1 id="页面加载进度条"><a href="#页面加载进度条" class="headerlink" title="页面加载进度条"></a>页面加载进度条</h1><p>当网络不好的时候可能会在打开站点或跳转文章时出现短暂的白屏，此时如果能有加载进度提示将会提高用户操作体验。</p><p>在根目录下执行以下命令安装相关依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/theme-next/theme-next-pace themes/next/source/lib/pace</span><br></pre></td></tr></table></figure><p>在主题配置文件中设置 <code>pace: true</code>。</p><p>默认提供了多种主题的进度条加载样式，有顶部提示的，有中间提示的，还有全页面遮挡提示的，个人认为默认的进度条效果就恰如其当，既能够在页面空白的时候起到加载作用，也不会因为太过花里胡哨而喧宾夺主，尤其是当你如果使用了不蒜子的站点访问统计的功能的时候，常常会遇到所有资源都加载完毕而不蒜子还在等待响应，如果这个时候在页面较显眼的位置出现一个停滞不前的进度条，很让人抓狂。</p><h1 id="侧边栏放左边"><a href="#侧边栏放左边" class="headerlink" title="侧边栏放左边"></a>侧边栏放左边</h1><p>受 <a href="https://www.ofind.cn/" target="_blank" rel="noopener">猪猪侠的博客</a> 所启发，萌生了想把主题侧边栏放在左侧的想法。</p><p>Next主题各系列中只有Pisces和Gemini支持通过主题配置文件来将侧边栏置于左侧或右侧，而Muse和Mist则需要深度修改源码才能实现改变侧边栏位置。</p><p>在自定义样式文件中添加如下规则：</p><figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar-toggle</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改动效脚本代码：</p><figure class="highlight diff"><figcaption><span>themes\next\source\js\src\motion.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$(document)</span><br><span class="line">  .on('sidebar.isShowing', function() &#123;</span><br><span class="line">    NexT.utils.isDesktop() &amp;&amp; $('body').velocity('stop').velocity(</span><br><span class="line"><span class="deletion">-     &#123;paddingRight: SIDEBAR_WIDTH&#125;,</span></span><br><span class="line"><span class="addition">+     &#123;paddingLeft: SIDEBAR_WIDTH&#125;,</span></span><br><span class="line">      SIDEBAR_DISPLAY_DURATION</span><br><span class="line">    );</span><br><span class="line">  &#125;)</span><br><span class="line">  .on('sidebar.isHiding', function() &#123;</span><br><span class="line">  &#125;);</span><br><span class="line">  ...</span><br><span class="line">  hideSidebar: function() &#123;</span><br><span class="line"><span class="deletion">-   NexT.utils.isDesktop() &amp;&amp; $('body').velocity('stop').velocity(&#123;paddingRight: 0&#125;);</span></span><br><span class="line"><span class="addition">+   NexT.utils.isDesktop() &amp;&amp; $('body').velocity('stop').velocity(&#123;paddingLeft: 0&#125;);</span></span><br><span class="line">    this.sidebarEl.find('.motion-element').velocity('stop').css('display', 'none');</span><br><span class="line">    this.sidebarEl.velocity('stop').velocity(&#123;width: 0&#125;, &#123;display: 'none'&#125;);</span><br><span class="line"></span><br><span class="line">    sidebarToggleLines.init();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此以来就可以将侧边栏放置在左边了，但当窗口宽度缩小到991px之后会出现样式错误：侧边栏收缩消失但是页面左侧仍留有空白间距，此时修改如下代码即可：</p><figure class="highlight diff"><figcaption><span>themes\next\source\css\_common\scaffolding\base.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  position: relative; // Required by scrollspy</span><br><span class="line">  font-family: $font-family-base;</span><br><span class="line">  font-size: $font-size-base;</span><br><span class="line">  line-height: $line-height-base;</span><br><span class="line">  color: $text-color;</span><br><span class="line">  background: $body-bg-color;</span><br><span class="line"></span><br><span class="line"><span class="deletion">- +mobile() &#123; padding-left: 0 !important; &#125;</span></span><br><span class="line"><span class="deletion">- +tablet() &#123; padding-left: 0 !important; &#125;  </span></span><br><span class="line"><span class="addition">+ +mobile() &#123; padding-right: 0 !important; &#125;</span></span><br><span class="line"><span class="addition">+ +tablet() &#123; padding-right: 0 !important; &#125;</span></span><br><span class="line">  +desktop-large() &#123; font-size: $font-size-large; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="添加动态背景"><a href="#添加动态背景" class="headerlink" title="添加动态背景"></a>添加动态背景</h1><p>Next主题可以通过安装插件快速为站点添加不同效果的动态背景。</p><h2 id="粒子漂浮聚合"><a href="#粒子漂浮聚合" class="headerlink" title="粒子漂浮聚合"></a>粒子漂浮聚合</h2><p>应用效果如下图：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/20181115092103046.png" alt="canvas-nest 动态背景" title="canvas-nest 动态背景"></p><p>该功能由 <a href="https://github.com/theme-next/theme-next-canvas-nest" target="_blank" rel="noopener">theme-next-canvas-nest</a> 插件提供，在根目录下执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/theme-next/theme-next-canvas-nest themes/next/source/lib/canvas-nest</span><br></pre></td></tr></table></figure><p>然后在主题配置文件中设置 <code>canvas_nest: true</code> 即可。</p><p>Next v6.5.0 及以上版本支持更多的自定义选项：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># 是否在移动端显示</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">'0,0,255'</span> <span class="comment"># 动态背景中线条的 RGB 颜色</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.5</span> <span class="comment"># 动态背景中线条透明度</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># 动态背景的 z-index 属性值</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">99</span> <span class="comment"># 动态背景中线条数量</span></span><br></pre></td></tr></table></figure><h2 id="Three-三维动效"><a href="#Three-三维动效" class="headerlink" title="Three 三维动效"></a>Three 三维动效</h2><p><a href="https://github.com/theme-next/theme-next-three" target="_blank" rel="noopener">theme-next-three</a> 插件提供了三个类型的背景动效，应用效果如下：</p><div class="tabs" id="three-三维动效"><ul class="nav-tabs"><li class="tab active"><a href="#three-三维动效-1">three-waves</a></li><li class="tab"><a href="#three-三维动效-2">canvas-lines</a></li><li class="tab"><a href="#three-三维动效-3">canvas-sphere</a></li></ul><div class="tab-content"><div class="tab-pane active" id="three-三维动效-1"><p>  <img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/20181115091950761.png" alt></p></div><div class="tab-pane" id="three-三维动效-2"><p>  <img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/20181115091914602.png" alt></p></div><div class="tab-pane" id="three-三维动效-3"><p>  <img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/20181115091826700.png" alt></p></div></div></div><p>在根目录下执行如下命令安装相关依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/theme-next/theme-next-three themes/next/source/lib/three</span><br></pre></td></tr></table></figure><p>然后在主题配置文件中设置开启对应的动效选项即可。</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JavaScript 3D library.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-three</span></span><br><span class="line"><span class="comment"># three_waves</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># canvas_lines</span></span><br><span class="line"><span class="attr">canvas_lines:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># canvas_sphere</span></span><br><span class="line"><span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><div class="note info"><p>个人认为在站点中添加动态背景并没有实际的意义，只会凭空增加页面内存占用及CPU消耗，所以本站没有添加任何动态背景。</p></div><h2 id="随机三角丝带"><a href="#随机三角丝带" class="headerlink" title="随机三角丝带"></a>随机三角丝带</h2><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/evan-you.png" alt="随机三角丝带" title="随机三角丝带"></p><div class="note info"><p>该功能由 Vue 作者 <a href="http://evanyou.me/" target="_blank" rel="noopener">尤雨溪</a> 首创。本章节中核心代码来源于 <a href="https://diygod.me/" target="_blank" rel="noopener">DIYgod</a> 编写的 <a href="https://github.com/DIYgod/hexo-theme-sagiri" target="_blank" rel="noopener">sagiri</a> 主题。</p></div><p>点击下方按钮下载相应的脚本，并置于 themes\next\source\js\ 目录下：</p><p><a class="btn" href="https://script-1256884783.file.myqcloud.com/evan-you.js" target="_blank" rel="noopener"><i class="fa fa-download fa-fw"></i>随机三角丝带</a></p><p>在主题自定义布局文件中添加以下代码：</p><figure class="highlight html"><figcaption><span>themes\next\layout\_custom\custom.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;# 随机三角丝带背景 #&#125;</span><br><span class="line">&#123;% if theme.evanyou %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"evanyou"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#evanyou</span> &#123;</span></span><br><span class="line">      position: fixed;</span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 100%;</span><br><span class="line">      top: 0;</span><br><span class="line">      left: 0;</span><br><span class="line">      z-index: -1;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/evan-you.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>如果 custom.swig 文件不存在，需要手动新建并在布局页面中 body 末尾引入：</p><figure class="highlight diff"><figcaption><span>themes\next\layout\_layout.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      ...</span><br><span class="line">      &#123;% include '_third-party/exturl.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/bookmark.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/copy-code.swig' %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+     &#123;% include '_custom/custom.swig' %&#125;</span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在主题配置文件中添加以下代码：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># colorful trilateral riband background</span></span><br><span class="line"><span class="attr">evanyou:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如果从本地加载JS脚本速度较慢，可以考虑将脚本放到CDN上再引入。</p><h1 id="添加看板娘"><a href="#添加看板娘" class="headerlink" title="添加看板娘"></a>添加看板娘</h1><div class="note info"><p>本章节部分内容参考 <a href="https://fjkang.github.io/2017/12/08/%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E8%90%8C%E7%89%A9/" target="_blank" rel="noopener">FJKang | 添加一个萌物</a></p></div><p>该功能由 <a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">hexo-helper-live2d</a> 插件支持，效果如下图：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/live2d.gif" alt="live2d 看板娘" title="live2d 看板娘"></p><p>在站点根目录下执行以下命令安装依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>在站点配置文件中添加以下下配置项</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Live2D</span></span><br><span class="line"><span class="comment"># https://github.com/EYHN/hexo-helper-live2d</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span> <span class="string">Relative)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 脚本加载源</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span> <span class="comment"># 默认从本地加载脚本</span></span><br><span class="line">  <span class="comment"># scriptFrom: jsdelivr # 从 jsdelivr CDN 加载脚本</span></span><br><span class="line">  <span class="comment"># scriptFrom: unpkg # 从 unpkg CDN 加载脚本</span></span><br><span class="line">  <span class="comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 从自定义地址加载脚本</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span> <span class="comment"># 只在有 &#123;&#123; live2d() &#125;&#125; 标签的页面上加载 / 在所有页面上加载</span></span><br><span class="line">  <span class="attr">log:</span> <span class="literal">false</span> <span class="comment"># 是否在控制台打印日志</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 选择看板娘模型</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-shizuku</span>  <span class="comment"># npm package的名字</span></span><br><span class="line">    <span class="comment"># use: wanko # /live2d_models/ 目录下的模型文件夹名称</span></span><br><span class="line">    <span class="comment"># use: ./wives/wanko # 站点根目录下的模型文件夹名称</span></span><br><span class="line">    <span class="comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 自定义网络数据源</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">left</span> <span class="comment"># 显示在左边还是右边</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">100</span> <span class="comment"># 宽度</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">180</span> <span class="comment"># 高度</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacityDefault:</span> <span class="number">0.7</span> <span class="comment"># 默认透明度</span></span><br></pre></td></tr></table></figure><div class="note info"><p>更多配置参数请查看 <a href="https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init" target="_blank" rel="noopener">L2Dwidget | live2d-widget.js</a></p></div><p>此时重启服务器暂时还看不到看板娘，需要手动下载或安装模型资源。可以从 <a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">hexo live2d 模型预览</a> 里找到你喜欢的角色，然后根据 <a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">live2d-widget-models</a> 中提供的方法来下载模型数据.</p><p>例如通过以下命令下载模型 shizuku：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install live2d-widget-model-shizuku</span><br></pre></td></tr></table></figure><p>因为修改了站点配置文件，所以需要重启服务器才能预览模型效果。</p><p>如果设置了 <code>live2d.tagMode: true</code>，则可以在指定页面中插入以下标签：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#123;&#123;</span> <span class="string">live2d()</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>只有拥有该标签的页面才会渲染live2d模型，这样以来就可以精确控制在哪些页面上显示看板娘了。</p><p>如果只想在一级菜单页面上显示看板娘，可以在Header模板中添加以下代码：</p><figure class="highlight diff"><figcaption><span>themes\next\layout\_partials\header\index.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ &#123;% if is_index %&#125;</span></span><br><span class="line"><span class="addition">+   &#123;&#123; live2d() &#125;&#125;</span></span><br><span class="line"><span class="addition">+ &#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure><div class="note info"><p>个人认为在文章内出现看板娘将会影响读者注意力的集中，毕竟一篇博客里最重要的是内容，而不是这些花里胡哨转移注意力的东西。所以本站只在一级菜单页面添加了看板娘，文章页面则保持极致精简的阅读体验。</p></div><p>经过测试发现 <code>live2d.mobile.show: false</code> 并没有生效，暂时没有找到好的解决方法，参考 <a href="https://github.com/EYHN/hexo-helper-live2d/issues/12" target="_blank" rel="noopener">EYHN/hexo-helper-live2d Issues #12</a> 后发现可以在自定义样式文件中添加以下代码来解决：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#live2dcanvas</span> &#123;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    <span class="selector-tag">display</span>: <span class="selector-tag">none</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  +<span class="selector-tag">tablet</span>() &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info"><p>不要乱点不该点的地方，会生气的。</p></div><h1 id="边缘摆动效果"><a href="#边缘摆动效果" class="headerlink" title="边缘摆动效果"></a>边缘摆动效果</h1><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/wobblewindow.gif" alt="wobblewindow 边缘摆动" title="wobblewindow 边缘摆动"></p><p>在 <a href="https://www.ofind.cn/" target="_blank" rel="noopener">猪猪侠的博客</a> 里发现的这种特效，觉得挺有意思的，就从他Github上给扒过来了</p><p>点击下方按钮下载脚本，并置于 themes\next\source\js\ 目录下：</p><p><a class="btn" href="https://script-1256884783.file.myqcloud.com/wobblewindow.js" target="_blank" rel="noopener"><i class="fa fa-download fa-fw"></i>wobblewindow.js</a></p><p>在主题自定义布局文件中添加以下代码：</p><figure class="highlight html"><figcaption><span>themes\next\layout\_custom\custom.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#123;# wobble窗口摆动特效 #&#125;</span><br><span class="line">&#123;% if theme.wobble %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/wobblewindow.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//只在桌面版网页启用特效</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>( <span class="built_in">window</span>.innerWidth &gt; <span class="number">768</span>  )&#123;</span></span><br><span class="line"><span class="javascript">      $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        &#123;% if theme.wobble.header %&#125;</span><br><span class="line"><span class="javascript">          $(<span class="string">'#header'</span>).wobbleWindow(&#123;</span></span><br><span class="line">            radius: &#123;&#123; theme.wobble.radius &#125;&#125;,</span><br><span class="line"><span class="javascript">            movementTop: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            movementLeft: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            movementRight: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            debug: <span class="literal">false</span>,</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% if theme.wobble.sidebar %&#125;</span><br><span class="line"><span class="javascript">          $(<span class="string">'#sidebar'</span>).wobbleWindow(&#123;</span></span><br><span class="line">            radius: &#123;&#123; theme.wobble.radius &#125;&#125;,</span><br><span class="line"><span class="javascript">            movementLeft: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            movementTop: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            movementBottom: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            position: <span class="string">'fixed'</span>,</span></span><br><span class="line"><span class="javascript">            debug: <span class="literal">false</span>,</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% if theme.wobble.footer %&#125;</span><br><span class="line"><span class="javascript">          $(<span class="string">'#footer'</span>).wobbleWindow(&#123;</span></span><br><span class="line">            radius: &#123;&#123; theme.wobble.radius &#125;&#125;,</span><br><span class="line"><span class="javascript">            movementBottom: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            movementLeft: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            movementRight: <span class="literal">false</span>,</span></span><br><span class="line">            offsetX: &#123;&#123; theme.wobble.offset &#125;&#125;,</span><br><span class="line"><span class="javascript">            position: <span class="string">'absolute'</span>,</span></span><br><span class="line"><span class="javascript">            debug: <span class="literal">false</span>,</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>如果 custom.swig 文件不存在，需要手动新建并在布局页面中 body 末尾引入：</p><figure class="highlight diff"><figcaption><span>themes\next\layout\_layout.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      ...</span><br><span class="line">      &#123;% include '_third-party/exturl.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/bookmark.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/copy-code.swig' %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+     &#123;% include '_custom/custom.swig' %&#125;</span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在自定义样式文件中添加以下样式：</p><figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//窗口波动效果相关样式</span><br><span class="line">if hexo-config('wobble')  &#123;</span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.wobbleTransparentBK</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.wobbleTransparentLine</span>&#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //Next.Muse中为Header和Footer添加背景色</span><br><span class="line">  <span class="selector-id">#header</span>, <span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">245</span>, <span class="number">245</span>, <span class="number">245</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //防止sidebar和footer同时开启动效时堆叠异常</span><br><span class="line">  <span class="selector-id">#sidebar</span>, <span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //防止挡住页末文章的阅读全文按钮</span><br><span class="line">  <span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning"><p>Next.Muse主题方案中Header和Footer是没有背景色的，所以需要添加背景色后才能看出边缘摆动效果。另外，实现边缘摆动效果所需的 <code>z-index</code> 属性可能会导致元素堆叠异常，需要添加以上样式来矫正。</p></div><p>在主题配置文件中添加以下代码：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># window woblle</span></span><br><span class="line"><span class="attr">wobble:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 是否开启边缘波动效果</span></span><br><span class="line">  <span class="attr">radius:</span> <span class="number">50</span>  <span class="comment"># 波动半径</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span>  <span class="comment"># 开启侧边栏边缘摆动</span></span><br><span class="line">  <span class="attr">header:</span> <span class="literal">true</span>  <span class="comment"># 开启头部边缘摆动</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="literal">true</span>  <span class="comment"># 开启脚部边缘摆动</span></span><br></pre></td></tr></table></figure><p>用户可以根据需要在配置文件中为选择开启边缘摆动效果的布局元素。刷新浏览器，然后将鼠标移动到布局边缘上尽情的挑逗它吧。</p><p>如果从本地加载JS脚本速度较慢，可以考虑将脚本放到CDN上再引入。</p><h1 id="个性化回到顶部"><a href="#个性化回到顶部" class="headerlink" title="个性化回到顶部"></a>个性化回到顶部</h1><p>从 <a href="https://diygod.me/" target="_blank" rel="noopener">DIYgod的博客</a> 里扒来的，效果如下：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/back-to-top.gif" alt="回到顶部" title="回到顶部"></p><p>原理很简单，将 back-to-top 按钮添加图片背景，并添加CSS3动效即可。</p><p>首先，找到自己喜欢的图片素材放到 source\images\ 目录下。</p><p>你可以点击下方按钮下载本站所使用的小猫上吊素材（小猫咪这么可爱，当然要多放点孜然啦…）</p><p><a class="btn" href="/images/scroll.png" download>  <i class="fa fa-download fa-fw"></i>  下载图片</a></p><p>然后在自定义样式文件中添加如下代码：</p><figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//自定义回到顶部样式</span><br><span class="line"><span class="selector-class">.back-to-top</span> &#123;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">60px</span>;</span><br><span class="line">  width: 70px;  //图片素材宽度</span><br><span class="line">  height: 900px;  //图片素材高度</span><br><span class="line">  <span class="selector-tag">top</span>: <span class="selector-tag">-900px</span>;</span><br><span class="line">  <span class="selector-tag">bottom</span>: <span class="selector-tag">unset</span>;</span><br><span class="line">  <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.5s</span> <span class="selector-tag">ease-in-out</span>;</span><br><span class="line">  background: url("/images/scroll.png");</span><br><span class="line"></span><br><span class="line">  //隐藏箭头图标</span><br><span class="line">  &gt; <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-class">.back-to-top-on</span> &#123;</span><br><span class="line">    <span class="attribute">bottom</span>: unset;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100vh</span> &lt; (<span class="number">900px</span> + <span class="number">200px</span>) ? <span class="built_in">calc</span>( <span class="number">100vh</span> - <span class="number">900px</span> - <span class="number">200px</span> ) : <span class="number">0px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刷新浏览器即可预览效果。</p><h1 id="鼠标点击特效"><a href="#鼠标点击特效" class="headerlink" title="鼠标点击特效"></a>鼠标点击特效</h1><p>从各个站点里搜罗了以下四个比较常用的鼠标点击特效：</p><div class="tabs" id="鼠标点击特效"><ul class="nav-tabs"><li class="tab active"><a href="#鼠标点击特效-1">礼花特效</a></li><li class="tab"><a href="#鼠标点击特效-2">爆炸特效</a></li><li class="tab"><a href="#鼠标点击特效-3">浮出爱心</a></li><li class="tab"><a href="#鼠标点击特效-4">浮出文字</a></li></ul><div class="tab-content"><div class="tab-pane active" id="鼠标点击特效-1"><p>  <img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/cursor-fireworks.gif" alt></p></div><div class="tab-pane" id="鼠标点击特效-2"><p>  <img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/cursor-explosion.gif" alt></p></div><div class="tab-pane" id="鼠标点击特效-3"><p>  <img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/cursor-love.gif" alt></p></div><div class="tab-pane" id="鼠标点击特效-4"><p>  <img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/cursor-text.gif" alt></p></div></div></div><p>点击下方按钮下载相应的脚本，并置于 themes\next\source\js\cursor\ 目录下：</p><p><a class="btn" href="https://script-1256884783.file.myqcloud.com/cursor/fireworks.js" target="_blank" rel="noopener"><i class="fa fa-download fa-fw"></i>礼花特效</a><a class="btn" href="https://script-1256884783.file.myqcloud.com/cursor/explosion.min.js" target="_blank" rel="noopener"><i class="fa fa-download fa-fw"></i>爆炸特效</a><a class="btn" href="https://script-1256884783.file.myqcloud.com/cursor/love.min.js" target="_blank" rel="noopener"><i class="fa fa-download fa-fw"></i>浮出爱心</a><a class="btn" href="https://script-1256884783.file.myqcloud.com/cursor/text.js" target="_blank" rel="noopener"><i class="fa fa-download fa-fw"></i>浮出文字</a></p><p>在主题自定义布局文件中添加以下代码：</p><figure class="highlight html"><figcaption><span>themes\next\layout\_custom\custom.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;# 鼠标点击特效 #&#125;</span><br><span class="line">&#123;% if theme.cursor_effect == "fireworks" %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"/js/cursor/fireworks.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% elseif theme.cursor_effect == "explosion" %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">"fireworks"</span> <span class="attr">style</span>=<span class="string">"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;"</span> &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/animejs/2.2.0/anime.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"/js/cursor/explosion.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% elseif theme.cursor_effect == "love" %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"/js/cursor/love.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% elseif theme.cursor_effect == "text" %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"/js/cursor/text.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>如果 custom.swig 文件不存在，需要手动新建并在布局页面中 body 末尾引入：</p><figure class="highlight diff"><figcaption><span>themes\next\layout\_layout.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      ...</span><br><span class="line">      &#123;% include '_third-party/exturl.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/bookmark.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/copy-code.swig' %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+     &#123;% include '_custom/custom.swig' %&#125;</span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在主题配置文件中添加以下代码：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mouse click effect: fireworks | explosion | love | text</span></span><br><span class="line"><span class="attr">cursor_effect:</span> <span class="string">fireworks</span></span><br></pre></td></tr></table></figure><p>这样即可在配置文件中一键快速切换鼠标点击特效。</p><p>如果从本地加载JS脚本速度较慢，可以考虑将脚本放到CDN上再引入。</p><h1 id="打字特效"><a href="#打字特效" class="headerlink" title="打字特效"></a>打字特效</h1><div class="note info"><p>本章节参考 <a href="https://qianling.pw/hexo-optimization/" target="_blank" rel="noopener">千灵夙赋 | Hexo 优化汇总 #31</a>，原文出自 <a href="https://www.ilxtx.com/comment-input-effects.html" target="_blank" rel="noopener">龙笑天下 | 给 WordPress 博客网站添加评论输入打字礼花及震动特效</a></p></div><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/typing-effect.gif" alt="打字特效" title="打字特效"></p><p>点击下方按钮下载相应的脚本，并置于 themes\next\source\js\ 目录下：</p><p><a class="btn" href="https://script-1256884783.file.myqcloud.com/activate-power-mode.min.js" target="_blank" rel="noopener"><i class="fa fa-download fa-fw"></i>打字特效</a></p><p>在主题自定义布局文件中添加以下代码：</p><figure class="highlight html"><figcaption><span>themes\next\layout\_custom\custom.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;# 打字特效 #&#125;</span><br><span class="line">&#123;% if theme.typing_effect %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/activate-power-mode.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    POWERMODE.colorful = &#123;&#123; theme.typing_effect.colorful &#125;&#125;;</span><br><span class="line">    POWERMODE.shake = &#123;&#123; theme.typing_effect.shake &#125;&#125;;</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.addEventListener(<span class="string">'input'</span>, POWERMODE);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>如果 custom.swig 文件不存在，需要手动新建并在布局页面中 body 末尾引入：</p><figure class="highlight diff"><figcaption><span>themes\next\layout\_layout.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      ...</span><br><span class="line">      &#123;% include '_third-party/exturl.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/bookmark.swig' %&#125;</span><br><span class="line">      &#123;% include '_third-party/copy-code.swig' %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+     &#123;% include '_custom/custom.swig' %&#125;</span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在主题配置文件中添加以下代码：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># typing effect</span></span><br><span class="line"><span class="attr">typing_effect:</span></span><br><span class="line">  <span class="attr">colorful:</span> <span class="literal">true</span>  <span class="comment"># 礼花特效</span></span><br><span class="line">  <span class="attr">shake:</span> <span class="literal">false</span>  <span class="comment"># 震动特效</span></span><br></pre></td></tr></table></figure><p>如果从本地加载JS脚本速度较慢，可以考虑将脚本放到CDN上再引入。</p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>本文记录了本站在Next的基础上的进阶美化方案，除了一些简单的样式修改外，还添加了一些由插件支持的高级动效，包括动态背景、看板娘、边缘摆动、鼠标点击和打字特效等。笔者认为，动效可以使得站点变有趣，但同时也会增加网页的资源消耗，以及影响用户的关注点，有时候会喧宾夺主适得其反，建议珍爱PC资源，合理使用动效。</p><p>本文内容仅涉及到主题美化，也就是说仅使得网页看起来更好看或者更炫酷，但并没有使其功能上变得更强大。如果你希望为站点集成更高级的功能，可以关注本系列的后续文章：</p><ul><li>想要深度定制个性化站点，请参考本系列中的 <a href="/posts/hexo-advanced-settings.html" title="Hexo搭建个人博客系列：进阶设置篇">Hexo搭建个人博客系列：进阶设置篇</a>。</li><li>想要了解如何将站点部署到公网，请参考本系列中的 <a href="/posts/hexo-deploy-to-VPS.html" title="Hexo搭建个人博客系列：部署上线篇">Hexo搭建个人博客系列：部署上线篇</a></li></ul><div class="reference-linking">参考链接</div><ul><li><a href="https://asdfv1929.github.io/2018/01/28/add-the-end/" target="_blank" rel="noopener">asdfv1929 | Hexo NexT主题内给每篇文章后添加结束标语</a></li><li><a href="https://fjkang.github.io/2017/12/08/%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E8%90%8C%E7%89%A9/" target="_blank" rel="noopener">FJKang | 添加一个萌物</a></li><li><a href="http://evanyou.me/" target="_blank" rel="noopener">尤雨溪的个人主页</a></li><li><a href="https://diygod.me/" target="_blank" rel="noopener">DIYgod的博客</a></li><li><a href="https://www.ofind.cn/" target="_blank" rel="noopener">猪猪侠的博客</a></li><li><a href="https://qianling.pw/hexo-optimization/" target="_blank" rel="noopener">千灵夙赋 | Hexo 优化汇总</a></li><li><a href="https://www.ilxtx.com/comment-input-effects.html" target="_blank" rel="noopener">龙笑天下 | 给 WordPress 博客网站添加评论输入打字礼花及震动特效</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://yearito-1256884783.image.myqcloud.com/thumbnails/coast.jpg!thumbnail&quot; alt=&quot;题图&quot; title=&quot;Photo by Marina Weishaupt&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文介绍了在Next主题的基础上进一步对博客进行美化的方案，主要包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在文章末尾添加结束标记&lt;/li&gt;
&lt;li&gt;修改侧边栏的位置到左边&lt;/li&gt;
&lt;li&gt;添加不同类型的动态背景效果&lt;/li&gt;
&lt;li&gt;添加 live2d 看板娘&lt;/li&gt;
&lt;li&gt;为布局元素添加边缘弹性摆动效果&lt;/li&gt;
&lt;li&gt;个性化回到顶部按钮&lt;/li&gt;
&lt;li&gt;添加不同类型的鼠标点击特效&lt;/li&gt;
&lt;li&gt;评论区输入打字礼花特效&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;读者可以根据需要选择其中喜欢的方案应用到站点博客中。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://freegale.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="博客" scheme="http://freegale.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://freegale.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客系列：写作技巧篇</title>
    <link href="http://freegale.github.io/posts/hexo-writing-skills.html"/>
    <id>http://freegale.github.io/posts/hexo-writing-skills.html</id>
    <published>2018-11-20T12:09:52.000Z</published>
    <updated>2020-11-05T12:16:14.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://yearito-1256884783.image.myqcloud.com/thumbnails/mist.jpg!thumbnail" alt="题图" title="Photo by Henri Prestes"></p><p>本文介绍Hexo博客的写作技巧。</p><p>第一章中介绍了Hexo中写作相关的基本概念，包括三种基本布局，标签与分类，Markdown写作语法。</p><p>第二章中介绍了Hexo中常用的内置标签，包括note标签、label标签、button标签、tab标签以及代码块的高级用法，通过使用写作标签可以快速编写样式丰富的文档片段。</p><p>第三章中介绍了在文档中插入图片、音乐、视频等多媒体元素的方案。</p><p>第四章中根据个人使用经验为大家推荐了几款优雅实用的Markdown写作工具。</p><a id="more"></a><h1 id="开始写作"><a href="#开始写作" class="headerlink" title="开始写作"></a>开始写作</h1><p>在博客目录下执行如下命令新建一篇文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>如果未指定文章的布局（layout），则默认使用 <code>post</code> 布局，生成的文档存放于 <code>source\_posts\</code> 目录下，打开后使用Markdown语法进行写作，保存后刷新浏览器即可看到文章。</p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>布局是什么概念呢，你可以理解为新建文档时的一个模板，基于布局生成的文档将会继承布局的样式。</p><p>Hexo默认有三种布局：<code>post</code>、 <code>page</code> 和 <code>draft</code>，用户可以在 <code>scaffolds</code> 目录下新建文档来自定义布局格式，还可以修改站点配置文件中的 <code>default_layout</code>参数来指定生成文档时的默认布局。</p><h3 id="文章（post）"><a href="#文章（post）" class="headerlink" title="文章（post）"></a>文章（post）</h3><p>基于 <code>post</code> 布局生成的文档存在于 <code>source\_posts\</code> 目录下，该目录下的文档会作为博客正文显示在网站中。</p><h3 id="页面（page）"><a href="#页面（page）" class="headerlink" title="页面（page）"></a>页面（page）</h3><p><code>page</code> 布局用于生成类似 <strong>首页</strong> 和 <strong>归档</strong> 这样的页面。默认的Next主题样式中只包含首页和归档这两个链接，可以通过修改主题配置文件中的 <code>menu</code> 字段来新增更多页面菜单。</p><figure class="highlight diff"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line"><span class="addition">+ tags: /tags/ || tags</span></span><br><span class="line"><span class="addition">+ categories: /categories/ || th</span></span><br><span class="line"><span class="addition">+ archives: /archives/ || archive</span></span><br></pre></td></tr></table></figure><p>其中，<code>||</code> 之前的值表示菜单链接，之后的值表示所用的 <code>FontAwesome</code> 图标名称。</p><p>刷新页面后即可看到页面内多了几项菜单。</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181103115805642.png" alt="新增菜单入口" title="新增菜单入口"></p><p>此时点击 <strong>关于</strong>、<strong>标签</strong> 和 <strong>分类</strong> 都会跳转到404页面，原因是我们只开放了页面入口，却没有创造对应于链接的页面视图，此时就需要通过 <code>hexo new page &lt;title&gt;</code> 命令来新建页面。</p><p>基于 <code>page</code> 布局的新建命令将会在 <code>source</code> 目录下新建一个 <code>&lt;title&gt;</code> 文件夹，并在该文件夹下创建一个 <code>index.md</code> 文件，编辑该文件即可修改页面内容。</p><p>例如，通过 <code>hexo new page tags</code> 命令将会生成如下目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└──  source             </span><br><span class="line">  ├── _posts          </span><br><span class="line">  └── tags</span><br><span class="line">    └── index.md</span><br></pre></td></tr></table></figure><p>编辑 <code>index.md</code> 文件，在Front-Matter中添加 <code>type: tags</code> ，Next主题将自动在该页面内显示标签云。</p><figure class="highlight diff"><figcaption><span>source\tags\index.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  title: 标签</span><br><span class="line">  date: 2018-10-19 22:57:00</span><br><span class="line"><span class="addition">+ type: tags</span></span><br></pre></td></tr></table></figure><div class="note info"><p>Front-Matter是文件最上方以 <code>---</code> 分隔的区域，用于指定本文件的各种参数值</p></div><p>在菜单中点击 <strong>标签</strong> 跳转到刚创建的标签页面。</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181104120213426.png" alt="Hexo 标签页面" title="Hexo 标签页面"></p><p>同理可通过 <code>page</code> 布局生成 <strong>关于</strong> 和 <strong>分类</strong> 两个页面。</p><h3 id="草稿（draft）"><a href="#草稿（draft）" class="headerlink" title="草稿（draft）"></a>草稿（draft）</h3><p><code>draft</code> 布局用于创建草稿，生成的文档存在于 source\_drafts\ 目录中，默认配置下将不会把该目录下的文档渲染到网站中。</p><p>通过以下命令将草稿发布为正式文章：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish &lt;title&gt;</span><br></pre></td></tr></table></figure><p>该命令会将 source\_drafts\ 目录下以 <title> 开头的草稿发布到 sources\_posts\ 目录下。另外，<code>hexo publish *</code> 会将最新创建的一篇草稿发布为正式文章，并以Front-Matter中的title作为文件名称。</title></p><p>考虑到一些文章可能需要数天才能完成，建议将新建文档时的默认布局设置为 <code>draft</code>：</p><figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- default_layout: post</span></span><br><span class="line"><span class="addition">+ default_layout: draft</span></span><br></pre></td></tr></table></figure><h2 id="标签与分类"><a href="#标签与分类" class="headerlink" title="标签与分类"></a>标签与分类</h2><p>我们刚提到了标签，也提到了分类，那么标签和分类是什么，其区别是什么。</p><p>标签和分类都是用于对文章进行归档的一种方式，标签是一种列表结构，而分类是一种树结构。我们以人作为例子，从标签的角度考虑，我可以拥有程序员、高颜值、幽默等标签，这些标签之间没有层级关系；从分类的角度考虑，我是亚洲人、中国人、河南人，这些分类之间是有明确的包含关系的。</p><p>可以在Front-Matter中添加 <code>catergories</code> 和 <code>tags</code> 字段为文章添加标签和分类，如我为本文添加了 <strong>Hexo</strong> 和 <strong>Markdown</strong> 两个标签，并将其归类到了 <strong>技术/博客</strong> 类别，对应的Front-Matter结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: Hexo搭建个人博客系列：写作技巧篇</span><br><span class="line">tags: Hexo Markdown</span><br><span class="line">categories:</span><br><span class="line">- 技术</span><br><span class="line">- 博客</span><br></pre></td></tr></table></figure><h2 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h2><p>Markdown是一种标记语言，语法简单，易阅读易编写，可以让用户完全脱离鼠标写出样式丰富的文档，广受程序员喜爱，目前许多网站都已经支持通过Markdown语法来写文章或者发表评论。</p><table><thead><tr><th>元素</th><th>Markdown语法</th><th>效果预览</th></tr></thead><tbody><tr><td>标题</td><td><code># 标题1</code><br><code>## h2</code><br><code>### h3</code></td><td><div style="font-weight: bold"><div style="font-size: 24px">标题一</div><div style="font-size: 22px">标题二</div><div style="font-size: 20px">标题三</div></div></td></tr><tr><td>加粗</td><td><code>**文字加粗**</code></td><td><strong>文字加粗</strong></td></tr><tr><td>引用</td><td><code>&gt; 引用文字</code></td><td><blockquote>引用文字</blockquote></td></tr><tr><td>有序列表</td><td><code>1. 第一项</code><br><code>2. 第二项</code><br><code>3. 第三项</code></td><td><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></td></tr><tr><td>无序列表</td><td><code>- 第一项</code><br><code>- 第二项</code><br><code>- 第三项</code></td><td><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></td></tr><tr><td>链接</td><td><code>[链接](url)</code></td><td><a href="url">链接</a></td></tr><tr><td>图片</td><td><code>![图片](image.jpg)</code></td><td><i class="fa fa-image"></i></td></tr><tr><td>水平线</td><td><code>---</code></td><td><hr></td></tr><tr><td>代码</td><td><code>`code`</code></td><td><code>code</code></td></tr><tr><td>代码块</td><td><code>```code snippet```</code></td><td><figure class="highlight"><table><tbody><tr><td class="code"><pre>code snippet</pre></td></tr></tbody></table></figure></td></tr></tbody></table><div class="note info"><p>更多语法请参考 <a href="https://www.markdownguide.org/basic-syntax" target="_blank" rel="noopener">基础语法 | Markdown Guide</a> 和 <a href="https://www.markdownguide.org/extended-syntax" target="_blank" rel="noopener">扩展语法 | Markdown Guide</a></p></div><h1 id="Hexo内置标签"><a href="#Hexo内置标签" class="headerlink" title="Hexo内置标签"></a>Hexo内置标签</h1><div class="note info"><p>本章节参考 <a href="https://almostover.ru/2016-01/hexo-theme-next-test/" target="_blank" rel="noopener">Ivan.nginx | Hexo Theme Next主题样式测试</a> 及 <a href="https://theme-next.iissnan.com/tag-plugins.html" target="_blank" rel="noopener">内置标签 - NexT 使用文档</a></p></div><h2 id="文本居中标签"><a href="#文本居中标签" class="headerlink" title="文本居中标签"></a>文本居中标签</h2><p>居中标签效果如下：</p><blockquote class="blockquote-center"><p>我不去想是否能够成功，既然选择了远方，便只顾风雨兼程。</p></blockquote><p>一般在引用单行文本时使用，如作为文章开篇题词。</p><p>可以通过以下几种方式使用该标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 其中 class="blockquote-center" 是必须的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"blockquote-center"</span>&gt;</span>blah blah blah<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 标签方式 --&gt;</span></span><br><span class="line">&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 标签别名 --&gt;</span></span><br><span class="line">&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125;</span><br></pre></td></tr></table></figure><h2 id="代码块进阶用法"><a href="#代码块进阶用法" class="headerlink" title="代码块进阶用法"></a>代码块进阶用法</h2><p>可以通过为代码块附加参数的形式为其添加更丰富的信息提示，效果如下：</p><figure class="highlight js"><figcaption><span>Hellow World</span><a href="http://yearito.cn" target="_blank" rel="noopener">链接地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hello world!"</span>);</span><br></pre></td></tr></table></figure><p>代码块进阶语法规则：</p><div style="background-color: #f7f7f7; margin: 20px 0; padding: 10px;border-radius: 5px; font-family: consolas;">  &#x60;&#x60;&#x60; [language] [title] [url] [link text]<br>  code snippet <br>  &#x60;&#x60;&#x60;</div><p>其中，各参数意义如下：</p><ul><li>langugae：语言名称，引导渲染引擎正确解析并高亮显示关键字</li><li>title：代码块标题，将会显示在左上角</li><li>url：链接地址，如果没有指定link text则会在右上角显示link</li><li>link text：链接名称，指定url后有效，将会显示在右上角</li></ul><p>url 必须为有效链接地址才会以链接的形式显示在右上角，否则将作为标题显示在左上角。以url为分界，左侧除了第一个单词会被解析为language，其他所有单词都会被解析为title，而右侧的所有单词都会被解析为link text。</p><p>如果不想填写title，可以在language和url之间添加至少三个空格。</p><div class="note info"><p>代码块支持多种语言高亮预设，详细的语言列表可查看<a href="https://almostover.ru/2016-07/hexo-highlight-code-styles/" target="_blank" rel="noopener">Ivan.nginx | Hexo代码块中的颜色方案</a>。</p></div><p>可以在站点配置文件中设置 <code>highlight.auto_detect: true</code> 来开启自动语言检测高亮。</p><figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> highlight:</span><br><span class="line">   enable: true</span><br><span class="line">   line_number: false</span><br><span class="line"><span class="deletion">-  auto_detect: false</span></span><br><span class="line"><span class="addition">+  auto_detect: true</span></span><br><span class="line">   tab_replace:</span><br></pre></td></tr></table></figure><p>如果设置语言为diff，可以在代码前添加 <code>+</code> 和 <code>-</code> 来使用如上所示的高亮增删行提示效果，在展示代码改动痕迹时比较实用。</p><div class="note info"><p>更多代码块高亮的个性化设置请参见 <a href="https://www.ofind.cn/blog/HEXO/HEXO%E4%B8%8B%E7%9A%84%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE%E6%8B%93%E5%B1%95%E4%BF%AE%E6%94%B9.html#%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%A0%81%E6%B7%BB%E5%8A%A0%E5%88%A0%E9%99%A4%E6%A0%87%E8%AE%B0" target="_blank" rel="noopener">猪猪侠 | Hexo下的语法高亮拓展修改</a></p></div><h2 id="note标签"><a href="#note标签" class="headerlink" title="note标签"></a>note标签</h2><p>通过note标签可以为段落添加背景色，语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] %&#125;</span><br><span class="line">文本内容 (支持行内标签)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>支持的class种类包括 <code>default</code> <code>primary</code> <code>success</code> <code>info</code> <code>warning</code> <code>danger</code>，也可以不指定class。</p><p>各种class种类的效果如下：</p><div class="note primary"><p><strong>primary</strong> note tag</p></div><div class="note success"><p><strong>success</strong> note tag</p></div><div class="note info"><p><strong>info</strong> note tag</p></div><div class="note warning"><p><strong>warning</strong> note tag</p></div><div class="note danger"><p><strong>danger</strong> note tag</p></div><div class="note "><p>undefined class note tag</p></div><p>更多配置可在主题配置文件中设置</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note 标签样式预设</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">modern</span>  <span class="comment"># simple | modern | flat | disabled</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span>  <span class="comment"># 是否显示图标</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span>  <span class="comment"># 圆角半径</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span>  <span class="comment"># 默认背景减淡效果，以百分比计算</span></span><br></pre></td></tr></table></figure><h2 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h2><p>通过label标签可以为文字添加背景色，语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label [class]@text  %&#125;</span><br></pre></td></tr></table></figure><p>支持的class种类包括 <code>default</code> <code>primary</code> <code>success</code> <code>info</code> <code>warning</code> <code>danger</code>，默认使用 <code>default</code> 作为缺省。</p><p>使用示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">I heard the echo, &#123;% label default@from the valleys and the heart %&#125;</span><br><span class="line">Open to the lonely soul of &#123;% label info@sickle harvesting %&#125;</span><br><span class="line">Repeat outrightly, but also repeat the well-being of</span><br><span class="line">Eventually &#123;% label warning@swaying in the desert oasis %&#125;</span><br><span class="line">&#123;% label success@I believe %&#125; I am</span><br><span class="line">&#123;% label primary@Born as the bright summer flowers %&#125;</span><br><span class="line">Do not withered undefeated fiery demon rule</span><br><span class="line">Heart rate and breathing to bear &#123;% label danger@the load of the cumbersome %&#125;</span><br><span class="line">Bored</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center"><p>I heard the echo, <span class="label default">from the valleys and the heart</span><br>Open to the lonely soul of <span class="label info">sickle harvesting</span><br>Repeat outrightly, but also repeat the well-being of<br>Eventually <span class="label warning">swaying in the desert oasis</span><br><span class="label success">I believe</span> I am <br><span class="label primary">Born as the bright summer flowers</span><br>Do not withered undefeated fiery demon rule<br>Heart rate and breathing to bear <span class="label danger">the load of the cumbersome</span><br>Bored</p></blockquote><p>可在主题配置文件中设置 <code>label: false</code> 来取消label标签默认CSS样式。</p><h2 id="button按钮"><a href="#button按钮" class="headerlink" title="button按钮"></a>button按钮</h2><p>通过button标签可以快速添加带有主题样式的按钮，语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% button /path/to/url/, text, icon [class], title %&#125;</span><br></pre></td></tr></table></figure><p>也可简写为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn /path/to/url/, text, icon [class], title %&#125;</span><br></pre></td></tr></table></figure><p>其中， 图标ID来源于 <a href="https://fontawesome.com/v4.7.0/icons/" target="_blank" rel="noopener">FontAwesome</a> 。</p><p>使用示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn #, 文本 %&#125;</span><br><span class="line">&#123;% btn #, 文本 &amp; 标题,, 标题 %&#125;</span><br><span class="line">&#123;% btn #, 文本 &amp; 图标, home %&#125;</span><br><span class="line">&#123;% btn #, 文本 &amp; 大图标 (固定宽度), home fa-fw fa-lg %&#125;</span><br></pre></td></tr></table></figure><p><a class="btn" href="#">文本</a></p><p><a class="btn" href="#" title="标题">文本 & 标题</a></p><p><a class="btn" href="#"><i class="fa fa-home"></i>文本 & 图标</a></p><p><a class="btn" href="#"><i class="fa fa-home fa-fw fa-lg"></i>文本 & 大图标 (固定宽度)</a></p><h2 id="tab标签"><a href="#tab标签" class="headerlink" title="tab标签"></a>tab标签</h2><p>tab标签用于快速创建tab选项卡，语法如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs [Unique name], [index] %&#125;</span><br><span class="line">  <span class="comment">&lt;!-- tab [Tab caption]@[icon] --&gt;</span></span><br><span class="line">  标签页内容（支持行内标签）</span><br><span class="line">  <span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>其中，各参数意义如下：</p><ul><li>Unique name: 全局唯一的Tab名称，将作为各个标签页的id属性前缀</li><li>index: 当前激活的标签页索引，如果未定义则默认选中显示第一个标签页，如果设为-1则默认隐藏所有标签页</li><li>Tab caption: 当前标签页的标题，如果不指定则会以Unique name加上索引作为标题</li><li>icon: 在标签页标题中添加Font awesome图标</li></ul><p>使用示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Tab标签列表 %&#125;</span><br><span class="line">  &lt;!-- tab 标签页1 --&gt;</span><br><span class="line">    标签页1文本内容</span><br><span class="line">  &lt;!-- endtab --&gt;</span><br><span class="line">  &lt;!-- tab 标签页2 --&gt;</span><br><span class="line">    标签页2文本内容</span><br><span class="line">  &lt;!-- endtab --&gt;</span><br><span class="line">  &lt;!-- tab 标签页3 --&gt;</span><br><span class="line">    标签页3文本内容</span><br><span class="line">  &lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="tab标签列表"><ul class="nav-tabs"><li class="tab active"><a href="#tab标签列表-1">标签页1</a></li><li class="tab"><a href="#tab标签列表-2">标签页2</a></li><li class="tab"><a href="#tab标签列表-3">标签页3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab标签列表-1"><p>  标签页1文本内容</p></div><div class="tab-pane" id="tab标签列表-2"><p>  标签页2文本内容</p></div><div class="tab-pane" id="tab标签列表-3"><p>  标签页3文本内容</p></div></div></div><h2 id="引用站内链接"><a href="#引用站内链接" class="headerlink" title="引用站内链接"></a>引用站内链接</h2><p>可以通过如下语法引入站内文章的地址或链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_path slug %&#125;</span><br><span class="line">&#123;% post_link slug [title] %&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>slug</code> 表示 <code>_post</code> 目录下的Markdown文件名。</p><p><code>post_path</code> 标签将会渲染为文章的地址，即 <code>permalink</code>；而 <code>post_link</code> 标签将会渲染为链接，可以通过 <code>title</code> 指定链接标题。</p><p>如以下标签将会生成 <code>/posts/hexo-writing-skills.html</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_path hexo-writing-skills %&#125;</span><br></pre></td></tr></table></figure><p>而以下标签则会生成 <a href="/posts/hexo-writing-skills.html" title="链接标题">链接标题</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link hexo-writing-skills 链接标题 %&#125;</span><br></pre></td></tr></table></figure><p>这种站内引用方式比直接使用url引用的形式更为可靠，因为即使修改了 <code>permalink</code> 格式，或者修改了文章的路由地址，只要Markdown文件名没有发生改变，引用链接都不会失效。</p><h2 id="插入Swig代码"><a href="#插入Swig代码" class="headerlink" title="插入Swig代码"></a>插入Swig代码</h2><p>如果需要在页面内插入Swig代码，包括原生HTML代码，JavaScript脚本等，可以通过 raw 标签来禁止Markdown引擎渲染标签内的内容。语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><p>该标签通常用于在页面内引入三方脚本实现特殊功能，尤其是当该三方脚本尚无相关hexo插件支持的时候，可以通过写原生Web页面的形式引入脚本并编写实现逻辑。</p><h2 id="插入Gist"><a href="#插入Gist" class="headerlink" title="插入Gist"></a>插入Gist</h2><p>如果需要在页面内插入Gist上的代码片段时，可以使用如下标签:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gist gist_id [filename] %&#125;</span><br></pre></td></tr></table></figure><p>其中，各参数意义如下：</p><ul><li>gist_id: Gist仓库页面url中最后一段随机字符串</li><li>filename: Gist中的文件名</li></ul><p>如果Gist中只有一个文件，可以不用指定filename，也可以通过JavaScript脚本的形式直接引入，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://gist.github.com/Coodool/cb4ff46a3523955dd4b918dd775b6774.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果Gist中有多个文件，可以在标签内输入filename来指定只引入某个文件，如果没有指定filename，将会引入Gist中的所有文件。另外，引用JavaScript脚本形式无法精确控制只引入某一个文件，将会同时引入Gist中的所有文件。</p><p>如果指定了与Gist无法匹配的filename，页面上将不会显示任何标签内容。所以，一般在Gist只有一个文件的情况下无需指定filename。</p><div class="note warning"><p>在页面中引入Gist代码段将会同时从github服务器上下载脚本与CSS样式文件，由于国内访问github服务器延迟较高，往往资源文件连接和下载的速度很慢，会阻塞页面的渲染进程导致短时白屏。</p></div><h1 id="插入多媒体"><a href="#插入多媒体" class="headerlink" title="插入多媒体"></a>插入多媒体</h1><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>Markdown并不会保存插入的图片资源本身，只是记录了获取资源的链接。因此我们需要选择一款合适的图床来支持博客写作，目前各大云服务商都提供了对象存储服务，如七牛云KODO、又拍云USS、腾讯云COS、阿里云OSS等。</p><p>所以在Markdown中插入一张图片要分为以下几步来进行：</p><ol><li>将图片资源上传到图床中</li><li>获取图片外链</li><li>插入到Markdown文档中</li></ol><p>对于博客这种低频访问的应用场景，各大服务商的服务其实并没有显著的差异，并且前期的使用都提供了免费的流量，所以我认为图床的选择主要参考以下几个方面：</p><ul><li><p>图床是否提供了便捷的图形化管理工具用于图片的上传下载？</p><p>如阿里云有ossbrowser，腾讯云有cosbrowser，七牛云有QsunSync等，但就本人使用体验来说，七牛云QsunSync的UI界面确实很拙劣，功能较为单一，而腾讯云cosbrowser的界面就相对美观优雅的多，并以Windows资源管理器的交互方式为用户提供资源的上传、下载和管理服务。</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181023103058966.png" alt="腾讯云COS客户端界面截图" title="腾讯云COS客户端界面截图"></p></li><li><p>是否能够方便的插入到Markdown文档中？</p><p>这就和服务商的关系不大了，主要看主流Markdown文档编辑器对各大图床的支持程度。其实关于在Markdown中更便捷的插入图片这事儿，最上心的还是文档编辑器的开发者，为了给用户提供更方便的文档写作体验，各大文档编辑器以及支持了Markdown语法的笔记软件都花了不少心思，解决方案无外乎两种，第一种是内置图片存储服务，如有道云笔记（需付费）、石墨文档，第二种是集成了云服务商的图床服务，如Hexo Editor、Mweb等，前者插入图片方便，适用于个人笔记，而后者能够提供CDN加速服务，适用于博客等公开文档。</p><p>其中Hexo Editor支持腾讯云和七牛云的一键上传服务，MWeb支持Imgur、七牛云、又拍云，也可自定义图床服务。</p></li></ul><div class="note info"><p>本站使用腾讯云COS提供对象存储服务。</p></div><h2 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h2><p>在网页版云音乐中找到歌曲，点击生成外链播放器：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181104044431732.png" alt="获取歌曲外链" title="获取歌曲外链"></p><p>根据个人喜好选择播放器尺寸和播放模式：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181104044659251.png" alt="获取插件代码" title="获取插件代码"></p><p>将获取到的 <code>iframe</code> 代码添加到页面中，默认样式如下：</p><div class="fluid-vids" style="position: relative; margin-bottom: 20px; width: 100%; padding-top: 10.75%;"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="329" height="86" src="//music.163.com/outchain/player?type=2&amp;id=34613621&amp;auto=0&amp;height=66" style="width: 100%; height: 100%; position: absolute; top: 0px; left: 0px;"></iframe></div><p>播放器宽度将会被拉长占满整个页宽，看起来有点别扭。查看控制台之后发现 <code>iframe</code> 在渲染的时候被处理过，外层包了一个类名为 <code>fluid-vids</code> 的 <code>div</code> 元素。顺藤摸瓜，找到了相关代码，原来是为了让嵌入的视频支持自适应布局，恰好也将 <code>music.163.com</code> 域名包含在了处理逻辑内，只需要将该行删除即可。</p><figure class="highlight js"><figcaption><span>themes\next\source\js\src\utils.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> SUPPORTED_PLAYERS = [</span><br><span class="line">  <span class="string">'www.youtube.com'</span>,</span><br><span class="line">  <span class="string">'player.vimeo.com'</span>,</span><br><span class="line">  <span class="string">'player.youku.com'</span>,</span><br><span class="line">  <span class="comment">//'music.163.com',</span></span><br><span class="line">  <span class="string">'www.tudou.com'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>这样播放器样式就变成左对齐固定宽度了，如果你还想让播放器居中，可以将 <code>iframe</code> 包在 <code>&lt;center&gt;</code> 标签内。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">329</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">"//music.163.com/outchain/player?type=2&amp;id=34613621&amp;auto=0&amp;height=66"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><center>  <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="329" height="86" src="//music.163.com/outchain/player?type=2&id=34613621&auto=0&height=66">  </iframe></center><div class="note warning"><p>其实这种通过HTML标签实现CSS样式的做法并不合适，写前端代码的时候不推荐这么做，并且HTML5中也已经废除了 <code>&lt;center&gt;</code> <code>&lt;strong&gt;</code> 等纯粹为了改变样式而存在的HTML标签，HTML标签应该只负责文档结构，所有样式相关的工作应该交给CSS来实现。</p></div><p>如果你发现播放器前后都有空行，可以在控制台中查看元素，检查 <code>iframe</code> 元素前后是否多了 <code>&lt;br&gt;</code> 元素：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181027111824579.png" alt="播放器前后空行代码" title="播放器前后空行代码"></p><p>造成这样的原因是Markdown渲染引擎把 <code>&lt;center&gt;</code> 标签和 <code>&lt;iframe&gt;</code> 标签之间的回车当作 <code>&lt;br&gt;</code> 来处理了。参考链接: <a href="https://github.com/hexojs/hexo/issues/1388" target="_blank" rel="noopener">Hexo issues #1388</a></p><p>简单的解决方案是将HTML标签写到一行内，但这样会降低代码可编辑性。</p><p>另外一种方案是在站点配置文件中添加如下代码：</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">gfm:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">breaks:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>重启服务器之后更改才会生效。</p><div class="note warning"><p>网易云音乐中部分歌曲因版权保护已经无法生成外链了，即使是通过控制台强行拿到外链地址，嵌入网页后也无法播放。</p></div><h2 id="Aplayer音频播放器"><a href="#Aplayer音频播放器" class="headerlink" title="Aplayer音频播放器"></a>Aplayer音频播放器</h2><p><a href="https://aplayer.js.org/#/" target="_blank" rel="noopener">APlayer</a>是由 <a href="https://github.com/DIYgod" target="_blank" rel="noopener">DIYgod</a> 编写的HTML5音频播放器，提供了另一种音频播放方案。</p><div class="note "><p>了解诞生背景： <a href="https://diygod.me/2167/" target="_blank" rel="noopener">APlayer - 送给小狐狸和小兔子的 HTML5 播放器</a></p></div><p>借助 <a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="noopener">hexo-tag-aplayer</a> 插件，可以通过标签的形式方便快捷的插入音频组件。</p><p>在站点根目录下执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-tag-aplayer --save</span><br></pre></td></tr></table></figure><p>然后在页面中按照以下标签格式插入歌曲链接和相关信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure><p>其中，各参数意义如下：</p><ul><li>title: 曲目标题</li><li>author: 曲目作者</li><li>url: 音乐文件 URL 地址</li><li>picture_url: (可选) 音乐对应的图片地址</li><li>narrow: （可选）播放器袖珍风格</li><li>autoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能</li><li>width:xxx: (可选) 播放器宽度 (默认: 100%)</li><li>lrc:xxx: （可选）歌词文件 URL 地址</li></ul><p>示例效果如下：</p>        <div id="aplayer-GtBywvvt" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-GtBywvvt"),            narrow: false,            autoplay: false,            showlrc: 3,            music: {              title: "前前世世 -《君の名は。》",              author: "RADWIMPS",              url: "https://moeplayer.b0.upaiyun.com/aplayer/yourname.mp3",              pic: "http://pic.5577.com/up/2016-12/201612891712576.png",              lrc: "https://moeplayer.b0.upaiyun.com/aplayer/yourname.lrc"            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>当开启 Hexo 的 <a href="https://hexo.io/zh-cn/docs/asset-folders.html#%E6%96%87%E7%AB%A0%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%B9" target="_blank" rel="noopener">文章资源文件夹</a> 功能时，可以将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer &quot;Caffeine&quot; &quot;Jeff Williams&quot; &quot;caffeine.mp3&quot; &quot;picture.jpg&quot; &quot;lrc:caffeine.txt&quot; %&#125;</span><br></pre></td></tr></table></figure><p>如果想要统一实现固定宽度和居中样式，可以在自定义样式文件中添加如下样式规则</p><figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//Aplayer 播放器居中</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.aplayer</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span> auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info"><p>插入播放列表功能请参考： <a href="https://github.com/MoePlayer/hexo-tag-aplayer#with-playlist" target="_blank" rel="noopener">hexo-tag-aplayer | With playlist</a></p></div><h2 id="Dpalyer视频播放器"><a href="#Dpalyer视频播放器" class="headerlink" title="Dpalyer视频播放器"></a>Dpalyer视频播放器</h2><p><a href="http://dplayer.js.org/#/" target="_blank" rel="noopener">DPlayer</a> 是一款简洁美观的HTML5视频播放器，同样出自 <a href="https://github.com/DIYgod" target="_blank" rel="noopener">DIYgod</a> 之手，支持弹幕互动。</p><div class="note "><p>了解诞生背景： <a href="https://diygod.me/2648/" target="_blank" rel="noopener">DPlayer – 最好看的弹幕播放器送给最好看的宫园薰</a></p></div><p>借助 <a href="https://github.com/MoePlayer/hexo-tag-dplayer" target="_blank" rel="noopener">hexo-tag-dplayer</a> 插件，可以通过标签的形式方便快捷的插入视频组件。</p><p>在站点根目录下执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-tag-dplayer --save</span><br></pre></td></tr></table></figure><p>然后在页面中按照以下标签格式插入歌曲链接和相关信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% dplayer &quot;url=video-url&quot; &quot;pic=image-url&quot; ... [&quot;key=value&quot;] %&#125;</span><br></pre></td></tr></table></figure><p>此处列举部分重要 <code>key</code> 的参数意义:</p><div class="tabs" id="tab标签列表"><ul class="nav-tabs"><li class="tab active"><a href="#tab标签列表-1">播放器</a></li><li class="tab"><a href="#tab标签列表-2">视频</a></li><li class="tab"><a href="#tab标签列表-3">字幕</a></li><li class="tab"><a href="#tab标签列表-4">弹幕</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab标签列表-1"><ul><li>autoplay：是否开启视频自动播放，默认为 <code>fasle</code></li><li>loop：是否开启视频循环播放，默认为 <code>false</code></li><li>screenshot：是否开启截图，默认为 <code>false</code></li><li>mutex：是否禁止多个播放器同时播放，默认为 <code>true</code></li><li>dmunlimited：是否开启海量弹幕模式，默认为 <code>false</code></li><li>preload：预加载模式，可选 <code>note</code> <code>metadata</code> <code>auto</code></li><li>theme：主题色</li><li>lang：语言，可选 <code>en</code> <code>zh-cn</code> <code>zh-tw</code></li><li>logo：左上角的Logo</li><li>volume：默认音量，默认为0.7</li><li>width：播放器宽度</li><li>height：播放器长度</li></ul></div><div class="tab-pane" id="tab标签列表-2"><ul><li>url：视频链接</li><li>pic：视频封面</li><li>thumbnails：视频缩略图，可以使用 <a href="https://github.com/MoePlayer/DPlayer-thumbnails" target="_blank" rel="noopener">DPlayer-thumbnails</a> 生成</li><li>vidtype：视频类型，可选 <code>auto</code> <code>hls</code> <code>flv</code> <code>dash</code> 或其他自定义类型</li></ul></div><div class="tab-pane" id="tab标签列表-3"><ul><li>suburl：字幕链接</li><li>subtype：字幕类型，可选 <code>webvtt</code> <code>ass</code>，目前只支持 <code>webvtt</code></li><li>subbottom：字幕距离播放器底部的距离，如 <code>10px</code> <code>10%</code></li><li>subcolor：字幕颜色</li></ul></div><div class="tab-pane" id="tab标签列表-4"><ul><li>id：弹幕id</li><li>api：弹幕api</li><li>token：弹幕后端验证 token</li><li>addition：额外外挂弹幕</li><li>dmuser：弹幕用户名</li><li>maximum：弹幕最大数量</li></ul></div></div></div><p>示例效果如下：</p><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":true,"screenshot":true,"video":{"url":"https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.mp4","pic":"https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.png"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>也可以通过raw标签引入原生Dplayer以使用更多配置项，示例代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dplayer"</span> <span class="attr">className</span>=<span class="string">"dplayer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">class</span>=<span class="string">"dplayer-css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/dplayer/dist/DPlayer.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> dp = <span class="keyword">new</span> DPlayer(&#123;</span></span><br><span class="line"><span class="javascript">    container: <span class="built_in">document</span>.querySelector(<span class="string">'#dplayer'</span>),</span></span><br><span class="line"><span class="javascript">    autoplay: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">    theme: <span class="string">'#FADFA3'</span>,</span></span><br><span class="line"><span class="javascript">    loop: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">    screenshot: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">    hotkey: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">    logo: <span class="string">'logo.png'</span>,</span></span><br><span class="line">    volume: 0.7,</span><br><span class="line"><span class="javascript">    mutex: <span class="literal">true</span>,</span></span><br><span class="line">    video: &#123;</span><br><span class="line"><span class="javascript">      url: <span class="string">'demo.mp4'</span>,</span></span><br><span class="line"><span class="javascript">      pic: <span class="string">'demo.png'</span>,</span></span><br><span class="line"><span class="javascript">      thumbnails: <span class="string">'thumbnails.jpg'</span>,</span></span><br><span class="line"><span class="javascript">      type: <span class="string">'auto'</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    subtitle: &#123;</span><br><span class="line"><span class="javascript">      url: <span class="string">'webvtt.vtt'</span>,</span></span><br><span class="line"><span class="javascript">      type: <span class="string">'webvtt'</span>,</span></span><br><span class="line"><span class="javascript">      fontSize: <span class="string">'25px'</span>,</span></span><br><span class="line"><span class="javascript">      bottom: <span class="string">'10%'</span>,</span></span><br><span class="line"><span class="javascript">      color: <span class="string">'#b7daff'</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    danmaku: &#123;</span><br><span class="line"><span class="javascript">      id: <span class="string">'demo'</span>,</span></span><br><span class="line"><span class="javascript">      api: <span class="string">'https://api.prprpr.me/dplayer/'</span>,</span></span><br><span class="line"><span class="javascript">      token: <span class="string">'demo'</span>,</span></span><br><span class="line">      maximum: 3000,</span><br><span class="line"><span class="javascript">      user: <span class="string">'DIYgod'</span>,</span></span><br><span class="line">      margin: &#123;</span><br><span class="line"><span class="javascript">        bottom: <span class="string">'15%'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      unlimited: <span class="literal">true</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    contextmenu: [</span><br><span class="line">      &#123;</span><br><span class="line"><span class="javascript">        text: <span class="string">'custom contextmenu'</span>,</span></span><br><span class="line"><span class="javascript">        link: <span class="string">'https://github.com/MoePlayer/DPlayer'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><div class="note info"><p>更多配置参数请参考 <a href="http://dplayer.js.org/#/zh-Hans/?id=%E5%8F%82%E6%95%B0" target="_blank" rel="noopener">Dplayer 官方中文文档</a></p></div><h1 id="写作工具"><a href="#写作工具" class="headerlink" title="写作工具"></a>写作工具</h1><p>Hexo写作必备一款好用的Markdown文档编辑器，下面推荐几款我比较喜欢的。</p><h2 id="Sublime-Text-3"><a href="#Sublime-Text-3" class="headerlink" title="Sublime Text 3"></a>Sublime Text 3</h2><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181106041459974.png" alt="Sublime Text 3 用户界面" title="Sublime Text 3 用户界面"></p><p>Sublime Text 3 是一款轻量级的文档编辑器，响应速度极快，社区活跃，主题插件也很丰富，在Windows下可以取代记事本成为默认的文档编辑器，也可以通过集成不同的编程依赖包成为功能强大的IDE，还可以搭配上Markdown插件成为网络作家的写作工具。</p><p>推荐两个比较实用的Markdown写作插件：Markdown Editing和OmniMarkupPreviewer。</p><h3 id="Markdown-Editing"><a href="#Markdown-Editing" class="headerlink" title="Markdown Editing"></a><a href="https://github.com/SublimeText-Markdown/MarkdownEditing" target="_blank" rel="noopener">Markdown Editing</a></h3><p>支持Markdown语法高亮，提供Markdown编辑的快捷键，提供多种主题样式。</p><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>Ctrl + Alt + V</td><td>在选中文本上创建行内链接或将剪贴板内容粘贴为所选文本的行内链接</td></tr><tr><td>Ctrl + Alt + R</td><td>在选中文本上创建参考式链接或将剪贴板内容粘贴为所选文本的参考式链接</td></tr><tr><td>Shift + Win + K</td><td>在选中文本上创建行内图片或将剪贴板内容粘贴为所选文本的行内图片</td></tr><tr><td>Alt + B</td><td>加粗强调，当未选中文本时默认加粗光标所在单词，再次按键取消加粗</td></tr><tr><td>Alt + I</td><td>斜体强调，当未选中文本时默认倾斜光标所在单词，再次按键取消斜体</td></tr><tr><td>Ctrl + 1~6</td><td>在空行上添加对应数字级别的标题，选中已有标题时按键可修改标题级别</td></tr><tr><td>Alt + Shift + 6</td><td>添加脚注</td></tr><tr><td>Shift + Tab</td><td>折叠/展开当前章节</td></tr><tr><td>Ctrl + Shift + Tab</td><td>折叠指定级别下的所有章节</td></tr><tr><td>Ctrl + Alt + Shift + PageUp/PageDown</td><td>跳转到上/下一个同级或更高级的其他标题</td></tr><tr><td>Ctrl + Shift + PageUp/PageDown</td><td>跳转到上/下一个标题</td></tr><tr><td>Ctrl + Shift + R</td><td>显示Markdown文件标题</td></tr></tbody></table><h3 id="OmniMarkupPreviewer"><a href="#OmniMarkupPreviewer" class="headerlink" title="OmniMarkupPreviewer"></a><a href="https://github.com/timonwong/OmniMarkupPreviewer" target="_blank" rel="noopener">OmniMarkupPreviewer</a></h3><p>用于在浏览器中实时预览Markdown文档，用户可以边在Sublime中写作边在浏览器中查看文档的实时变化，而不需要手动刷新浏览器。</p><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>Ctrl + Alt + O</td><td>在浏览器中预览</td></tr><tr><td>Ctrl + Alt + X</td><td>导出为HMTL</td></tr><tr><td>Ctrl + Alt + C</td><td>以HTML格式拷贝到剪贴板</td></tr></tbody></table><div class="note warning"><p>PlainTasks插件（一款Todo List工具）会与OmniMarkupPreviewer产生冲突，导致OmniMarkupPreviewer功能异常，如编辑后无法实时预览，<a href="https://github.com/timonwong/OmniMarkupPreviewer/issues/111" target="_blank" rel="noopener">资源样式加载错误</a> 等。如果不想卸载PlainTasks，可以在使用OmniMarkupPreviewer时暂时禁用PlainTasks，具体做法为在Sublime Text的User Settings中添加如下代码：</p></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"ignored_packages":[</span><br><span class="line">  <span class="string">"PlainTasks"</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure><h2 id="Hexo-Editor"><a href="#Hexo-Editor" class="headerlink" title="Hexo Editor"></a><a href="https://github.com/zhuzhuyule/HexoEditor" target="_blank" rel="noopener">Hexo Editor</a></h2><p>Hexo Editor是专为Hexo博客写作打造的文件编辑器，界面极简美观，支持实时预览，支持图片上传。</p><p><img src="https://raw.githubusercontent.com/zhuzhuyule/HexoEditor/master/screenshots/main.png" alt="Hexo Editor 用户界面" title="Hexo Editor 用户界面"></p><div class="note warning"><p>本人在实际使用过程中发现该软件功能不太稳定，插入图片有时候会卡顿，甚至出现程序崩溃的现象。</p></div><h3 id="编辑快捷键"><a href="#编辑快捷键" class="headerlink" title="编辑快捷键"></a>编辑快捷键</h3><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>Tab</td><td>增加缩进</td></tr><tr><td>Shift + Tab</td><td>减少缩进</td></tr><tr><td>Ctrl + B</td><td>加粗</td></tr><tr><td>Ctrl + I</td><td>斜体</td></tr><tr><td>Ctrl + D</td><td>删除当前行</td></tr><tr><td>Ctrl + `</td><td>将当前单词标记为代码</td></tr><tr><td>Ctrl + L</td><td>插入无序列表</td></tr><tr><td>Ctrl + Alt + L</td><td>插入有序列表</td></tr><tr><td>Ctrl + ]</td><td>降低标题级别</td></tr><tr><td>Ctrl + [</td><td>提升标题级别</td></tr><tr><td>Ctrl + =</td><td>插入引用</td></tr><tr><td>Ctrl + U</td><td>插入链接</td></tr><tr><td>Ctrl + Alt + U</td><td>插入图片</td></tr><tr><td>Ctrl + T</td><td>插入表格</td></tr><tr><td>Ctrl + V</td><td>粘贴为纯文本（去除格式）</td></tr><tr><td>Shift + Ctrl + V</td><td>粘贴（保留源格式）</td></tr><tr><td>Alt + F</td><td>格式化表格</td></tr></tbody></table><h3 id="操作快捷键"><a href="#操作快捷键" class="headerlink" title="操作快捷键"></a>操作快捷键</h3><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>Ctrl + N</td><td>新建Hexo文档</td></tr><tr><td>Ctrl + H</td><td>new hexo document</td></tr><tr><td>Ctrl + O</td><td>open md document</td></tr><tr><td>Ctrl + S</td><td>save md document</td></tr><tr><td>Shift + Ctrl + S</td><td>save as</td></tr><tr><td>Alt + Ctrl + S</td><td>open settings</td></tr><tr><td>Ctrl + W</td><td>toggle write mode</td></tr><tr><td>Ctrl + P</td><td>toggle preview mode</td></tr><tr><td>Ctrl + R</td><td>toggle read mode</td></tr></tbody></table><h2 id="MWeb"><a href="#MWeb" class="headerlink" title="MWeb"></a>MWeb</h2><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181023095629471.png" alt="Mweb 用户界面" title="Mweb 用户界面"></p><p>MWeb是Mac平台上一款专业的Markdown写作、记笔记、静态博客生成软件，支持图片上传。他的与众不同在于，除了具备一般Markdown编辑器所具有的一切基本功能之外，还支持以下特性：</p><ul><li>支持LaTeX公式、TOC</li><li>支持丰富的画图库，如mermaid、Graphviz、echarts、plantuml、流程图、时序图等</li><li>支持插入图片后自动上传到图床</li><li>拥有及其强大的发布功能，支持一键发布到各大博客平台和笔记软件中</li></ul><p>尽管拥有如此丰富的特性，但界面仍保持清爽简洁，开发者说到：</p><blockquote><p>原则上，首先是追求界面简洁和高性能，然后才是强大易用，功能全面。</p></blockquote><p>目前由oulvhai一人独自开发维护。</p><h2 id="Dillinger"><a href="#Dillinger" class="headerlink" title="Dillinger"></a><a href="https://dillinger.io/" target="_blank" rel="noopener">Dillinger</a></h2><p>一款优雅的在线Markdown编辑器，界面美观简洁。</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181020114433264.png" alt="Dillinger 用户界面" title="Dillinger 用户界面"></p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>本文介绍了Hexo博客的几项关键写作技巧，包括Markdown的基本语法，Hexo主题的内置标签等，本文还介绍了如何在文章中利用图床外链插入图片，如何利用Aplayer / Dplayer等音视频播放器插件在页面内插入多媒体元素等，并列举了几款写作工具以供选择，希望你能从中找到用起来最顺手的一款。如果你有更高级的个性化需求，你可以关注本系列的后续几篇文章：</p><ul><li>想要进一步美化主题，添加动效以及交互，请参考本系列中的 <a href="/posts/hexo-theme-beautify.html" title="Hexo搭建个人博客系列：主题美化篇">Hexo搭建个人博客系列：主题美化篇</a>。</li><li>想要深度定制个性化站点，请参考本系列中的 <a href="/posts/hexo-advanced-settings.html" title="Hexo搭建个人博客系列：进阶设置篇">Hexo搭建个人博客系列：进阶设置篇</a>。</li><li>想要了解如何将站点部署到公网，请参考本系列中的 <a href="/posts/hexo-deploy-to-VPS.html" title="Hexo搭建个人博客系列：部署上线篇">Hexo搭建个人博客系列：部署上线篇</a></li></ul><div class="reference-linking">参考链接</div><ul><li><a href="https://www.markdownguide.org/" target="_blank" rel="noopener">Markdown指南</a></li><li><a href="https://theme-next.iissnan.com/tag-plugins.html" target="_blank" rel="noopener">NexT使用文档 | 内置标签</a></li><li><a href="https://almostover.ru/2016-01/hexo-theme-next-test/" target="_blank" rel="noopener">Ivan.Nginx | Hexo Theme Next主题样式测试</a></li><li><a href="https://almostover.ru/2016-07/hexo-highlight-code-styles/" target="_blank" rel="noopener">Ivan.Nginx | Hexo代码块中的颜色方案</a></li><li><a href="https://www.ofind.cn/blog/HEXO/HEXO下的语法高亮拓展修改.html" target="_blank" rel="noopener">猪猪侠 | Hexo下的语法高亮拓展修改</a></li><li><a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md" target="_blank" rel="noopener">hexo-tag-aplayer | 中文文档</a></li><li><a href="https://github.com/MoePlayer/hexo-tag-dplayer" target="_blank" rel="noopener">hexo-tag-dplayer | README</a></li><li><a href="http://dplayer.js.org/#/zh-Hans/" target="_blank" rel="noopener">Dplayer 官方中文文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://yearito-1256884783.image.myqcloud.com/thumbnails/mist.jpg!thumbnail&quot; alt=&quot;题图&quot; title=&quot;Photo by Henri Prestes&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文介绍Hexo博客的写作技巧。&lt;/p&gt;
&lt;p&gt;第一章中介绍了Hexo中写作相关的基本概念，包括三种基本布局，标签与分类，Markdown写作语法。&lt;/p&gt;
&lt;p&gt;第二章中介绍了Hexo中常用的内置标签，包括note标签、label标签、button标签、tab标签以及代码块的高级用法，通过使用写作标签可以快速编写样式丰富的文档片段。&lt;/p&gt;
&lt;p&gt;第三章中介绍了在文档中插入图片、音乐、视频等多媒体元素的方案。&lt;/p&gt;
&lt;p&gt;第四章中根据个人使用经验为大家推荐了几款优雅实用的Markdown写作工具。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://freegale.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="博客" scheme="http://freegale.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://freegale.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客系列：基础建站篇</title>
    <link href="http://freegale.github.io/posts/hexo-get-started.html"/>
    <id>http://freegale.github.io/posts/hexo-get-started.html</id>
    <published>2018-11-20T12:09:51.000Z</published>
    <updated>2020-11-05T12:16:14.154Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://yearito-1256884783.image.myqcloud.com/thumbnails/forest.jpg!thumbnail" alt="题图" title="Photo by Ronald Jansen"></p><p>Hexo是一个高效简洁的静态博客框架，支持Markdown写作语法，插件丰富，主题优雅，部署方便。目前已成为多数人博客建站的选择。</p><p>本文为Hexo搭建个人博客系列中的第一篇。第一章中介绍了如何在本地搭建Hexo博客，第二章中介绍了如何安装使用Next主题，第三章和第四章分别介绍了针对于站点和文章详情页的一些基础优化方案。</p><a id="more"></a><h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><p>在命令行中通过npm来安装Hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><code>-g</code> 表示全局安装，会将Hexo命令加入环境变量中，以使其在cmd下有效。</p><div class="note info"><p>Hexo依赖于<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a>和<a href="https://git-scm.com/download/" target="_blank" rel="noopener">git</a>，所以在安装Hexo之前先确保已安装了这两项应用。</p></div><p>新建博客目录，然后在该路径下执行初始化命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><div class="note info"><p>官方教程中提到要在项目目录下执行 <code>npm install</code> 命令，事实上不必如此，在执行 <code>hexo init</code> 的过程中就已经自动安装好了项目依赖。</p></div><p>执行完毕后，将会生成以下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── node_modules       //依赖安装目录</span><br><span class="line">├── scaffolds          //模板文件夹，新建的文章将会从此目录下的文件中继承格式</span><br><span class="line">|   ├── draft.md         //草稿模板</span><br><span class="line">|   ├── page.md          //页面模板</span><br><span class="line">|   └── post.md          //文章模板</span><br><span class="line">├── source             //资源文件夹，用于放置图片、数据、文章等资源</span><br><span class="line">|   └── _posts           //文章目录</span><br><span class="line">├── themes             //主题文件夹</span><br><span class="line">|   └── landscape        //默认主题</span><br><span class="line">├── .gitignore         //指定不纳入git版本控制的文件</span><br><span class="line">├── _config.yml        //站点配置文件</span><br><span class="line">├── db.json            </span><br><span class="line">├── package.json</span><br><span class="line">└── package-lock.json</span><br></pre></td></tr></table></figure><p>在根目录下执行如下命令启动hexo的内置Web服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>该命令将会调用Markdown引擎解析项目中的博客内容生成网页资源，资源将会存于内存中，所以用户执行完命令之后在项目文件夹中是找不到相关的Web资源目录的。该命令还会启动一个简易的Web服务器用于提供对内存中网页资源的访问（工作机制类似于webpack-dev-server），Web服务器默认监听4000端口，用户可在浏览器中通过地址 <code>localhost:4000</code> 访问博客。</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-get-started/20181102070503130.png" alt="Hexo 默认主题首页" title="Hexo 默认主题首页"></p><p>此外，可以通过添加命令行参数来支持高级用法：</p><ul><li>当4000端口已被其他应用占用时，可以添加 <code>-p</code> / <code>--port</code> 参数来设置Web服务监听的端口号，如<code>hexo s -p 8000</code></li><li>默认情况下，hexo监听项目目录的文件变化，用户对于项目文件的任何改动都会触发实时解析编译并更新内存中的网页资源，也就是说，用户在本地修改后刷新浏览器就可以看到改动效果。如果不希望hexo监听项目目录的文件变化，可以添加 <code>-s</code> / <code>--static</code> 参数，这样本地改动就不会触发hexo实时解析更新。</li></ul><h1 id="更换Next主题"><a href="#更换Next主题" class="headerlink" title="更换Next主题"></a>更换Next主题</h1><p>Next作为一款符合广大程序员审美的主题，还是有着较高的出场率的。Hexo中切换主题的方式非常简单，只需要将主题文件拷贝至根目录下的 <code>themes</code> 文件夹中， 然后修改 <code>_config.yml</code> 文件中的 <code>theme</code> 字段即可。</p><p>在根目录下执行以下命令下载主题文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/theme-next/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure><p>也可以在 <a href="https://github.com/theme-next/hexo-theme-next/releases" target="_blank" rel="noopener">NexT版本发布页面</a> 手动下载然后解压到根目录下的 <code>theme</code> 文件夹下，并将文件夹命名为 <code>next</code> 。这里可以看到 <code>theme</code> 文件夹下已经有一个名为 <code>landscape</code> 的文件夹了，这就是默认主题了。</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-get-started/20181022092625771.png" alt="NexT 版本发布页面下载链接" title="NexT 版本发布页面下载链接"></p><div class="note warning"><p>注意！Next仓库已经从<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">iissnan/hexo-theme-next</a>转移到了<a href="https://github.com/theme-next/hexo-theme-next/releases" target="_blank" rel="noopener">theme-next/hexo-theme-next</a>，并在新仓库中发布了 v6.x 版本，后续维护也将在新仓库中开展。如果你仍在使用旧仓库中的Next版本，可能会遇到各种Bug。</p></div><p>打开站点配置文件，将 <code>theme</code> 字段的值修改为 <code>next</code>。</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><p>这个时候刷新浏览器页面并不会发生变化，需要重启服务器并刷新才能使主题生效。</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-get-started/20181102095611506.png" alt="Next 主题首页" title="Next 主题首页"></p><div class="note info"><p>如果重启服务器仍无效，尝试使用 <code>hexo clean</code> 清除缓存</p></div><p>Next默认主题风格为Muse，用户可以在主题配置文件中修改 <code>scheme</code> 字段以选择自己喜欢的主题风格：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure><h1 id="站点优化"><a href="#站点优化" class="headerlink" title="站点优化"></a>站点优化</h1><p>根目录下的 _config.yml 文件负责站点的相关配置，用户可以通过修改该文件来自定义站点内容或功能，修改后需要重启服务器才能看到效果。</p><p>本节通过修改站点配置文件完善了网站标题、网站描述、社交链接、站点版权信息、友情链接等，效果如下图：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-get-started/Snipaste_2018-11-17_17-01-51.png" alt="站点概览" title="站点概览"></p><h2 id="完善站点基础信息"><a href="#完善站点基础信息" class="headerlink" title="完善站点基础信息"></a>完善站点基础信息</h2><p>在站点配置文件中完善网站基本信息：</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Yearito's</span> <span class="string">Blog</span>  <span class="comment"># 站点名称</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">Stay</span> <span class="string">hungry,</span> <span class="string">stay</span> <span class="string">foolish.</span>  <span class="comment"># 站点描述</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment"># 设置网站语言为简体中文</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">yearito</span>  <span class="comment"># 作者名称</span></span><br></pre></td></tr></table></figure><p>每个字段的冒号与值之间需要<strong>间隔一个空格</strong>。</p><h2 id="首页显示文章摘要"><a href="#首页显示文章摘要" class="headerlink" title="首页显示文章摘要"></a>首页显示文章摘要</h2><p>根据默认的主题配置，首页将会显示每一篇文章的全文，如果想要只显示文章摘要，可以在主题配置文件中做出如下更改：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 开启自动摘要提取</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure><p>此时将会从文章中提取150个字符作为摘要。</p><p>用户可以在文章中通过 <code>&lt;!-- more --&gt;</code> 标记来精确划分摘要信息，标记之前的段落将作为摘要显示在首页。</p><p>如果在文章的Front-Matter中有非空的 <code>description</code> 字段，则该字段的内容会被作为摘要显示在首页。</p><h2 id="修改站点页脚"><a href="#修改站点页脚" class="headerlink" title="修改站点页脚"></a>修改站点页脚</h2><p>在主题配置文件中修改网站页脚信息：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span>  <span class="comment"># 底部信息区</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2018</span>  <span class="comment"># 建站时间</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">heart</span>   <span class="comment"># 图标名称</span></span><br><span class="line">    <span class="attr">animated:</span> <span class="literal">true</span>   <span class="comment"># 开启动画</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">"#ff0000"</span>   <span class="comment"># 图标颜色</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">powered:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 显示由 Hexo 强力驱动</span></span><br><span class="line">    <span class="attr">version:</span> <span class="literal">false</span>  <span class="comment"># 隐藏 Hexo 版本号</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 显示所用的主题名称</span></span><br><span class="line">    <span class="attr">version:</span> <span class="literal">false</span>  <span class="comment"># 隐藏主题版本号</span></span><br></pre></td></tr></table></figure><p>更改后效果如下：</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-get-started/20181102094925440.png" alt="站点页脚" title="站点页脚"></p><h2 id="修改网站Favicon"><a href="#修改网站Favicon" class="headerlink" title="修改网站Favicon"></a>修改网站Favicon</h2><p>Favicon即浏览器标签左侧的图标。下载自己喜欢的图标置于 <code>themes\next\source\images\</code> 目录下，命名方式参考主题配置文件中的 <code>favicon</code> 字段。</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16-next.png</span>  <span class="comment"># 小图标</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32-next.png</span>  <span class="comment"># 大图标</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-next.png</span>  <span class="comment"># 苹果图标</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/logo.svg</span>  <span class="comment"># safari浏览器标签页图标</span></span><br></pre></td></tr></table></figure><h2 id="添加友链"><a href="#添加友链" class="headerlink" title="添加友链"></a>添加友链</h2><p>在主题配置文件中修改相应字段：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">links_icon:</span> <span class="string">link</span></span><br><span class="line"><span class="attr">links_title:</span> <span class="string">友情链接</span></span><br><span class="line"><span class="attr">links_layout:</span> <span class="string">inline</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="attr">yearito:</span> <span class="string">http://yearito.cn/</span></span><br></pre></td></tr></table></figure><h2 id="添加社交链接"><a href="#添加社交链接" class="headerlink" title="添加社交链接"></a>添加社交链接</h2><p>用户可以在主题配置文件中根据样例提示添加个人社交软件链接：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/yourname</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:yourname@gmail.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line">  <span class="attr">Weibo:</span> <span class="string">https://weibo.com/yourname</span> <span class="string">||</span> <span class="string">weibo</span></span><br><span class="line">  <span class="attr">Google:</span> <span class="string">https://plus.google.com/yourname</span> <span class="string">||</span> <span class="string">google</span></span><br><span class="line">  <span class="attr">Twitter:</span> <span class="string">https://twitter.com/yourname</span> <span class="string">||</span> <span class="string">twitter</span></span><br><span class="line">  <span class="attr">FB Page:</span> <span class="string">https://www.facebook.com/yourname</span> <span class="string">||</span> <span class="string">facebook</span></span><br><span class="line">  <span class="attr">VK Group:</span> <span class="string">https://vk.com/yourname</span> <span class="string">||</span> <span class="string">vk</span></span><br><span class="line">  <span class="attr">StackOverflow:</span> <span class="string">https://stackoverflow.com/yourname</span> <span class="string">||</span> <span class="string">stack-overflow</span></span><br><span class="line">  <span class="attr">YouTube:</span> <span class="string">https://youtube.com/yourname</span> <span class="string">||</span> <span class="string">youtube</span></span><br><span class="line">  <span class="attr">Instagram:</span> <span class="string">https://instagram.com/yourname</span> <span class="string">||</span> <span class="string">instagram</span></span><br><span class="line">  <span class="attr">Skype:</span> <span class="string">skype:yourname?call|chat</span> <span class="string">||</span> <span class="string">skype</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social_icons:</span>   </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 显示社交软件图标</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">false</span>  <span class="comment"># 显示图标的同时显示文字</span></span><br></pre></td></tr></table></figure><p>如果要取消社交图标前的小圆点，可以在自定义样式文件中添加如下样式规则：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//隐藏社交图标前的圆点</span><br><span class="line"><span class="selector-class">.links-of-author</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-class">.links-of-author</span> <span class="selector-class">.exturl</span> &#123;</span><br><span class="line">  &amp;:before &#123;</span><br><span class="line">    <span class="selector-tag">display</span>: <span class="selector-tag">none</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加版权协议"><a href="#添加版权协议" class="headerlink" title="添加版权协议"></a>添加版权协议</h2><p>在主题配置文件中开启相关字段并选择知识共享协议：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">creative_commons:</span> <span class="string">by-nc-sa</span></span><br></pre></td></tr></table></figure><h2 id="点击头像回到首页"><a href="#点击头像回到首页" class="headerlink" title="点击头像回到首页"></a>点击头像回到首页</h2><div class="note info"><p>本章节参考 <a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">reuixiy | 打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化#5.13</a></p></div><p>修改侧边栏模板代码:</p><figure class="highlight diff"><figcaption><span>themes\next\layout\_macro\sidebar.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  &#123;% if theme.avatar.url %&#125;</span><br><span class="line"><span class="addition">+   &lt;a href="/"&gt;</span></span><br><span class="line">      &lt;img class="site-author-image" itemprop="image"</span><br><span class="line">        src="&#123;&#123; url_for( theme.avatar.url | default(theme.images + '/avatar.gif') ) &#125;&#125;"</span><br><span class="line">        alt="&#123;&#123; author &#125;&#125;" /&gt;</span><br><span class="line"><span class="addition">+   &lt;/a&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h1 id="文章页优化"><a href="#文章页优化" class="headerlink" title="文章页优化"></a>文章页优化</h1><p>主题目录下的 themes\next\_config.yml 文件负责与主题相关的配置，用户可以通过修改该文件来自定义与主题相关的内容或功能，修改后刷新浏览器即可即时生效。</p><h2 id="修改文章目录导航"><a href="#修改文章目录导航" class="headerlink" title="修改文章目录导航"></a>修改文章目录导航</h2><h3 id="取消数字编号"><a href="#取消数字编号" class="headerlink" title="取消数字编号"></a>取消数字编号</h3><p>在主题配置文件中关闭目录中的数字编号：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span>  <span class="comment"># 关闭目录中的数字编号</span></span><br></pre></td></tr></table></figure><h3 id="展开全部目录层级"><a href="#展开全部目录层级" class="headerlink" title="展开全部目录层级"></a>展开全部目录层级</h3><p>默认情况下文章的多级目录是折叠的，点击才会触发下级菜单的展开，并且并且同时只能展开一个目录分支，这会造成在点击不同目录标题的时候目录跳来跳去。如果你想实现默认展开全部目录的功能，可以在自定义样式文件中添加以下代码：</p><figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//TOC目录默认全部展开</span><br><span class="line"><span class="selector-class">.post-toc</span> <span class="selector-class">.nav</span> <span class="selector-class">.nav-child</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="默认展开两级目录"><a href="#默认展开两级目录" class="headerlink" title="默认展开两级目录"></a>默认展开两级目录</h3><p>通常文章内会出现多级标题，对应的目录里就会有多级导航出现，这时候一些原本你不希望出现的次要标题也会在目录中出现并且无法折叠。可以通过以下样式实现默认只展开两级目录，这样以来就通过一个折中的方案完美解决了目录折叠的问题。</p><figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//TOC目录默认展开两级</span><br><span class="line"><span class="selector-class">.post-toc</span> <span class="selector-class">.nav</span> <span class="selector-class">.nav-level-1</span>&gt;<span class="selector-class">.nav-child</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="只显示两级目录"><a href="#只显示两级目录" class="headerlink" title="只显示两级目录"></a>只显示两级目录</h3><p>如果你根本不想让三级及以上的标题出现TOC导航目录中，可以考虑在自定义样式文件中添加以下代码：</p><figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//TOC目录默认只显示两级目录</span><br><span class="line"><span class="selector-class">.nav-level-2</span> &gt; <span class="selector-class">.nav-child</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主动隐藏文章目录"><a href="#主动隐藏文章目录" class="headerlink" title="主动隐藏文章目录"></a>主动隐藏文章目录</h3><p>如果你写了一篇并不算长的文章，没有层层嵌套的多级目录结构，此时侧边的文章目录空荡荡的就有点鸡肋了。修改侧边栏布局模板中的相关逻辑代码：</p><figure class="highlight diff"><figcaption><span>themes\next\layout\_macro\sidebar.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- &#123;% set display_toc = is_post and theme.toc.enable %&#125;</span></span><br><span class="line"><span class="addition">+ &#123;% set display_toc = is_post and theme.toc.enable and not page.hide_toc %&#125;</span></span><br></pre></td></tr></table></figure><p>然后就可在 Front-Matter 中设定变量 hide_toc 用于控制是否隐藏侧边目录。</p><h2 id="修改文章meta信息"><a href="#修改文章meta信息" class="headerlink" title="修改文章meta信息"></a>修改文章meta信息</h2><p>默认主题配置中，标题下方会显示文章的创建时间、文章的修改时间、文章分类信息等元数据，用户可以在主题配置文件中自定义设置需要显示的meta元信息：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span>  <span class="comment"># 显示文字说明</span></span><br><span class="line">  <span class="attr">created_at:</span> <span class="literal">true</span>  <span class="comment"># 显示文章创建时间</span></span><br><span class="line">  <span class="attr">updated_at:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span>  <span class="comment"># 隐藏文章修改时间</span></span><br><span class="line">    <span class="attr">another_day:</span> <span class="literal">true</span>  <span class="comment"># 只有当修改时间和创建时间不是同一天的时候才显示</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">false</span>  <span class="comment"># 隐藏分类信息</span></span><br></pre></td></tr></table></figure><h2 id="中英文之间自动添加空格"><a href="#中英文之间自动添加空格" class="headerlink" title="中英文之间自动添加空格"></a>中英文之间自动添加空格</h2><p>该功能由<a href="https://github.com/vinta/pangu.js" target="_blank" rel="noopener">pangu</a> 提供，在根目录下执行如下命令克隆插件到项目中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/theme-next/theme-next-pangu.git themes/next/source/lib/pangu</span><br></pre></td></tr></table></figure><p>在主题配置文件中设置 <code>pangu: true</code> 即可启用该动能。</p><div class="note warning"><p>不推荐使用 hexo-filter-auto-spacing 实现该功能，该插件会导致目录中带有中英文的标题失效，无法跳转到文章指定章节。</p></div><h2 id="修正文末导航跳转逻辑"><a href="#修正文末导航跳转逻辑" class="headerlink" title="修正文末导航跳转逻辑"></a>修正文末导航跳转逻辑</h2><div class="note info"><p>本章节参考 <a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">reuixiy | 打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化#5.2</a></p></div><p>如果不是看到reuixiy的文章，可能一辈子都不会注意到这个奇葩的逻辑：文章底部的左侧/右侧箭头分别导航到更旧/更新的文章链接，就好像你在手机相册里左滑却看到了更久以前的照片，细细想想这个逻辑毫无社会主义可言，至少没有中国特色。</p><p>修改文章布局模板：</p><figure class="highlight diff"><figcaption><span>themes\next\layout\_macro\post.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if not is_index and (post.prev or post.next) %&#125;</span><br><span class="line">  &lt;div class="post-nav"&gt;</span><br><span class="line">    &lt;div class="post-nav-next post-nav-item"&gt;</span><br><span class="line"><span class="deletion">-      &#123;% if post.next %&#125;</span></span><br><span class="line"><span class="addition">+      &#123;% if post.prev %&#125;</span></span><br><span class="line"><span class="deletion">-        &lt;a href="&#123;&#123; url_for(post.next.path) &#125;&#125;" rel="next" title="&#123;&#123; post.next.title &#125;&#125;"&gt;</span></span><br><span class="line"><span class="addition">+        &lt;a href="&#123;&#123; url_for(post.prev.path) &#125;&#125;" rel="prev" title="&#123;&#123; post.prev.title &#125;&#125;"&gt;</span></span><br><span class="line"><span class="deletion">-          &lt;i class="fa fa-chevron-left"&gt;&lt;/i&gt; &#123;&#123; post.next.title &#125;&#125;</span></span><br><span class="line"><span class="addition">+          &lt;i class="fa fa-chevron-left"&gt;&lt;/i&gt; &#123;&#123; post.prev.title &#125;&#125;</span></span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span class="post-nav-divider"&gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class="post-nav-prev post-nav-item"&gt;</span><br><span class="line"><span class="deletion">-      &#123;% if post.prev %&#125;</span></span><br><span class="line"><span class="addition">+      &#123;% if post.next %&#125;</span></span><br><span class="line"><span class="deletion">-        &lt;a href="&#123;&#123; url_for(post.prev.path) &#125;&#125;" rel="prev" title="&#123;&#123; post.prev.title &#125;&#125;"&gt;</span></span><br><span class="line"><span class="addition">+        &lt;a href="&#123;&#123; url_for(post.next.path) &#125;&#125;" rel="next" title="&#123;&#123; post.next.title &#125;&#125;"&gt;</span></span><br><span class="line"><span class="deletion">-          &#123;&#123; post.prev.title &#125;&#125; &lt;i class="fa fa-chevron-right"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="addition">+          &#123;&#123; post.next.title &#125;&#125; &lt;i class="fa fa-chevron-right"&gt;&lt;/i&gt;</span></span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><div class="note info"><p>不同版本的Hexo和Next主题之间配置项可能存在差异，本系列文章中的配置有效性以Hexo v3.7.1和Next v6.4.2为准。</p></div><p>至此你已经在本地搭建起了Hexo博客，更换到了Next主题，并对站点进行了一些基本的自定义配置，看起来已经是一个可以正常使用的站点了。但可能仅仅这样还无法满足你的高级需求，你可以关注本系列的后续几篇文章，将分别从不同的角度一步步的帮助你搭建一个功能更加强大，界面更加优雅的个人博客站点：</p><ul><li>想要了解和写作有关的语法技巧，请参考本系列中的 <a href="/posts/hexo-writing-skills.html" title="Hexo搭建个人博客系列：写作技巧篇">Hexo搭建个人博客系列：写作技巧篇</a>。</li><li>想要进一步美化主题，添加动效以及交互，请参考本系列中的 。</li><li>想要深度定制个性化站点，请参考本系列中的 <a href="/posts/hexo-advanced-settings.html" title="Hexo搭建个人博客系列：进阶设置篇">Hexo搭建个人博客系列：进阶设置篇</a>。</li><li>想要了解如何将站点部署到公网，请参考本系列中的 <a href="/posts/hexo-deploy-to-VPS.html" title="Hexo搭建个人博客系列：部署上线篇">Hexo搭建个人博客系列：部署上线篇</a></li></ul><div class="reference-linking">参考链接</div><ul><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a></li><li><a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT使用文档</a> （部分章节与 v6.x 配置不兼容）</li><li><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">reuixiy | 打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://yearito-1256884783.image.myqcloud.com/thumbnails/forest.jpg!thumbnail&quot; alt=&quot;题图&quot; title=&quot;Photo by Ronald Jansen&quot;&gt;&lt;/p&gt;
&lt;p&gt;Hexo是一个高效简洁的静态博客框架，支持Markdown写作语法，插件丰富，主题优雅，部署方便。目前已成为多数人博客建站的选择。&lt;/p&gt;
&lt;p&gt;本文为Hexo搭建个人博客系列中的第一篇。第一章中介绍了如何在本地搭建Hexo博客，第二章中介绍了如何安装使用Next主题，第三章和第四章分别介绍了针对于站点和文章详情页的一些基础优化方案。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://freegale.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="博客" scheme="http://freegale.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://freegale.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>序</title>
    <link href="http://freegale.github.io/posts/prologue.html"/>
    <id>http://freegale.github.io/posts/prologue.html</id>
    <published>2018-09-20T15:16:09.000Z</published>
    <updated>2020-11-05T12:16:14.157Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://yearito-1256884783.image.myqcloud.com/thumbnails/elephant.jpg" alt="题图" title="Photo by Emma Kjellstrand"></p><blockquote class="blockquote-center">写作是一个好习惯，深以为然。这是一个回顾、梳理、总结的过程，更是一个重新思考的过程。</blockquote><p>第一次看到Next主题的Hexo博客，就被它极致的简洁所吸引，那时就曾想，以后一定要自己搭建一个博客，寻找一方净土，记录生活感悟和技术成长，今日终如愿。</p><a id="more"></a><blockquote><p>学而不思则惘，思而不学则殆。</p></blockquote><p>记录生活，可以把自己从喧闹的现实生活中释放出来，放空自己，使得内心重归平静，然后思考自己过去这一年，或者这几个月做了些什么有意义的事，完成了什么重要的任务，并进一步思考，未来的路应该怎么走，而不是被现实的压力驱赶着，一直低头赶路。在这个讯息爆炸的年代，每天都有太多的事情发生，和自己有关的，和自己没关的，都未经过滤从各种社交媒体渠道钻进大脑里占据一部分空间，我越来越难以回忆起来，去年的这个时候我在做些什么，在想些什么，对未来的人生有着怎么样的想法。所以我需要通过文字这种媒介，让过去不止是淹没在时间长河中再也打捞不起来的过去，而是一条清晰的锁链，我拽着锁链的这一头，就能与过去的自己对话，了解自己的人生观、价值观、性格、为人处世的原则是如何悄然发生变化的。</p><p>技术笔记则可以帮助自己理清解决问题的思路，归纳知识体系。在工作中遇到了技术难题，如果一味的搜索、尝试，直到柳暗花明突然解决问题，而没有停下手头的工作来思考并记录整个始末的话，则是错失了一大笔财富，或许一年后你再遇到同样问题的时候，依然要花费时间重新探索。我觉得，每过一段时间的技术积淀，都要停下脚步来重新思考，梳理一下零散的知识体系，或者记录一些关键问题的探索方案，延续已付出的时间和努力的价值。解决了问题并不代表就懂了会了，面试的时候别人问起同样的问题你不一定就可以当场总结表达出来，但如果你能自己写下来，或者讲给别人听，那么你才真正拥有这份知识。</p><p>某个话题的文章已经有很多人写过了，并且有的大佬已经写的很深刻到位了，为什么还要再写一遍?</p><p>我字写的比别人好看。</p><p>即使同样一个技术方案已经有一百个人在自己的博客里总结过，但还是很有可能你翻遍了网络都找不到一篇让你100%称心如意的，或是社区文章广告多，或是截图太粗糙，或是太过啰嗦，还有可能是别人一个中文逗号写成了英文逗号，而你这时只能看着发呆却无能无力，这就是强迫症了。你可以参考别人的技术方案，集众所长，亲自实践，然后融入自己的思考写出一篇新文章。这里有两点很重要，第一，亲自实践，第二，重新思考。即使并没有做出创新性的贡献，自己重新归纳一遍也有助于梳理流程，深化理解。</p><blockquote><p>工欲善其事必先利其器。</p></blockquote><p>一开始用印象笔记写作，后来因为不支持Markdown就迁移到了为知笔记。为知虽然原生支持Markdown，但是没有解决图片上传这个痛点，并且内置的编辑器有点简陋，没法实时预览，我一般用Sublime作为默认写作编辑器。付费使用为知笔记一年多后，我发现了有道云笔记，极致简洁的UI让我一见倾心，于是又把所有的笔记从为知转到了有道云，并且2018年7月16日有道云v6.5.0又推出了Markdown上传本地图片的功能（会员专享），完美解决了我的需求。简洁的UI，轻量级的应用，精准聚焦于用户核心需求，这很优雅，对，要优雅，我觉得好的互联网产品一定要优雅。与此相比，印象笔记和为知笔记则略显臃肿，功能繁琐，UI复杂，都不够优雅。除了有道云，网易的另一款产品网易邮箱大师也凭借极简的UI交互俘获了我，除了经常发不出邮件之外其他都挺好。</p><p>我是尤其钟爱这类极简而优雅的产品的，有道云、网易邮箱大师、石墨以及MIUI。</p><p>有道云用户体验这么好，为什么又要建站写博客。</p><ul><li>因为Hexo更优雅</li><li>程序员就是要瞎折腾</li><li>解锁新的技能，成就感+1</li><li>老婆面前炫耀的资本，成功驯服一头小萝莉</li></ul><p>一方面，我越来越觉得，要把感悟、经验、知识分享出来，给他人带来价值，或者经受批判而后成长。</p><p>另一方面，工作后人际关系更加复杂，喧嚣的社交网络已经不再适合谈及生活与思想，只有自己开辟一片净土，在此延续另一种形态的社交。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://yearito-1256884783.image.myqcloud.com/thumbnails/elephant.jpg&quot; alt=&quot;题图&quot; title=&quot;Photo by Emma Kjellstrand&quot;&gt;&lt;/p&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;写作是一个好习惯，深以为然。这是一个回顾、梳理、总结的过程，更是一个重新思考的过程。&lt;/blockquote&gt;

&lt;p&gt;第一次看到Next主题的Hexo博客，就被它极致的简洁所吸引，那时就曾想，以后一定要自己搭建一个博客，寻找一方净土，记录生活感悟和技术成长，今日终如愿。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://freegale.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
</feed>
